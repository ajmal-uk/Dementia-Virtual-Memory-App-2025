{
  "lib": {
    "admin": {
      "admin_bottom_nav.dart": {
        "_text": "import 'package:flutter/material.dart';\n\nclass AdminBottomNav extends StatefulWidget {\n  const AdminBottomNav({Key? key}) : super(key: key);\n\n  @override\n  State<AdminBottomNav> createState() => _AdminBottomNavState();\n}\n\nclass _AdminBottomNavState extends State<AdminBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const Center(child: Text('Admin Panel')),\n    const Center(child: Text('Admin Reports')),\n    const Center(child: Text('Admin Settings')),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.admin_panel_settings), label: 'Panel'),\n          BottomNavigationBarItem(icon: Icon(Icons.report), label: 'Reports'),\n          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      }
    },
    "careTaker": {
      "caretaker_bottom_nav.dart": {
        "_text": "import 'package:flutter/material.dart';\n\nclass CaretakerBottomNav extends StatefulWidget {\n  const CaretakerBottomNav({Key? key}) : super(key: key);\n\n  @override\n  State<CaretakerBottomNav> createState() => _CaretakerBottomNavState();\n}\n\nclass _CaretakerBottomNavState extends State<CaretakerBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const Center(child: Text('Caretaker Dashboard')),\n    const Center(child: Text('Caretaker Reports')),\n    const Center(child: Text('Caretaker Profile')),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.dashboard), label: 'Dashboard'),\n          BottomNavigationBarItem(icon: Icon(Icons.report), label: 'Reports'),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      }
    },
    "services": {},
    "user": {
      "user_bottom_nav.dart": {
        "_text": "import 'package:flutter/material.dart';\n\nclass UserBottomNav extends StatefulWidget {\n  const UserBottomNav({Key? key}) : super(key: key);\n\n  @override\n  State<UserBottomNav> createState() => _UserBottomNavState();\n}\n\nclass _UserBottomNavState extends State<UserBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const Center(child: Text('User Home')),\n    const Center(child: Text('User To-Do')),\n    const Center(child: Text('User Profile')),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n          BottomNavigationBarItem(icon: Icon(Icons.list), label: 'Tasks'),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      }
    },
    "utils": {},
    "forgot_password_page.dart": {
      "_text": "import 'package:flutter/material.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({Key? key}) : super(key: key);\n\n  @override\n  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();\n}\n\nclass _ForgotPasswordPageState extends State<ForgotPasswordPage> {\n  final TextEditingController emailController = TextEditingController();\n\n  void _resetPassword() {\n    // TODO: implement Firebase password reset here\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(content: Text('Password reset link sent to ${emailController.text}')),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        // remove back arrow? if you want to also remove arrow here:\n        automaticallyImplyLeading: true,\n        title: const Text('Forgot Password'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            const Text(\n              'Enter your email to reset your password',\n              style: TextStyle(fontSize: 16),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            const SizedBox(height: 24),\n            ElevatedButton(\n              onPressed: _resetPassword,\n              child: const Text('Send Reset Link'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
      "_encoding": "utf-8"
    },
    "login_page.dart": {
      "_text": "import 'package:flutter/material.dart';\nimport 'admin/admin_bottom_nav.dart';\nimport 'careTaker/caretaker_bottom_nav.dart';\nimport 'register_page.dart';\nimport 'forgot_password_page.dart';\nimport 'user/user_bottom_nav.dart';\n\nclass LoginPage extends StatefulWidget {\n  final String role;\n  const LoginPage({Key? key, required this.role}) : super(key: key);\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n\n  void _login() {\n    // TODO: Implement Firebase login here\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(content: Text('Logged in as ${widget.role}')),\n    );\n\n    Future.delayed(const Duration(milliseconds: 500), () {\n      if (widget.role == 'user') {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const UserBottomNav()),\n        );\n      } else if (widget.role == 'caretaker') {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const CaretakerBottomNav()),\n        );\n      } else {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const AdminBottomNav()),\n        );\n      }\n    });\n  }\n\n  void _goToRegister() {\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(\n        builder: (context) => RegisterPage(role: widget.role),\n      ),\n    );\n  }\n\n  void _forgotPassword() {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const ForgotPasswordPage()),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isAdmin = widget.role == 'admin';\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('${widget.role.toUpperCase()} Login'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: passwordController,\n              decoration: const InputDecoration(labelText: 'Password'),\n              obscureText: true,\n            ),\n            const SizedBox(height: 8),\n            Align(\n              alignment: Alignment.centerRight,\n              child: TextButton(\n                onPressed: _forgotPassword,\n                child: const Text('Forgot Password?'),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: _login,\n              child: Text('Login as ${widget.role}'),\n            ),\n            const SizedBox(height: 16),\n            if (!isAdmin)\n              TextButton(\n                onPressed: _goToRegister,\n                child: const Text('Don\\'t have an account? Sign up here'),\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
      "_encoding": "utf-8"
    },
    "main.dart": {
      "_text": "import 'package:flutter/material.dart';\nimport 'welcome_page.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'DVMA',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const WelcomePage(),\n    );\n  }\n}\n",
      "_encoding": "utf-8"
    },
    "register_page.dart": {
      "_text": "import 'package:flutter/material.dart';\n\nclass RegisterPage extends StatefulWidget {\n  final String role; // 'user' or 'caretaker'\n  const RegisterPage({Key? key, required this.role}) : super(key: key);\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  // Common fields\n  final TextEditingController nameController = TextEditingController();\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n\n  // User-specific fields\n  DateTime? dob;\n  final TextEditingController bioController = TextEditingController();\n  final TextEditingController emergencyNameController = TextEditingController();\n  final TextEditingController emergencyPhoneController = TextEditingController();\n\n  final TextEditingController experienceController = TextEditingController();\n\n  void _register() {\n    // TODO: Implement Firebase registration + Firestore saving here\n    if (widget.role == 'user') {\n      // Collect all user data\n      final userData = {\n        'name': nameController.text,\n        'email': emailController.text,\n        'dob': dob?.toIso8601String(),\n        'bio': bioController.text,\n        'emergency_contacts': [\n          {\n            'name': emergencyNameController.text,\n            'phone': emergencyPhoneController.text,\n          }\n        ],\n      };\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Registering User: $userData')),\n      );\n    } else {\n      // caretaker\n      final caretakerData = {\n        'name': nameController.text,\n        'email': emailController.text,\n        'experience': experienceController.text,\n      };\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Registering Caretaker: $caretakerData')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isUser = widget.role == 'user';\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Register as ${widget.role.toUpperCase()}'),\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: nameController,\n              decoration: const InputDecoration(labelText: 'Full Name'),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: passwordController,\n              decoration: const InputDecoration(labelText: 'Password'),\n              obscureText: true,\n            ),\n            const SizedBox(height: 16),\n\n            if (isUser) ...[\n              // Date of Birth\n              Row(\n                children: [\n                  Text(dob == null\n                      ? 'Select Date of Birth'\n                      : 'DOB: ${dob!.toLocal().toString().split(' ')[0]}'),\n                  const SizedBox(width: 16),\n                  ElevatedButton(\n                    onPressed: () async {\n                      final picked = await showDatePicker(\n                        context: context,\n                        initialDate: DateTime(1960),\n                        firstDate: DateTime(1900),\n                        lastDate: DateTime.now(),\n                      );\n                      if (picked != null) setState(() => dob = picked);\n                    },\n                    child: const Text('Pick Date'),\n                  ),\n                ],\n              ),\n              const SizedBox(height: 16),\n\n              TextField(\n                controller: bioController,\n                decoration: const InputDecoration(labelText: 'Short Bio'),\n              ),\n              const SizedBox(height: 16),\n\n              TextField(\n                controller: emergencyNameController,\n                decoration: const InputDecoration(labelText: 'Emergency Contact Name'),\n              ),\n              const SizedBox(height: 16),\n\n              TextField(\n                controller: emergencyPhoneController,\n                decoration: const InputDecoration(labelText: 'Emergency Contact Phone'),\n              ),\n              const SizedBox(height: 16),\n            ],\n\n            if (!isUser) ...[\n              TextField(\n                controller: experienceController,\n                decoration:\n                    const InputDecoration(labelText: 'Years of Experience'),\n                keyboardType: TextInputType.number,\n              ),\n              const SizedBox(height: 16),\n            ],\n\n            ElevatedButton(\n              onPressed: _register,\n              child: Text('Register as ${widget.role}'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
      "_encoding": "utf-8"
    },
    "welcome_page.dart": {
      "_text": "import 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'login_page.dart';\n\nclass WelcomePage extends StatelessWidget {\n  const WelcomePage({Key? key}) : super(key: key);\n\n  void _navigateTo(BuildContext context, String role) {\n    Navigator.push(\n      context,\n      MaterialPageRoute(\n        builder: (context) => LoginPage(role: role),\n      ),\n    );\n  }\n\n  void _showAdminDialog(BuildContext context) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Admin Access'),\n        content: const Text('Are you sure you want to access Admin login?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: const Text('Cancel'),\n          ),\n          TextButton(\n            onPressed: () {\n              Navigator.pop(context);\n              _navigateTo(context, 'admin');\n            },\n            child: const Text('Proceed'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: const BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.blueAccent, Colors.lightBlue],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SafeArea(\n          child: Center(\n            child: Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  GestureDetector(\n                    onLongPress: () => _showAdminDialog(context),\n                    child: const Text(\n                      'Welcome to DVMA',\n                      style: TextStyle(\n                        fontSize: 32,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                        letterSpacing: 1.2,\n                        shadows: [\n                          Shadow(\n                            blurRadius: 10.0,\n                            color: Colors.black26,\n                            offset: Offset(2.0, 2.0),\n                          ),\n                        ],\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ).animate().fadeIn(duration: 800.ms).slideY(begin: -0.2),\n                  const SizedBox(height: 16),\n                  const Text(\n                    'Select your role to continue',\n                    style: TextStyle(\n                      fontSize: 18,\n                      color: Colors.white70,\n                      fontStyle: FontStyle.italic,\n                    ),\n                  ).animate().fadeIn(duration: 1000.ms).slideY(begin: 0.2),\n                  const SizedBox(height: 48),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.person,\n                    label: 'I am a User',\n                    role: 'user',\n                    gradient: const LinearGradient(\n                      colors: [Colors.blue, Colors.blueAccent],\n                    ),\n                  ),\n                  const SizedBox(height: 20),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.volunteer_activism,\n                    label: 'I am a Caretaker',\n                    role: 'caretaker',\n                    gradient: const LinearGradient(\n                      colors: [Colors.green, Colors.greenAccent],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRoleButton({\n    required BuildContext context,\n    required IconData icon,\n    required String label,\n    required String role,\n    required LinearGradient gradient,\n  }) {\n    return Card(\n      elevation: 8,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: InkWell(\n        onTap: () => _navigateTo(context, role),\n        borderRadius: BorderRadius.circular(12),\n        child: Container(\n          decoration: BoxDecoration(\n            gradient: gradient,\n            borderRadius: BorderRadius.circular(12),\n          ),\n          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),\n          child: Row(\n            children: [\n              Icon(icon, size: 30, color: Colors.white),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Text(\n                  label,\n                  style: const TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.w600,\n                    color: Colors.white,\n                  ),\n                ),\n              ),\n              const Icon(Icons.arrow_forward, color: Colors.white),\n            ],\n          ),\n        ),\n      ),\n    ).animate().scale(duration: 600.ms, delay: 200.ms, curve: Curves.easeOut);\n  }\n}",
      "_encoding": "utf-8"
    }
  }
}