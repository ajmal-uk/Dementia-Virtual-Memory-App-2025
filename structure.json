// lib/main.dart
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_gemini/flutter_gemini.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'firebase_options.dart';
import 'welcome_page.dart';
import 'user/user_bottom_nav.dart';
import 'careTaker/caretaker_bottom_nav.dart';
import 'admin/admin_bottom_nav.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // 1. Load the .env file
  await dotenv.load(fileName: ".env");

  // 2. Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // 3. Initialize OneSignal
  final oneSignalAppId = dotenv.env['ONESIGNAL_APP_ID'];
  if (oneSignalAppId != null) {
    OneSignal.initialize(oneSignalAppId);
    OneSignal.Notifications.requestPermission(true);
  } else {
    debugPrint("Error: ONESIGNAL_APP_ID missing in .env");
  }

  // 4. Initialize Gemini
  final geminiApiKey = dotenv.env['GEMINI_API_KEY'];
  if (geminiApiKey != null) {
    Gemini.init(apiKey: geminiApiKey);
  } else {
    debugPrint("Error: GEMINI_API_KEY missing in .env");
  }

  final prefs = await SharedPreferences.getInstance();
  final user = FirebaseAuth.instance.currentUser;
  Widget initialScreen = const WelcomePage();

  if (user != null) {
    final role = prefs.getString('lastRole') ?? 'user';
    if (role == 'user') {
      initialScreen = const UserBottomNav();
    } else if (role == 'caretaker') {
      initialScreen = const CareTaker();
    } else if (role == 'admin') {
      initialScreen = const AdminBottomNav();
    }
  }

  runApp(MyApp(initialScreen: initialScreen));
}

class MyApp extends StatelessWidget {
  final Widget initialScreen;

  const MyApp({super.key, required this.initialScreen});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'DVMA',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blueAccent),
      ),
      home: Stack(
        children: [
          initialScreen, // Main app screen
          
          // Watermark overlay
          Positioned.fill(
            child: IgnorePointer(
              child: WatermarkOverlay(text: 'AJ'),
            ),
          ),
        ],
      ),
    );
  }
}

// Watermark widget
class WatermarkOverlay extends StatelessWidget {
  final String text;
  final double opacity;
  final double fontSize;
  final double angle; // in radians
  final Color color;

  const WatermarkOverlay({
    super.key,
    required this.text,
    this.opacity = 0.1,
    this.fontSize = 60,
    this.angle = -0.3, // slight diagonal
    this.color = Colors.black,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(builder: (context, constraints) {
      final width = constraints.maxWidth;
      final height = constraints.maxHeight;

      // number of repeats horizontally and vertically
      final horizontalCount = (width / 200).ceil();
      final verticalCount = (height / 200).ceil();

      return Stack(
        children: List.generate(horizontalCount * verticalCount, (index) {
          final x = (index % horizontalCount) * 200.0;
          final y = (index ~/ horizontalCount) * 200.0;

          return Positioned(
            left: x,
            top: y,
            child: Transform.rotate(
              angle: angle,
              child: Opacity(
                opacity: opacity,
                child: Text(
                  text,
                  style: TextStyle(
                    fontSize: fontSize,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
              ),
            ),
          );
        }),
      );
    });
  }
}
