{
  "lib": {
    "services": {},
    "user": {
      "caretaker": {
        "caretaker_screen.dart": {
          "_text": "// lib/user/caretaker/caretaker_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nimport '../../utils/notification_helper.dart';\n\nclass CaretakerScreen extends StatefulWidget {\n  const CaretakerScreen({super.key});\n\n  @override\n  State<CaretakerScreen> createState() => _CaretakerScreenState();\n}\n\nclass _CaretakerScreenState extends State<CaretakerScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  String? _currentConnectionId;\n  Map<String, dynamic>? _connectedCaretaker;\n  List<QueryDocumentSnapshot> _availableCaretakers = [];\n  bool _isLoading = true;\n  bool _hasError = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadData();\n  }\n\n  Future<void> _loadData() async {\n    if (!mounted) return;\n    setState(() => _isLoading = true);\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final userDoc = await _firestore.collection('user').doc(uid).get();\n        if (!userDoc.exists) {\n          if (mounted) {\n            setState(() {\n              _isLoading = false;\n              _hasError = true;\n            });\n          }\n          return;\n        }\n        \n        _currentConnectionId = userDoc.data()?['currentConnectionId'];\n\n        if (_currentConnectionId != null) {\n          final connectionDoc = await _firestore\n              .collection('connections')\n              .doc(_currentConnectionId)\n              .get();\n          if (connectionDoc.exists) {\n            final status = connectionDoc.data()?['status'];\n            if (status == 'unbind_requested') {\n              // Show dialog for unbind request\n              if (mounted) {\n                showDialog(\n                  context: context,\n                  builder: (context) => AlertDialog(\n                    title: const Text('Unbind Request Pending'),\n                    content: const Text(\n                      'An unbind request is pending confirmation from the caretaker.',\n                    ),\n                    actions: [\n                      TextButton(\n                        onPressed: () => Navigator.pop(context),\n                        child: const Text('OK'),\n                      ),\n                    ],\n                  ),\n                );\n                setState(() {\n                  _connectedCaretaker = null;\n                  _isLoading = false;\n                });\n              }\n            } else {\n              final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n              if (caretakerUid != null) {\n                final caretakerDoc = await _firestore\n                    .collection('caretaker')\n                    .doc(caretakerUid)\n                    .get();\n                if (mounted) {\n                  setState(() {\n                    _connectedCaretaker = caretakerDoc.data();\n                    _isLoading = false;\n                  });\n                }\n              } else {\n                if (mounted) {\n                  setState(() {\n                    _connectedCaretaker = null;\n                    _isLoading = false;\n                  });\n                }\n              }\n            }\n          } else {\n            if (mounted) {\n              setState(() {\n                _connectedCaretaker = null;\n                _isLoading = false;\n              });\n            }\n          }\n        } else {\n          final query = await _firestore\n              .collection('caretaker')\n              .where('isApprove', isEqualTo: true)\n              .where('isRemove', isEqualTo: false)\n              .where('currentConnectionId', isNull: true)\n              .get();\n          if (mounted) {\n            setState(() {\n              _availableCaretakers = query.docs;\n              _isLoading = false;\n            });\n          }\n        }\n      }\n    } catch (e) {\n      print('Error loading data: $e');\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error loading data: $e')));\n      }\n    }\n  }\n\n  Future<void> _sendRequest(String caretakerUid) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid != null) {\n      try {\n        // Check if there's already a pending request\n        final existingRequests = await _firestore\n            .collection('connections')\n            .where('user_uid', isEqualTo: uid)\n            .where('caretaker_uid', isEqualTo: caretakerUid)\n            .where('status', isEqualTo: 'pending')\n            .get();\n        \n        if (existingRequests.docs.isNotEmpty) {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('You already have a pending request to this caretaker')),\n            );\n          }\n          return;\n        }\n\n        await _firestore.collection('connections').add({\n          'user_uid': uid,\n          'caretaker_uid': caretakerUid,\n          'status': 'pending',\n          'timestamp': Timestamp.now(),\n          'confirmedBy': null,\n        });\n\n        // Notify caretaker\n        final caretakerDoc = await _firestore\n            .collection('caretaker')\n            .doc(caretakerUid)\n            .get();\n        final playerIds = List<String>.from(\n          caretakerDoc.data()?['playerIds'] ?? [],\n        );\n        await sendNotification(playerIds, 'New connection request from user');\n\n        // Add to notifications subcollection\n        await _firestore\n            .collection('caretaker')\n            .doc(caretakerUid)\n            .collection('notifications')\n            .add({\n              'type': 'connection_request',\n              'message': 'Connection request from user $uid',\n              'from': uid,\n              'to': caretakerUid,\n              'createdAt': Timestamp.now(),\n              'isRead': false,\n            });\n\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Request sent!')));\n          _loadData();\n        }\n      } catch (e) {\n        print('Error sending request: $e');\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e')));\n        }\n      }\n    }\n  }\n\n  Future<void> _requestUnbind() async {\n    if (!mounted) return;\n\n    if (_currentConnectionId != null) {\n      try {\n        await _firestore\n            .collection('connections')\n            .doc(_currentConnectionId)\n            .update({\n              'status': 'unbind_requested',\n              'confirmedBy': _auth.currentUser?.uid,\n            });\n\n        // Notify caretaker\n        final connectionDoc = await _firestore\n            .collection('connections')\n            .doc(_currentConnectionId)\n            .get();\n        final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n        if (caretakerUid != null) {\n          final caretakerDoc = await _firestore\n              .collection('caretaker')\n              .doc(caretakerUid)\n              .get();\n          final playerIds = List<String>.from(\n            caretakerDoc.data()?['playerIds'] ?? [],\n          );\n          await sendNotification(playerIds, 'Unbind request from user');\n\n          await _firestore\n              .collection('caretaker')\n              .doc(caretakerUid)\n              .collection('notifications')\n              .add({\n                'type': 'unbind_request',\n                'message': 'Unbind request from user',\n                'from': _auth.currentUser?.uid,\n                'to': caretakerUid,\n                'createdAt': Timestamp.now(),\n                'isRead': false,\n              });\n        }\n\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Unbind request sent')));\n          _loadData();\n        }\n      } catch (e) {\n        print('Error requesting unbind: $e');\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e')));\n        }\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return const Scaffold(body: Center(child: CircularProgressIndicator(color: Colors.blueAccent)));\n    }\n\n    if (_hasError) {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Caretaker'), backgroundColor: Colors.blueAccent, elevation: 0),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Icon(Icons.error, size: 64, color: Colors.red),\n              const SizedBox(height: 16),\n              const Text(\n                'Error loading caretaker data',\n                style: TextStyle(fontSize: 18, color: Colors.red),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: _loadData,\n                style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                child: const Text('Retry', style: TextStyle(color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      );\n    }\n\n    if (_connectedCaretaker != null) {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Connected Caretaker'), backgroundColor: Colors.blueAccent, elevation: 0),\n        body: Container(\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              begin: Alignment.topCenter,\n              end: Alignment.bottomCenter,\n              colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n            ),\n          ),\n          child: Center(\n            child: Padding(\n              padding: const EdgeInsets.all(24.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  CircleAvatar(\n                    radius: 60,\n                    backgroundColor: Colors.grey[300],\n                    backgroundImage: NetworkImage(\n                      _connectedCaretaker!['profileImageUrl'] ?? '',\n                    ),\n                    onBackgroundImageError: (_, __) => const Icon(Icons.person, size: 60, color: Colors.blueAccent),\n                  ),\n                  const SizedBox(height: 16),\n                  Text(\n                    _connectedCaretaker!['fullName'] ?? 'Unnamed',\n                    style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n                  ),\n                  Text(\n                    'Experience: ${_connectedCaretaker!['experienceYears'] ?? 0} years',\n                    style: const TextStyle(fontSize: 16, color: Colors.grey),\n                  ),\n                  const SizedBox(height: 20),\n                  ElevatedButton(\n                    onPressed: _requestUnbind,\n                    style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n                    child: const Text('Request Unbind', style: TextStyle(color: Colors.white)),\n                  ),\n                  const SizedBox(height: 10),\n                  IconButton(\n                    icon: const Icon(Icons.phone, color: Colors.green, size: 32),\n                    onPressed: () async {\n                      final phone = _connectedCaretaker!['phoneNo'];\n                      if (phone != null && phone.isNotEmpty) {\n                        final url = Uri.parse('tel:$phone');\n                        if (await canLaunchUrl(url)) {\n                          await launchUrl(url);\n                        } else if (mounted) {\n                          ScaffoldMessenger.of(context).showSnackBar(\n                            const SnackBar(content: Text('Could not launch phone app')),\n                          );\n                        }\n                      }\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      );\n    } else {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Available Caretakers'), backgroundColor: Colors.blueAccent, elevation: 0),\n        body: Container(\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              begin: Alignment.topCenter,\n              end: Alignment.bottomCenter,\n              colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n            ),\n          ),\n          child: _availableCaretakers.isEmpty\n              ? const Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Icon(Icons.person_off, size: 64, color: Colors.grey),\n                      SizedBox(height: 16),\n                      Text(\n                        'No available caretakers at the moment',\n                        style: TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                    ],\n                  ),\n                )\n              : RefreshIndicator(\n                  onRefresh: _loadData,\n                  color: Colors.blueAccent,\n                  child: ListView.builder(\n                    itemCount: _availableCaretakers.length,\n                    itemBuilder: (context, index) {\n                      final caretaker = _availableCaretakers[index].data() as Map<String, dynamic>;\n                      final caretakerUid = _availableCaretakers[index].id;\n                      return Card(\n                        elevation: 3,\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        child: ListTile(\n                          leading: CircleAvatar(\n                            backgroundColor: Colors.grey[300],\n                            backgroundImage: NetworkImage(\n                              caretaker['profileImageUrl'] ?? '',\n                            ),\n                            onBackgroundImageError: (_, __) => const Icon(Icons.person, color: Colors.blueAccent),\n                          ),\n                          title: Text(caretaker['fullName'] ?? 'Unnamed'),\n                          subtitle: Text(\n                            'Experience: ${caretaker['experienceYears'] ?? 0} years',\n                          ),\n                          trailing: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              IconButton(\n                                icon: const Icon(Icons.phone, color: Colors.green),\n                                onPressed: () async {\n                                  final phone = caretaker['phoneNo'];\n                                  if (phone != null && phone.isNotEmpty) {\n                                    final url = Uri.parse('tel:$phone');\n                                    if (await canLaunchUrl(url)) {\n                                      await launchUrl(url);\n                                    } else if (mounted) {\n                                      ScaffoldMessenger.of(context).showSnackBar(\n                                        const SnackBar(content: Text('Could not launch phone app')),\n                                      );\n                                    }\n                                  }\n                                },\n                              ),\n                              ElevatedButton(\n                                style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                                child: const Text('Send Request', style: TextStyle(color: Colors.white)),\n                                onPressed: () => _sendRequest(caretakerUid),\n                              ),\n                            ],\n                          ),\n                        ),\n                      );\n                    },\n                  ),\n                ),\n        ),\n      );\n    }\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "family": {
        "family_add_screen.dart": {
          "_text": "import 'dart:io';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:logger/logger.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nfinal logger = Logger();\n\nclass AddScreen extends StatefulWidget {\n  const AddScreen({super.key});\n\n  @override\n  State<AddScreen> createState() => _AddScreenState();\n}\n\nclass _AddScreenState extends State<AddScreen> {\n  final _nameController = TextEditingController();\n  final _relationController = TextEditingController();\n  final _phoneController = TextEditingController();\n  File? _image;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _isSaving = false;\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Photo permission denied')),\n        );\n      }\n      return;\n    }\n    try {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _image = File(picked.path));\n      }\n    } catch (e) {\n      logger.e('Error picking image: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error picking image: $e')),\n        );\n      }\n    }\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_image == null) return '';\n    try {\n      final r = await cloudinary\n          .uploadFile(CloudinaryFile.fromFile(_image!.path))\n          .timeout(const Duration(seconds: 30));\n      return r.secureUrl;\n    } catch (e) {\n      logger.e('Image upload failed: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Image upload failed: $e')),\n        );\n      }\n      return '';\n    }\n  }\n\n  Future<void> _save() async {\n    if (_nameController.text.trim().isEmpty ||\n        _relationController.text.trim().isEmpty ||\n        _phoneController.text.trim().isEmpty) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('All fields are required')),\n        );\n      }\n      return;\n    }\n\n    if (_isSaving) return;\n    setState(() => _isSaving = true);\n\n    if (mounted) {\n      showDialog(\n        barrierDismissible: false,\n        context: context,\n        builder: (_) => const Center(child: CircularProgressIndicator(color: Colors.blueAccent)),\n      );\n    }\n\n    try {\n      final url = await _uploadImage();\n      if (!mounted) return;\n\n      final uid = _auth.currentUser?.uid;\n      if (uid == null) throw Exception('User not logged in');\n\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('family_members')\n          .add({\n        'name': _nameController.text.trim(),\n        'relation': _relationController.text.trim(),\n        'phone': _phoneController.text.trim(),\n        'imageUrl': url ?? '',\n        'createdAt': FieldValue.serverTimestamp(),\n      });\n\n      Navigator.pop(context); // Close loading dialog\n      Navigator.pop(context); // Return to family screen\n    } catch (e) {\n      logger.e('Error saving member: $e');\n      if (mounted) {\n        Navigator.pop(context); // Close loading dialog\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error saving: $e')),\n        );\n      }\n    } finally {\n      if (mounted) setState(() => _isSaving = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Add Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Member Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              _buildTextField(_nameController, 'Name', Icons.person),\n              _buildTextField(_relationController, 'Relation', Icons.family_restroom),\n              _buildTextField(_phoneController, 'Phone', Icons.phone, keyboardType: TextInputType.phone),\n              const SizedBox(height: 24),\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundColor: Colors.grey[300],\n                        backgroundImage: _image != null ? FileImage(_image!) : null,\n                        child: _image == null ? const Icon(Icons.person, size: 60, color: Colors.blueAccent) : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _save,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Add Member', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_edit_screen.dart": {
          "_text": "import 'dart:io';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:logger/logger.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nfinal logger = Logger();\n\nclass EditScreen extends StatefulWidget {\n  final String memberId;\n  final Map<String, dynamic> memberData;\n\n  const EditScreen({super.key, required this.memberId, required this.memberData});\n\n  @override\n  State<EditScreen> createState() => _EditScreenState();\n}\n\nclass _EditScreenState extends State<EditScreen> {\n  final _nameController = TextEditingController();\n  final _relationController = TextEditingController();\n  final _phoneController = TextEditingController();\n  File? _image;\n  String? _existingImageUrl;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _isSaving = false;\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize text controllers with existing member data\n    _nameController.text = widget.memberData['name'] ?? '';\n    _relationController.text = widget.memberData['relation'] ?? '';\n    _phoneController.text = widget.memberData['phone'] ?? '';\n    _existingImageUrl = widget.memberData['imageUrl'] ?? '';\n  }\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Photo permission denied')),\n        );\n      }\n      return;\n    }\n    try {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _image = File(picked.path));\n      }\n    } catch (e) {\n      logger.e('Error picking image: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error picking image: $e')),\n        );\n      }\n    }\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_image == null) return _existingImageUrl; // Return existing URL if no new image\n    try {\n      final r = await cloudinary\n          .uploadFile(CloudinaryFile.fromFile(_image!.path))\n          .timeout(const Duration(seconds: 30));\n      return r.secureUrl;\n    } catch (e) {\n      logger.e('Image upload failed: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Image upload failed: $e')),\n        );\n      }\n      return _existingImageUrl; // Return existing URL on failure\n    }\n  }\n\n  Future<void> _save() async {\n    if (_nameController.text.trim().isEmpty ||\n        _relationController.text.trim().isEmpty ||\n        _phoneController.text.trim().isEmpty) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('All fields are required')),\n        );\n      }\n      return;\n    }\n\n    if (_isSaving) return;\n    setState(() => _isSaving = true);\n\n    if (mounted) {\n      showDialog(\n        barrierDismissible: false,\n        context: context,\n        builder: (_) => const Center(child: CircularProgressIndicator(color: Colors.blueAccent)),\n      );\n    }\n\n    try {\n      final url = await _uploadImage();\n      if (!mounted) return;\n\n      final uid = _auth.currentUser?.uid;\n      if (uid == null) throw Exception('User not logged in');\n\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('family_members')\n          .doc(widget.memberId)\n          .update({\n        'name': _nameController.text.trim(),\n        'relation': _relationController.text.trim(),\n        'phone': _phoneController.text.trim(),\n        'imageUrl': url ?? '',\n        'updatedAt': FieldValue.serverTimestamp(),\n      });\n\n      Navigator.pop(context); // Close loading dialog\n      Navigator.pop(context); // Return to family screen\n    } catch (e) {\n      logger.e('Error updating member: $e');\n      if (mounted) {\n        Navigator.pop(context); // Close loading dialog\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error updating: $e')),\n        );\n      }\n    } finally {\n      if (mounted) setState(() => _isSaving = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Edit Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Edit Member Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              _buildTextField(_nameController, 'Name', Icons.person),\n              _buildTextField(_relationController, 'Relation', Icons.family_restroom),\n              _buildTextField(_phoneController, 'Phone', Icons.phone, keyboardType: TextInputType.phone),\n              const SizedBox(height: 24),\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundColor: Colors.grey[300],\n                        backgroundImage: _image != null\n                            ? FileImage(_image!)\n                            : _existingImageUrl != null && _existingImageUrl!.isNotEmpty\n                                ? NetworkImage(_existingImageUrl!)\n                                : null,\n                        child: _image == null && (_existingImageUrl == null || _existingImageUrl!.isEmpty)\n                            ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                            : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _save,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Update Member', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_scanner_screen.dart": {
          "_text": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:camera/camera.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:confetti/confetti.dart';\nimport 'package:logger/logger.dart';\nimport 'package:image/image.dart' as img;\n\nfinal logger = Logger();\n\nclass ScannerScreen extends StatefulWidget {\n  final List<Map<String, dynamic>> members;\n  const ScannerScreen({super.key, required this.members});\n\n  @override\n  State<ScannerScreen> createState() => _ScannerScreenState();\n}\n\nclass _ScannerScreenState extends State<ScannerScreen>\n    with SingleTickerProviderStateMixin {\n  CameraController? _controller;\n  Future<void>? _initializeControllerFuture;\n  XFile? _capturedImage;\n  bool _hasCameraError = false;\n  bool _isProcessing = false;\n  bool _isLoadingCamera = true;\n  bool _isCapturing = false;\n  late ConfettiController _confettiController;\n  bool _disposed = false;\n  bool _isFrontCamera = false;\n  List<CameraDescription> _cameras = [];\n\n  // Result info\n  Map<String, dynamic>? _resultData;\n  bool _noMatch = false;\n\n  // Animation controller for scanning overlay\n  late AnimationController _scanAnimationController;\n\n  @override\n  void initState() {\n    super.initState();\n    _confettiController =\n        ConfettiController(duration: const Duration(seconds: 3));\n    _scanAnimationController = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..repeat(reverse: true);\n    _initializeCamera();\n  }\n\n  Future<void> _initializeCamera() async {\n    if (_disposed) return;\n    setState(() {\n      _isLoadingCamera = true;\n      _resultData = null;\n      _noMatch = false;\n      _capturedImage = null;\n    });\n    try {\n      await _controller?.dispose();\n      _cameras = await availableCameras().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera initialization timed out');\n        },\n      );\n      if (_cameras.isEmpty) {\n        if (mounted && !_disposed) {\n          setState(() {\n            _hasCameraError = true;\n            _isLoadingCamera = false;\n          });\n        }\n        return;\n      }\n      final selectedCamera = _cameras.firstWhere(\n        (camera) => camera.lensDirection ==\n            (_isFrontCamera ? CameraLensDirection.front : CameraLensDirection.back),\n        orElse: () => _cameras.first,\n      );\n      _controller = CameraController(\n        selectedCamera,\n        ResolutionPreset.medium,\n        enableAudio: false,\n        imageFormatGroup: ImageFormatGroup.jpeg,\n      );\n      _initializeControllerFuture = _controller!.initialize().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera controller initialization timed out');\n        },\n      );\n      await _initializeControllerFuture;\n      if (mounted && !_disposed) {\n        setState(() => _isLoadingCamera = false);\n      }\n    } catch (e) {\n      logger.e('Error initializing camera: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _hasCameraError = true;\n          _isLoadingCamera = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _toggleCamera() async {\n    if (_cameras.length < 2) return;\n    setState(() {\n      _isFrontCamera = !_isFrontCamera;\n      _hasCameraError = false;\n      _isLoadingCamera = true;\n      _capturedImage = null;\n      _resultData = null;\n      _noMatch = false;\n    });\n    await _initializeCamera();\n  }\n\n  Future<void> _captureImage() async {\n    if (_controller == null ||\n        _initializeControllerFuture == null ||\n        _hasCameraError ||\n        _isLoadingCamera ||\n        _isCapturing ||\n        _isProcessing) {\n      return;\n    }\n    setState(() => _isCapturing = true);\n    try {\n      await _initializeControllerFuture;\n      await _controller!.pausePreview();\n      final image = await _controller!.takePicture();\n\n      // Handle front camera mirror\n      File imageFile = File(image.path);\n      if (_isFrontCamera) {\n        final bytes = await imageFile.readAsBytes();\n        final flippedBytes = await compute(_flipHorizontal, bytes);\n        await imageFile.writeAsBytes(flippedBytes);\n      }\n\n      if (_controller != null && _controller!.value.isInitialized) {\n        await _controller!.resumePreview();\n      }\n\n      if (mounted && !_disposed) {\n        setState(() {\n          _capturedImage = image;\n          _resultData = null;\n          _noMatch = false;\n          _isCapturing = false;\n        });\n      }\n    } catch (e) {\n      logger.e('Error capturing image: $e');\n      if (_controller != null && _controller!.value.isInitialized) {\n        try {\n          await _controller!.resumePreview();\n        } catch (_) {}\n      }\n      if (mounted && !_disposed) setState(() => _isCapturing = false);\n    }\n  }\n\n  static Uint8List _flipHorizontal(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n    final flipped = img.flipHorizontal(image);\n    return Uint8List.fromList(img.encodeJpg(flipped));\n  }\n\n  Future<String> _encodeImage(Uint8List bytes) async {\n    return await compute(_encodeBase64, bytes);\n  }\n\n  static String _encodeBase64(Uint8List bytes) {\n    return base64Encode(bytes);\n  }\n\n  Future<void> _sendToApi() async {\n    if (_capturedImage == null || _isProcessing) return;\n    if (mounted && !_disposed) setState(() => _isProcessing = true);\n\n    try {\n      final imageBytes = await _capturedImage!.readAsBytes();\n      final base64Image = await _encodeImage(imageBytes);\n      final response = await http.post(\n        Uri.parse('https://una-heliotropic-aspersively.ngrok-free.dev/recognize'),\n        body: {\n          'members': jsonEncode(widget.members\n              .map((m) => {\n                    'memberName': m['name'],\n                    'memberRelation': m['relation'],\n                    'memberImage': m['imageUrl'],\n                  })\n              .toList()),\n          'imageUrl': 'data:image/jpeg;base64,$base64Image',\n        },\n      ).timeout(const Duration(seconds: 30));\n\n      if (!mounted || _disposed) return;\n\n      if (response.statusCode == 200) {\n        final result = jsonDecode(response.body);\n        if (result['matchFound']) {\n          _confettiController.play();\n          setState(() {\n            _resultData = result;\n            _noMatch = false;\n          });\n        } else {\n          setState(() {\n            _resultData = null;\n            _noMatch = true;\n          });\n        }\n      } else {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } catch (e) {\n      logger.e('Error sending image to API: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } finally {\n      if (mounted && !_disposed) setState(() => _isProcessing = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Scan Family Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        actions: [\n          IconButton(\n            icon: Icon(_isFrontCamera ? Icons.camera_rear : Icons.camera_front),\n            onPressed: _isLoadingCamera || _isCapturing || _isProcessing\n                ? null\n                : _toggleCamera,\n          ),\n        ],\n      ),\n      body: Stack(\n        children: [\n          _isLoadingCamera\n              ? const Center(child: CircularProgressIndicator())\n              : _hasCameraError\n                  ? _buildCameraError()\n                  : _capturedImage == null\n                      ? _buildCameraPreview()\n                      : _buildCapturedImageWithAnimation(),\n          Align(\n            alignment: Alignment.topCenter,\n            child: ConfettiWidget(\n              confettiController: _confettiController,\n              blastDirectionality: BlastDirectionality.explosive,\n              shouldLoop: false,\n              numberOfParticles: 50,\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: _capturedImage == null &&\n              !_hasCameraError &&\n              _controller != null &&\n              !_isLoadingCamera\n          ? FloatingActionButton(\n              onPressed: _isCapturing || _isProcessing ? null : _captureImage,\n              backgroundColor: Colors.blueAccent,\n              child: _isCapturing\n                  ? const CircularProgressIndicator(color: Colors.white)\n                  : const Icon(Icons.camera_alt, color: Colors.white),\n            )\n          : null,\n    );\n  }\n\n  Widget _buildCapturedImageWithAnimation() {\n    return Stack(\n      children: [\n        Image.file(\n          File(_capturedImage!.path),\n          width: double.infinity,\n          height: double.infinity,\n          fit: BoxFit.cover,\n        ),\n        if (_isProcessing)\n          Positioned.fill(\n            child: Container(\n              color: Colors.black26,\n              child: Center(\n                child: Container(\n                  width: 250,\n                  height: 250,\n                  decoration: BoxDecoration(\n                    border: Border.all(color: Colors.blueAccent, width: 2),\n                  ),\n                  child: AnimatedBuilder(\n                    animation: _scanAnimationController,\n                    builder: (context, child) {\n                      return Align(\n                        alignment: Alignment(\n                            0, -1 + 2 * _scanAnimationController.value),\n                        child: Container(\n                          height: 4,\n                          width: double.infinity,\n                          color: Colors.blueAccent,\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              ),\n            ),\n          ),\n        Positioned(\n          bottom: 40, // Increased bottom padding\n          left: 20,\n          right: 20,\n          child: _buildBottomControls(),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildBottomControls() {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        if (!_isProcessing)\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _sendToApi,\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.green,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('OK', style: TextStyle(fontSize: 16)),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  setState(() {\n                    _capturedImage = null;\n                    _resultData = null;\n                    _noMatch = false;\n                  });\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.red,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('Retake', style: TextStyle(fontSize: 16)),\n              ),\n            ],\n          ),\n        const SizedBox(height: 16),\n        if (_resultData != null || _noMatch) _buildResultOverlay(),\n      ],\n    );\n  }\n\n  Widget _buildResultOverlay() {\n    return Center(\n      child: Container(\n        width: MediaQuery.of(context).size.width * 0.8,\n        padding: const EdgeInsets.all(20),\n        decoration: BoxDecoration(\n          color: Colors.white.withOpacity(0.9),\n          borderRadius: BorderRadius.circular(16),\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(0.1),\n              blurRadius: 8,\n              spreadRadius: 2,\n            ),\n          ],\n        ),\n        child: _resultData != null\n            ? Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'Match Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.blueAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                  const SizedBox(height: 16),\n                  if (_resultData!['memberImageUrl'] != null &&\n                      _resultData!['memberImageUrl'].isNotEmpty)\n                    ClipRRect(\n                      borderRadius: BorderRadius.circular(8),\n                      child: Image.network(\n                        _resultData!['memberImageUrl'],\n                        height: 100,\n                        width: 100,\n                        fit: BoxFit.cover,\n                      ),\n                    ),\n                  const SizedBox(height: 12),\n                  Text(\n                    'Name: ${_resultData!['memberName']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Relation: ${_resultData!['memberRelation']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Confidence: ${(_resultData!['confidence'] * 100).toStringAsFixed(2)}%',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                ],\n              )\n            : Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'No Matches Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.redAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                ],\n              ),\n      ).animate().fadeIn(duration: 400.ms),\n    );\n  }\n\n  Widget _buildCameraPreview() {\n    return FutureBuilder<void>(\n      future: _initializeControllerFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.done) {\n          if (snapshot.hasError || _controller == null) return _buildCameraError();\n          return CameraPreview(_controller!).animate().fadeIn(duration: 500.ms);\n        }\n        return const Center(child: CircularProgressIndicator());\n      },\n    );\n  }\n\n  Widget _buildCameraError() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          const Icon(Icons.camera_alt, size: 64, color: Colors.red),\n          const SizedBox(height: 16),\n          const Text(\n            'Camera not available',\n            style: TextStyle(fontSize: 18, color: Colors.red),\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: _initializeCamera,\n            child: const Text('Retry'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _disposed = true;\n    _controller?.dispose();\n    _confettiController.dispose();\n    _scanAnimationController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_screen.dart": {
          "_text": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/logger.dart';\nimport 'package:url_launcher/url_launcher.dart';\nimport 'family_add_screen.dart';\nimport 'family_edit_screen.dart';\nimport 'family_scanner_screen.dart';\n\nfinal logger = Logger();\n\nclass FamilyScreen extends StatefulWidget {\n  const FamilyScreen({super.key});\n\n  @override\n  State<FamilyScreen> createState() => _FamilyScreenState();\n}\n\nclass _FamilyScreenState extends State<FamilyScreen> {\n  final _searchController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  String _search = '';\n  bool _isAdding = false;\n  bool _isScanning = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _searchController.addListener(\n      () => setState(() => _search = _searchController.text.toLowerCase()),\n    );\n  }\n\n  Stream<QuerySnapshot> _getFamilyMembersStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore\n        .collection('user')\n        .doc(uid)\n        .collection('family_members')\n        .orderBy('name')\n        .snapshots();\n  }\n\n  Future<void> _callNumber(String number) async {\n    final context = this.context; // Capture context\n    final uri = Uri(scheme: 'tel', path: number);\n    if (await canLaunchUrl(uri)) {\n      await launchUrl(uri);\n    } else if (context.mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Could not launch dialer for $number')),\n      );\n    }\n  }\n\n  Widget _buildMemberImage(String? imageUrl) {\n    if (imageUrl == null || imageUrl.isEmpty) {\n      return const Icon(Icons.person, color: Colors.blueAccent);\n    }\n\n    return ClipOval(\n      child: Image.network(\n        imageUrl,\n        width: 40,\n        height: 40,\n        fit: BoxFit.cover,\n        errorBuilder: (context, error, stackTrace) {\n          return const Icon(Icons.person, color: Colors.blueAccent);\n        },\n        loadingBuilder: (context, child, loadingProgress) {\n          if (loadingProgress == null) return child;\n          return const SizedBox(\n            width: 40,\n            height: 40,\n            child: Center(\n              child: CircularProgressIndicator(\n                strokeWidth: 2,\n                color: Colors.blueAccent,\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Family'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: Column(\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: TextField(\n                controller: _searchController,\n                decoration: InputDecoration(\n                  hintText: 'Search family members...',\n                  filled: true,\n                  fillColor: Colors.white,\n                  border: OutlineInputBorder(\n                    borderRadius: BorderRadius.circular(12),\n                    borderSide: BorderSide.none,\n                  ),\n                  prefixIcon: const Icon(Icons.search, color: Colors.blueAccent),\n                ),\n              ),\n            ),\n            Expanded(\n              child: StreamBuilder<QuerySnapshot>(\n                stream: _getFamilyMembersStream(),\n                builder: (context, snapshot) {\n                  if (snapshot.connectionState == ConnectionState.waiting) {\n                    return const Center(\n                        child: CircularProgressIndicator(color: Colors.blueAccent));\n                  }\n\n                  if (snapshot.hasError) {\n                    logger.e('Error loading family members: ${snapshot.error}');\n                    return Center(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          const Text(\n                            'Error loading family members',\n                            style: TextStyle(fontSize: 18, color: Colors.red),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton(\n                            onPressed: () => setState(() {}),\n                            style:\n                                ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                            child: const Text('Retry', style: TextStyle(color: Colors.white)),\n                          ),\n                        ],\n                      ),\n                    );\n                  }\n\n                  final docs = snapshot.data?.docs ?? [];\n                  final filteredDocs = docs.where((doc) {\n                    final data = doc.data() as Map<String, dynamic>;\n                    final name = (data['name'] ?? '').toString().toLowerCase();\n                    final relation = (data['relation'] ?? '').toString().toLowerCase();\n                    return name.contains(_search) || relation.contains(_search);\n                  }).toList();\n\n                  return Column(\n                    children: [\n                      Expanded(\n                        child: filteredDocs.isEmpty\n                            ? const Center(\n                                child: Column(\n                                  mainAxisAlignment: MainAxisAlignment.center,\n                                  children: [\n                                    Icon(\n                                      Icons.family_restroom,\n                                      size: 64,\n                                      color: Colors.grey,\n                                    ),\n                                    SizedBox(height: 16),\n                                    Text(\n                                      'No family members yet',\n                                      style: TextStyle(fontSize: 18, color: Colors.grey),\n                                    ),\n                                    SizedBox(height: 8),\n                                    Text(\n                                      'Add your first family member',\n                                      style: TextStyle(fontSize: 14, color: Colors.grey),\n                                    ),\n                                  ],\n                                ),\n                              )\n                            : RefreshIndicator(\n                                onRefresh: () async => setState(() {}),\n                                color: Colors.blueAccent,\n                                child: ListView.builder(\n                                  itemCount: filteredDocs.length,\n                                  itemBuilder: (context, index) {\n                                    final doc = filteredDocs[index];\n                                    final member = doc.data() as Map<String, dynamic>;\n                                    return Card(\n                                      elevation: 3,\n                                      shape: RoundedRectangleBorder(\n                                          borderRadius: BorderRadius.circular(12)),\n                                      child: ListTile(\n                                        leading: CircleAvatar(\n                                          backgroundColor: Colors.grey[300],\n                                          child: _buildMemberImage(member['imageUrl']),\n                                        ),\n                                        title: Text(member['name'] ?? 'Unnamed'),\n                                        subtitle: Column(\n                                          crossAxisAlignment: CrossAxisAlignment.start,\n                                          children: [\n                                            Text('Relation: ${member['relation'] ?? ''}'),\n                                            Text('Phone: ${member['phone'] ?? ''}'),\n                                          ],\n                                        ),\n                                        trailing: Row(\n                                          mainAxisSize: MainAxisSize.min,\n                                          children: [\n                                            IconButton(\n                                              icon: const Icon(Icons.edit, color: Colors.blue),\n                                              onPressed: () async {\n                                                final editContext = context; // Capture context\n                                                try {\n                                                  await Navigator.push(\n                                                    editContext,\n                                                    MaterialPageRoute(\n                                                      builder: (context) => EditScreen(\n                                                        memberId: doc.id, // Pass the document ID\n                                                        memberData: doc.data() as Map<String, dynamic>, // Pass the member data\n                                                      ),\n                                                    ),\n                                                  );\n                                                } catch (e) {\n                                                  logger.e('Error navigating to edit screen: $e');\n                                                  if (editContext.mounted) {\n                                                    ScaffoldMessenger.of(editContext).showSnackBar(\n                                                      SnackBar(content: Text('Error opening edit screen: $e')),\n                                                    );\n                                                  }\n                                                }\n                                              },\n                                            ),\n                                            IconButton(\n                                              icon: const Icon(Icons.delete, color: Colors.red),\n                                              onPressed: () async {\n                                                final deleteContext = context; // Capture context\n                                                final confirm = await showDialog<bool>(\n                                                  context: deleteContext,\n                                                  builder: (context) => AlertDialog(\n                                                    title: const Text('Delete Family Member'),\n                                                    content: const Text('Are you sure?'),\n                                                    actions: [\n                                                      TextButton(\n                                                        onPressed: () =>\n                                                            Navigator.pop(context, false),\n                                                        child: const Text('Cancel'),\n                                                      ),\n                                                      ElevatedButton(\n                                                        style: ElevatedButton.styleFrom(\n                                                            backgroundColor: Colors.red),\n                                                        onPressed: () => Navigator.pop(context, true),\n                                                        child: const Text('Delete',\n                                                            style: TextStyle(color: Colors.white)),\n                                                      ),\n                                                    ],\n                                                  ),\n                                                );\n                                                if (confirm == true && deleteContext.mounted) {\n                                                  try {\n                                                    await doc.reference.delete();\n                                                  } catch (e) {\n                                                    logger.e('Error deleting member: $e');\n                                                    if (deleteContext.mounted) {\n                                                      ScaffoldMessenger.of(deleteContext)\n                                                          .showSnackBar(\n                                                        SnackBar(content: Text('Error deleting: $e')),\n                                                      );\n                                                    }\n                                                  }\n                                                }\n                                              },\n                                            ),\n                                            IconButton(\n                                              icon: const Icon(Icons.phone, color: Colors.green),\n                                              onPressed: () {\n                                                final phone = member['phone'];\n                                                if (phone != null && phone.isNotEmpty) {\n                                                  _callNumber(phone);\n                                                }\n                                              },\n                                            ),\n                                          ],\n                                        ),\n                                      ),\n                                    );\n                                  },\n                                ),\n                              ),\n                      ),\n                      // Move buttons inside StreamBuilder to access snapshot\n                      Padding(\n                        padding: const EdgeInsets.all(16.0),\n                        child: Row(\n                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                          children: [\n                            _isAdding\n                                ? const CircularProgressIndicator(color: Colors.orange)\n                                : FloatingActionButton.extended(\n                                    backgroundColor: Colors.orange,\n                                    icon: const Icon(Icons.add, color: Colors.white),\n                                    label: const Text('Add Member',\n                                        style: TextStyle(color: Colors.white)),\n                                    onPressed: () async {\n                                      final addContext = context; // Capture context\n                                      setState(() => _isAdding = true);\n                                      try {\n                                        await Navigator.push(\n                                          addContext,\n                                          MaterialPageRoute(\n                                            builder: (context) => const AddScreen(),\n                                          ),\n                                        );\n                                      } catch (e) {\n                                        logger.e('Error navigating to add screen: $e');\n                                        if (addContext.mounted) {\n                                          ScaffoldMessenger.of(addContext).showSnackBar(\n                                            SnackBar(\n                                                content: Text('Error opening add screen: $e')),\n                                          );\n                                        }\n                                      } finally {\n                                        if (mounted) setState(() => _isAdding = false);\n                                      }\n                                    },\n                                  ),\n                            _isScanning\n                                ? const CircularProgressIndicator(color: Colors.orange)\n                                : FloatingActionButton.extended(\n                                    backgroundColor: Colors.orange,\n                                    icon: const Icon(Icons.camera_alt, color: Colors.white),\n                                    label:\n                                        const Text('Scan', style: TextStyle(color: Colors.white)),\n                                    onPressed: () async {\n                                      final scanContext = context; // Capture context\n                                      setState(() => _isScanning = true);\n                                      try {\n                                        final result = await Navigator.push(\n                                          scanContext,\n                                          MaterialPageRoute(\n                                            builder: (context) => ScannerScreen(\n                                              members: snapshot.data?.docs.map((doc) {\n                                                    final data = doc.data() as Map<String, dynamic>;\n                                                    return data\n                                                        .map((key, value) => MapEntry(key, value?.toString() ?? ''));\n                                                  }).toList() ?? [],\n                                            ),\n                                          ),\n                                        );\n                                        if (result != null && result['matchFound'] && scanContext.mounted) {\n                                          ScaffoldMessenger.of(scanContext).showSnackBar(\n                                            SnackBar(\n                                              content: Text('Match found: ${result['memberName']}'),\n                                            ),\n                                          );\n                                        }\n                                      } catch (e) {\n                                        logger.e('Error navigating to ScannerScreen: $e');\n                                        if (scanContext.mounted) {\n                                          ScaffoldMessenger.of(scanContext).showSnackBar(\n                                            SnackBar(content: Text('Error opening scanner: $e')),\n                                          );\n                                        }\n                                      } finally {\n                                        if (mounted) setState(() => _isScanning = false);\n                                      }\n                                    },\n                                  ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  );\n                },\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "home": {
        "add_task_page.dart": {
          "_text": "// lib/user/home/add_task_page.dart\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass AddTaskPage extends StatefulWidget {\n  final bool isTemplate;\n  const AddTaskPage({super.key, this.isTemplate = false});\n\n  @override\n  State<AddTaskPage> createState() => _AddTaskPageState();\n}\n\nclass _AddTaskPageState extends State<AddTaskPage> {\n  final TextEditingController _taskController = TextEditingController();\n  final TextEditingController _descController = TextEditingController();\n  String _recurring = 'None';\n  DateTime? _dueDate;\n  DateTime? _reminderTime;\n  TimeOfDay? _dailyDueTime;\n  TimeOfDay? _dailyReminderTime;\n\n  Future<void> _pickDueDate() async {\n    final picked = await showDatePicker(\n      context: context,\n      initialDate: DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (picked != null && mounted) {\n      final time = await showTimePicker(\n        context: context,\n        initialTime: TimeOfDay.now(),\n      );\n      if (time != null && mounted) {\n        setState(() {\n          _dueDate = DateTime(\n            picked.year,\n            picked.month,\n            picked.day,\n            time.hour,\n            time.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickReminderTime() async {\n    final pickedDate = await showDatePicker(\n      context: context,\n      initialDate: DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (pickedDate != null && mounted) {\n      final pickedTime = await showTimePicker(\n        context: context,\n        initialTime: TimeOfDay.now(),\n      );\n      if (pickedTime != null && mounted) {\n        setState(() {\n          _reminderTime = DateTime(\n            pickedDate.year,\n            pickedDate.month,\n            pickedDate.day,\n            pickedTime.hour,\n            pickedTime.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickDailyDueTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyDueTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyDueTime = picked);\n  }\n\n  Future<void> _pickDailyReminderTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyReminderTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyReminderTime = picked);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    if (widget.isTemplate) {\n      _recurring = 'Daily';\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isDaily = _recurring == 'Daily';\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(isDaily || widget.isTemplate ? 'Add Daily Template' : 'Add Task'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Task Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: _taskController,\n                decoration: InputDecoration(\n                  labelText: 'Task Name',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.task),\n                ),\n              ),\n              const SizedBox(height: 16),\n              TextField(\n                controller: _descController,\n                decoration: InputDecoration(\n                  labelText: 'Description (optional)',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.description),\n                ),\n                maxLines: 3,\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Recurrence',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),\n              ),\n              const SizedBox(height: 8),\n              DropdownButtonFormField<String>(\n                value: _recurring,\n                decoration: InputDecoration(\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                ),\n                items: ['None', 'Daily'].map((e) => DropdownMenuItem(value: e, child: Text(e))).toList(),\n                onChanged: (val) => setState(() => _recurring = val!),\n              ),\n              const SizedBox(height: 24),\n              if (!isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dueDate == null ? 'Set Due Date & Time' : DateFormat('MMM dd, yyyy hh:mm a').format(_dueDate!)),\n                    trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                    onTap: _pickDueDate,\n                  ),\n                ),\n              if (!isDaily) const SizedBox(height: 8),\n              if (!isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_reminderTime == null ? 'Set Reminder (optional)' : DateFormat('MMM dd, yyyy hh:mm a').format(_reminderTime!)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickReminderTime,\n                  ),\n                ),\n              if (isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyDueTime == null ? 'Set Daily Due Time' : _dailyDueTime!.format(context)),\n                    trailing: const Icon(Icons.access_time, color: Colors.blueAccent),\n                    onTap: _pickDailyDueTime,\n                  ),\n                ),\n              if (isDaily) const SizedBox(height: 8),\n              if (isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyReminderTime == null ? 'Set Daily Reminder (optional)' : _dailyReminderTime!.format(context)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickDailyReminderTime,\n                  ),\n                ),\n              const SizedBox(height: 32),\n              ElevatedButton(\n                onPressed: () {\n                  if (_taskController.text.trim().isEmpty) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Task name cannot be empty')),\n                    );\n                    return;\n                  }\n                  if (isDaily && _dailyDueTime == null) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Daily due time required')),\n                    );\n                    return;\n                  }\n                  final map = <String, dynamic>{\n                    'task': _taskController.text.trim(),\n                    'description': _descController.text.trim(),\n                    'recurring': _recurring,\n                  };\n                  if (isDaily) {\n                    map['dailyDueTime'] = _dailyDueTime != null \n                      ? {'hour': _dailyDueTime!.hour, 'min': _dailyDueTime!.minute} \n                      : null;\n                    map['dailyReminderTime'] = _dailyReminderTime != null \n                      ? {'hour': _dailyReminderTime!.hour, 'min': _dailyReminderTime!.minute} \n                      : null;\n                  } else {\n                    map['dueDate'] = _dueDate;\n                    map['reminderTime'] = _reminderTime;\n                  }\n                  Navigator.pop(context, map);\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.blueAccent,\n                  padding: const EdgeInsets.symmetric(vertical: 16),\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  minimumSize: const Size(double.infinity, 50),\n                ),\n                child: const Text('Save', style: TextStyle(fontSize: 18, color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "edit_task_page.dart": {
          "_text": "// lib/user/home/edit_task_page.dart\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass EditTaskPage extends StatefulWidget {\n  final String taskName;\n  final String description;\n  final DateTime? dueDate;\n  final DateTime? reminderTime;\n  final bool isTemplate;\n  final Map<String, dynamic>? dailyDueTime;\n  final Map<String, dynamic>? dailyReminderTime;\n\n  const EditTaskPage({\n    super.key,\n    required this.taskName,\n    required this.description,\n    this.dueDate,\n    this.reminderTime,\n    this.isTemplate = false,\n    this.dailyDueTime,\n    this.dailyReminderTime,\n  });\n\n  @override\n  State<EditTaskPage> createState() => _EditTaskPageState();\n}\n\nclass _EditTaskPageState extends State<EditTaskPage> {\n  late TextEditingController _taskController;\n  late TextEditingController _descController;\n  DateTime? _dueDate;\n  DateTime? _reminderTime;\n  TimeOfDay? _dailyDueTime;\n  TimeOfDay? _dailyReminderTime;\n\n  @override\n  void initState() {\n    super.initState();\n    _taskController = TextEditingController(text: widget.taskName);\n    _descController = TextEditingController(text: widget.description);\n    _dueDate = widget.dueDate;\n    _reminderTime = widget.reminderTime;\n    if (widget.dailyDueTime != null) {\n      _dailyDueTime = TimeOfDay(hour: widget.dailyDueTime!['hour'], minute: widget.dailyDueTime!['min']);\n    }\n    if (widget.dailyReminderTime != null) {\n      _dailyReminderTime = TimeOfDay(hour: widget.dailyReminderTime!['hour'], minute: widget.dailyReminderTime!['min']);\n    }\n  }\n\n  Future<void> _pickDueDate() async {\n    final picked = await showDatePicker(\n      context: context,\n      initialDate: _dueDate ?? DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (picked != null && mounted) {\n      final time = await showTimePicker(\n        context: context,\n        initialTime: _dueDate != null ? TimeOfDay.fromDateTime(_dueDate!) : TimeOfDay.now(),\n      );\n      if (time != null && mounted) {\n        setState(() {\n          _dueDate = DateTime(\n            picked.year,\n            picked.month,\n            picked.day,\n            time.hour,\n            time.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickReminderTime() async {\n    final pickedDate = await showDatePicker(\n      context: context,\n      initialDate: _reminderTime ?? DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (pickedDate != null && mounted) {\n      final pickedTime = await showTimePicker(\n        context: context,\n        initialTime: _reminderTime != null ? TimeOfDay.fromDateTime(_reminderTime!) : TimeOfDay.now(),\n      );\n      if (pickedTime != null && mounted) {\n        setState(() {\n          _reminderTime = DateTime(\n            pickedDate.year,\n            pickedDate.month,\n            pickedDate.day,\n            pickedTime.hour,\n            pickedTime.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickDailyDueTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyDueTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyDueTime = picked);\n  }\n\n  Future<void> _pickDailyReminderTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyReminderTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyReminderTime = picked);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isTemplate = widget.isTemplate;\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(isTemplate ? 'Edit Template' : 'Edit Task'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Edit Task Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: _taskController,\n                decoration: InputDecoration(\n                  labelText: 'Task Name',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.task),\n                ),\n              ),\n              const SizedBox(height: 16),\n              TextField(\n                controller: _descController,\n                decoration: InputDecoration(\n                  labelText: 'Description (optional)',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.description),\n                ),\n                maxLines: 3,\n              ),\n              const SizedBox(height: 24),\n              if (!isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dueDate == null ? 'Set Due Date & Time' : DateFormat('MMM dd, yyyy hh:mm a').format(_dueDate!)),\n                    trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                    onTap: _pickDueDate,\n                  ),\n                ),\n              if (!isTemplate) const SizedBox(height: 8),\n              if (!isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_reminderTime == null ? 'Set Reminder (optional)' : DateFormat('MMM dd, yyyy hh:mm a').format(_reminderTime!)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickReminderTime,\n                  ),\n                ),\n              if (isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyDueTime == null ? 'Set Daily Due Time' : _dailyDueTime!.format(context)),\n                    trailing: const Icon(Icons.access_time, color: Colors.blueAccent),\n                    onTap: _pickDailyDueTime,\n                  ),\n                ),\n              if (isTemplate) const SizedBox(height: 8),\n              if (isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyReminderTime == null ? 'Set Daily Reminder (optional)' : _dailyReminderTime!.format(context)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickDailyReminderTime,\n                  ),\n                ),\n              const SizedBox(height: 32),\n              ElevatedButton(\n                onPressed: () {\n                  if (_taskController.text.trim().isEmpty) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Task name cannot be empty')),\n                    );\n                    return;\n                  }\n                  if (isTemplate && _dailyDueTime == null) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Daily due time required')),\n                    );\n                    return;\n                  }\n                  final map = <String, dynamic>{\n                    'task': _taskController.text.trim(),\n                    'description': _descController.text.trim(),\n                  };\n                  if (isTemplate) {\n                    map['dailyDueTime'] = _dailyDueTime != null \n                      ? {'hour': _dailyDueTime!.hour, 'min': _dailyDueTime!.minute} \n                      : null;\n                    map['dailyReminderTime'] = _dailyReminderTime != null \n                      ? {'hour': _dailyReminderTime!.hour, 'min': _dailyReminderTime!.minute} \n                      : null;\n                  } else {\n                    map['dueDate'] = _dueDate;\n                    map['reminderTime'] = _reminderTime;\n                  }\n                  Navigator.pop(context, map);\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.blueAccent,\n                  padding: const EdgeInsets.symmetric(vertical: 16),\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  minimumSize: const Size(double.infinity, 50),\n                ),\n                child: const Text('Save Changes', style: TextStyle(fontSize: 18, color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "home_screen.dart": {
          "_text": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:logger/logger.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport '../notifications/notifications_screen.dart';\nimport '../../utils/notification_helper.dart';\nimport 'add_task_page.dart';\nimport 'edit_task_page.dart';\n\nfinal logger = Logger();\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({super.key});\n\n  @override\n  State<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  String _selectedTab = 'Today';\n\n  @override\n  void initState() {\n    super.initState();\n    _checkBanned();\n    _generateDailyTasks();\n  }\n\n  Future<void> _checkBanned() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    try {\n      final doc = await _firestore.collection('user').doc(uid).get();\n      if (doc.data()?['isBanned'] == true) {\n        await _auth.signOut();\n        if (mounted) {\n          Navigator.pushReplacementNamed(context, '/welcome');\n        }\n      }\n    } catch (e) {\n      logger.e('Error checking banned status: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error checking user status: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _generateDailyTasks() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n\n    final prefs = await SharedPreferences.getInstance();\n    final todayStr = DateFormat('yyyy-MM-dd').format(DateTime.now());\n    final lastGenerate = prefs.getString('last_generate_date');\n    if (lastGenerate == todayStr) return;\n\n    try {\n      final recurringSnap = await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('recurring_tasks')\n          .get();\n      for (var rec in recurringSnap.docs) {\n        final data = rec.data();\n        final dailyDue = data['dailyDueTime'];\n        if (dailyDue == null) continue;\n\n        final today = DateTime.now();\n        final dueDate = DateTime(\n            today.year, today.month, today.day, dailyDue['hour'], dailyDue['min']);\n        final dueTs = Timestamp.fromDate(dueDate);\n\n        final reminder = data['dailyReminderTime'];\n        Timestamp? reminderTs;\n        if (reminder != null) {\n          final remDate = DateTime(today.year, today.month, today.day,\n              reminder['hour'], reminder['min']);\n          reminderTs = Timestamp.fromDate(remDate);\n        }\n\n        final existing = await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection('to_dos')\n            .where('recurringId', isEqualTo: rec.id)\n            .where('dueDate', isEqualTo: dueTs)\n            .get();\n\n        if (existing.docs.isEmpty) {\n          await _firestore.collection('user').doc(uid).collection('to_dos').add({\n            'task': data['task'],\n            'description': data['description'],\n            'completed': false,\n            'createdAt': Timestamp.now(),\n            'dueDate': dueTs,\n            'reminderTime': reminderTs,\n            'recurringId': rec.id,\n            'createdBy': 'system',\n          });\n\n          if (reminderTs != null && reminderTs.toDate().isAfter(DateTime.now())) {\n            final userPlayerIds = await _getUserPlayerIds();\n            final caretakerPlayerIds = await _getCaretakerPlayerIds();\n            final all = [...userPlayerIds, ...caretakerPlayerIds];\n            await scheduleNotification(\n                all, 'Daily Task Reminder: ${data['task']}', reminderTs.toDate());\n          }\n        }\n      }\n      await prefs.setString('last_generate_date', todayStr);\n    } catch (e) {\n      logger.e('Error generating daily tasks: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error generating tasks: $e')),\n        );\n      }\n    }\n  }\n\n  Stream<List<QueryDocumentSnapshot<Map<String, dynamic>>>> _getTasksStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.value([]);\n\n    if (_selectedTab == 'Recurring') {\n      return _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('recurring_tasks')\n          .orderBy('createdAt', descending: true)\n          .limit(50)\n          .snapshots()\n          .map((snap) => snap.docs);\n    }\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n    final todayStart = Timestamp.fromDate(\n        DateTime.now().subtract(const Duration(days: 1)).add(const Duration(hours: 24)));\n    final todayEnd = Timestamp.fromDate(DateTime.now().add(const Duration(days: 1)));\n\n    Stream<QuerySnapshot<Map<String, dynamic>>> baseStream;\n\n    if (_selectedTab == 'Today') {\n      baseStream = coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n          .where('dueDate', isLessThan: todayEnd)\n          .orderBy('dueDate', descending: false)\n          .limit(50)\n          .snapshots();\n    } else if (_selectedTab == 'Upcoming') {\n      baseStream = coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayEnd)\n          .orderBy('dueDate', descending: false)\n          .limit(50)\n          .snapshots();\n    } else if (_selectedTab == 'Completed') {\n      baseStream = coll\n          .where('completed', isEqualTo: true)\n          .orderBy('dueDate', descending: true)\n          .limit(50)\n          .snapshots();\n    } else {\n      baseStream = coll.orderBy('dueDate', descending: true).limit(50).snapshots();\n    }\n\n    return baseStream.map((snap) => snap.docs);\n  }\n\n  Future<int> _getRemainingToday() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return 0;\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n    final todayStart = Timestamp.fromDate(\n        DateTime.now().subtract(const Duration(days: 1)).add(const Duration(hours: 24)));\n    final todayEnd = Timestamp.fromDate(DateTime.now().add(const Duration(days: 1)));\n\n    try {\n      // Workaround: Simplified query to avoid composite index requirement\n      final snap = await coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n          .where('dueDate', isLessThan: todayEnd)\n          .get();\n      // Filter completed tasks in code\n      final incompleteTasks = snap.docs\n          .where((doc) => doc.data()['completed'] == false)\n          .length;\n      return incompleteTasks;\n    } catch (e) {\n      logger.e('Error getting remaining today: $e');\n      if (e.toString().contains('requires an index') && mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: const Text(\n              'Database setup in progress. Please try again in a few minutes or contact support.',\n            ),\n            duration: const Duration(seconds: 5),\n            action: SnackBarAction(\n              label: 'Retry',\n              onPressed: () {\n                if (mounted) setState(() {});\n              },\n            ),\n          ),\n        );\n      } else if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error fetching tasks: $e')),\n        );\n      }\n      return 0;\n    }\n  }\n\n  Future<void> _deleteTask(String id, bool isTemplate) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    final confirm = await showDialog<bool>(\n      context: context,\n      builder: (_) => AlertDialog(\n        title: const Text('Delete Task'),\n        content: const Text('Are you sure you want to delete this task?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context, false),\n            child: const Text('Cancel'),\n          ),\n          ElevatedButton(\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n            onPressed: () => Navigator.pop(context, true),\n            child: const Text('Delete'),\n          ),\n        ],\n      ),\n    );\n    if (confirm == true && mounted) {\n      try {\n        final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n        await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection(coll)\n            .doc(id)\n            .delete();\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context)\n              .showSnackBar(SnackBar(content: Text('Error deleting: $e')));\n        }\n      }\n    }\n  }\n\n  Future<void> _toggleTaskStatus(String id, bool current) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    try {\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('to_dos')\n          .doc(id)\n          .update({'completed': !current});\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context)\n            .showSnackBar(SnackBar(content: Text('Error updating task: $e')));\n      }\n    }\n  }\n\n  Future<List<String>> _getCaretakerPlayerIds() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return [];\n\n    final userDoc = await _firestore.collection('user').doc(uid).get();\n    final connectionId = userDoc.data()?['currentConnectionId'];\n    if (connectionId == null) return [];\n\n    final connectionDoc =\n        await _firestore.collection('connections').doc(connectionId).get();\n    final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n    if (caretakerUid == null) return [];\n\n    final caretakerDoc =\n        await _firestore.collection('caretaker').doc(caretakerUid).get();\n    return List<String>.from(caretakerDoc.data()?['playerIds'] ?? []);\n  }\n\n  Future<List<String>> _getUserPlayerIds() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return [];\n    final userDoc = await _firestore.collection('user').doc(uid).get();\n    return List<String>.from(userDoc.data()?['playerIds'] ?? []);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: [\n          Container(\n            decoration: const BoxDecoration(\n              gradient: LinearGradient(\n                colors: [Colors.blueAccent, Colors.blue],\n                begin: Alignment.topLeft,\n                end: Alignment.bottomRight,\n              ),\n              borderRadius: BorderRadius.vertical(bottom: Radius.circular(20)),\n            ),\n            padding: EdgeInsets.only(\n              top: MediaQuery.of(context).padding.top + 16,\n              bottom: 16,\n              left: 16,\n              right: 16,\n            ),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                const Text(\n                  'Dementia Tasks',\n                  style: TextStyle(\n                    fontSize: 24,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.white,\n                  ),\n                ),\n                IconButton(\n                  icon: const Icon(Icons.notifications, color: Colors.white),\n                  onPressed: () {\n                    if (mounted) {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (_) => const NotificationsScreen(),\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          FutureBuilder<int>(\n            future: _getRemainingToday(),\n            builder: (context, snap) {\n              return Card(\n                margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                elevation: 4,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n                child: Container(\n                  decoration: BoxDecoration(\n                    gradient: const LinearGradient(\n                      colors: [Colors.greenAccent, Colors.green],\n                      begin: Alignment.topLeft,\n                      end: Alignment.bottomRight,\n                    ),\n                    borderRadius: BorderRadius.circular(16),\n                  ),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                  child: Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Text(\n                        snap.connectionState == ConnectionState.waiting\n                            ? '0'\n                            : (snap.data ?? 0).toString().padLeft(3, '0'),\n                        style: const TextStyle(\n                          fontSize: 36,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.white,\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      const Text(\n                        'Remaining Today',\n                        style: TextStyle(\n                          fontSize: 16,\n                          color: Colors.white,\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              );\n            },\n          ),\n          SingleChildScrollView(\n            scrollDirection: Axis.horizontal,\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n            child: Row(\n              children: [\n                _filterChip('Today'),\n                const SizedBox(width: 8),\n                _filterChip('Upcoming'),\n                const SizedBox(width: 8),\n                _filterChip('Completed'),\n                const SizedBox(width: 8),\n                _filterChip('All'),\n                const SizedBox(width: 8),\n                _filterChip('Recurring'),\n              ],\n            ),\n          ),\n          Expanded(\n            child: StreamBuilder<List<QueryDocumentSnapshot<Map<String, dynamic>>>>(\n              stream: _getTasksStream(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (snapshot.hasError) {\n                  logger.e('Task stream error: ${snapshot.error}');\n                  return Center(\n                    child: Padding(\n                      padding: const EdgeInsets.all(24),\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          Text(\n                            snapshot.error.toString().contains('requires an index')\n                                ? 'Database setup in progress. Please try again in a few minutes or contact support.'\n                                : 'Failed to load tasks: ${snapshot.error}',\n                            textAlign: TextAlign.center,\n                            style: const TextStyle(fontSize: 16),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton.icon(\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Retry'),\n                            onPressed: () {\n                              if (mounted) setState(() {});\n                            },\n                          ),\n                        ],\n                      ),\n                    ),\n                  );\n                }\n\n                final docs = snapshot.data ?? [];\n                if (docs.isEmpty) {\n                  return _emptyState();\n                }\n\n                return RefreshIndicator(\n                  onRefresh: () async {\n                    if (mounted) setState(() {});\n                  },\n                  child: ListView.builder(\n                    padding: const EdgeInsets.all(16),\n                    itemCount: docs.length,\n                    itemBuilder: (context, index) {\n                      final doc = docs[index];\n                      final task = doc.data();\n                      final id = doc.id;\n                      final isTemplate = _selectedTab == 'Recurring';\n                      final completed = isTemplate ? false : (task['completed'] as bool? ?? false);\n                      final description = task['description'] as String? ?? '';\n                      final dueDate = task['dueDate'] as Timestamp?;\n                      final reminderTime = task['reminderTime'] as Timestamp?;\n                      final Map<String, dynamic>? dailyDueTime = isTemplate ? task['dailyDueTime'] as Map<String, dynamic>? : null;\n                      final Map<String, dynamic>? dailyReminderTime = isTemplate ? task['dailyReminderTime'] as Map<String, dynamic>? : null;\n\n                      return Card(\n                        elevation: 4,\n                        margin: const EdgeInsets.only(bottom: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n                        color: completed ? Colors.grey[200] : Colors.white,\n                        child: ListTile(\n                          contentPadding: const EdgeInsets.all(16),\n                          leading: isTemplate\n                              ? const Icon(Icons.repeat, color: Colors.blue, size: 32)\n                              : Icon(\n                                  completed\n                                      ? Icons.check_circle\n                                      : Icons.radio_button_unchecked,\n                                  color: completed ? Colors.green : Colors.red,\n                                  size: 32,\n                                ),\n                          title: Text(\n                            task['task'] as String? ?? 'Untitled',\n                            style: TextStyle(\n                              fontSize: 18,\n                              fontWeight: FontWeight.bold,\n                              decoration:\n                                  completed ? TextDecoration.lineThrough : null,\n                            ),\n                          ),\n                          subtitle: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              if (description.isNotEmpty)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    description,\n                                    style: const TextStyle(color: Colors.black54),\n                                  ),\n                                ),\n                              if (!isTemplate && dueDate != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Due: ${DateFormat('MMM dd, yyyy hh:mm a').format(dueDate.toDate())}',\n                                    style: const TextStyle(color: Colors.blueGrey),\n                                  ),\n                                ),\n                              if (!isTemplate && reminderTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Reminder: ${DateFormat('MMM dd, yyyy hh:mm a').format(reminderTime.toDate())}',\n                                    style: const TextStyle(color: Colors.orange),\n                                  ),\n                                ),\n                              if (isTemplate && dailyDueTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Daily Due: ${dailyDueTime['hour'].toString().padLeft(2, '0')}:${dailyDueTime['min'].toString().padLeft(2, '0')}',\n                                    style: const TextStyle(color: Colors.blueGrey),\n                                  ),\n                                ),\n                              if (isTemplate && dailyReminderTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Daily Reminder: ${dailyReminderTime['hour'].toString().padLeft(2, '0')}:${dailyReminderTime['min'].toString().padLeft(2, '0')}',\n                                    style: const TextStyle(color: Colors.orange),\n                                  ),\n                                ),\n                            ],\n                          ),\n                          trailing: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              IconButton(\n                                icon: const Icon(Icons.edit, color: Colors.blue),\n                                onPressed: () async {\n                                  if (!mounted) return;\n                                  final Map<String, dynamic>? updated = await Navigator.push<Map<String, dynamic>>(\n                                    context,\n                                    MaterialPageRoute(\n                                      builder: (_) => EditTaskPage(\n                                        taskName: task['task'] as String? ?? '',\n                                        description: description,\n                                        dueDate: dueDate?.toDate(),\n                                        reminderTime: reminderTime?.toDate(),\n                                        isTemplate: isTemplate,\n                                        dailyDueTime: dailyDueTime,\n                                        dailyReminderTime: dailyReminderTime,\n                                      ),\n                                    ),\n                                  );\n                                  if (updated != null && mounted) {\n                                    final uid = _auth.currentUser?.uid;\n                                    if (uid != null) {\n                                      try {\n                                        final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n                                        await _firestore\n                                            .collection('user')\n                                            .doc(uid)\n                                            .collection(coll)\n                                            .doc(id)\n                                            .update({\n                                              'task': updated['task'],\n                                              'description': updated['description'],\n                                              if (isTemplate)\n                                                'dailyDueTime': updated['dailyDueTime'],\n                                              if (isTemplate)\n                                                'dailyReminderTime': updated['dailyReminderTime'],\n                                              if (!isTemplate)\n                                                'dueDate': updated['dueDate'] != null\n                                                    ? Timestamp.fromDate(updated['dueDate'] as DateTime)\n                                                    : null,\n                                              if (!isTemplate)\n                                                'reminderTime': updated['reminderTime'] != null\n                                                    ? Timestamp.fromDate(updated['reminderTime'] as DateTime)\n                                                    : null,\n                                            });\n\n                                        if (!isTemplate && updated['reminderTime'] != null) {\n                                          final userPlayerIds = await _getUserPlayerIds();\n                                          final caretakerPlayerIds = await _getCaretakerPlayerIds();\n                                          final allPlayerIds = [...userPlayerIds, ...caretakerPlayerIds];\n\n                                          await scheduleNotification(\n                                            allPlayerIds,\n                                            'Task Reminder: ${updated['task']}',\n                                            updated['reminderTime'] as DateTime,\n                                          );\n                                        }\n                                      } catch (e) {\n                                        if (mounted) {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            SnackBar(content: Text('Error updating: $e')),\n                                          );\n                                        }\n                                      }\n                                    }\n                                  }\n                                },\n                              ),\n                              IconButton(\n                                icon: const Icon(Icons.delete, color: Colors.red),\n                                onPressed: () => _deleteTask(id, isTemplate),\n                              ),\n                            ],\n                          ),\n                          onTap: isTemplate ? null : () => _toggleTaskStatus(id, completed),\n                        ),\n                      );\n                    },\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: FloatingActionButton.extended(\n        backgroundColor: Colors.orange,\n        icon: const Icon(Icons.add, color: Colors.white),\n        label: const Text('Add', style: TextStyle(color: Colors.white)),\n        onPressed: () async {\n          if (!mounted) return;\n          final newTask = await Navigator.push(\n            context,\n            MaterialPageRoute(builder: (_) => AddTaskPage(isTemplate: _selectedTab == 'Recurring')),\n          );\n          if (newTask != null && mounted) {\n            final uid = _auth.currentUser?.uid;\n            if (uid != null) {\n              try {\n                final isTemplate = newTask['recurring'] == 'Daily';\n                final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n                await _firestore.collection('user').doc(uid).collection(coll).add({\n                  'task': newTask['task'],\n                  'description': newTask['description'],\n                  if (!isTemplate) 'completed': false,\n                  'createdAt': Timestamp.now(),\n                  if (!isTemplate)\n                    'dueDate': newTask['dueDate'] != null\n                        ? Timestamp.fromDate(newTask['dueDate'] as DateTime)\n                        : null,\n                  if (!isTemplate)\n                    'reminderTime': newTask['reminderTime'] != null\n                        ? Timestamp.fromDate(newTask['reminderTime'] as DateTime)\n                        : null,\n                  if (isTemplate) 'dailyDueTime': newTask['dailyDueTime'],\n                  if (isTemplate) 'dailyReminderTime': newTask['dailyReminderTime'],\n                  'createdBy': 'user',\n                });\n\n                if (!isTemplate && newTask['reminderTime'] != null) {\n                  final userPlayerIds = await _getUserPlayerIds();\n                  final caretakerPlayerIds = await _getCaretakerPlayerIds();\n                  final allPlayerIds = [...userPlayerIds, ...caretakerPlayerIds];\n\n                  await scheduleNotification(\n                    allPlayerIds,\n                    'New Task Reminder: ${newTask['task']}',\n                    newTask['reminderTime'] as DateTime,\n                  );\n                }\n\n                if (isTemplate) {\n                  await _generateDailyTasks();\n                }\n              } catch (e) {\n                if (mounted) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('Error adding: $e')),\n                  );\n                }\n              }\n            }\n          }\n        },\n      ),\n    );\n  }\n\n  Widget _filterChip(String label) {\n    return ChoiceChip(\n      label: Text(label, style: const TextStyle(fontSize: 14)),\n      selected: _selectedTab == label,\n      onSelected: (selected) {\n        if (selected && mounted) {\n          setState(() => _selectedTab = label);\n        }\n      },\n      selectedColor: Colors.blueAccent,\n      backgroundColor: Colors.grey[300],\n      labelStyle: TextStyle(\n          color: _selectedTab == label ? Colors.white : Colors.black),\n    );\n  }\n\n  Widget _emptyState() {\n    return const Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(Icons.inbox, size: 64, color: Colors.grey),\n          SizedBox(height: 16),\n          Text(\n            'No items yet. Add one!',\n            style: TextStyle(fontSize: 18, color: Colors.grey),\n          ),\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "notifications": {
        "notifications_screen.dart": {
          "_text": "// lib/user/notifications/notifications_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass NotificationsScreen extends StatefulWidget {\n  const NotificationsScreen({super.key});\n\n  @override\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\n}\n\nclass _NotificationsScreenState extends State<NotificationsScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  Stream<QuerySnapshot> _getNotifications() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore.collection('user').doc(uid).collection('notifications').orderBy('createdAt', descending: true).snapshots();\n  }\n\n  Future<void> _markRead(String id) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid != null) {\n      await _firestore.collection('user').doc(uid).collection('notifications').doc(id).update({'isRead': true});\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Notifications'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: StreamBuilder<QuerySnapshot>(\n          stream: _getNotifications(),\n          builder: (context, snapshot) {\n            if (snapshot.hasError) {\n              return Center(\n                child: Text('Error: ${snapshot.error}', style: const TextStyle(color: Colors.red)),\n              );\n            }\n            if (!snapshot.hasData) {\n              return const Center(child: CircularProgressIndicator(color: Colors.blueAccent));\n            }\n            final notifs = snapshot.data!.docs;\n            if (notifs.isEmpty) {\n              return const Center(\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    Icon(Icons.notifications_off, size: 64, color: Colors.grey),\n                    SizedBox(height: 16),\n                    Text(\n                      'No notifications yet',\n                      style: TextStyle(fontSize: 18, color: Colors.grey),\n                    ),\n                  ],\n                ),\n              );\n            }\n            return ListView.builder(\n              padding: const EdgeInsets.all(16.0),\n              itemCount: notifs.length,\n              itemBuilder: (context, index) {\n                final notif = notifs[index].data() as Map<String, dynamic>;\n                final id = notifs[index].id;\n                final timestamp = notif['createdAt'] as Timestamp?;\n                final isRead = notif['isRead'] as bool? ?? false;\n\n                return Card(\n                  elevation: 3,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  color: isRead ? Colors.grey[100] : Colors.white,\n                  child: ListTile(\n                    leading: Icon(\n                      Icons.notifications,\n                      color: isRead ? Colors.grey : Colors.blueAccent,\n                    ),\n                    title: Text(notif['message'] ?? 'No message'),\n                    subtitle: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(notif['type'] ?? 'General'),\n                        if (timestamp != null)\n                          Text(\n                            DateFormat('MMM dd, yyyy hh:mm a').format(timestamp.toDate()),\n                            style: const TextStyle(fontSize: 12, color: Colors.grey),\n                          ),\n                      ],\n                    ),\n                    trailing: isRead ? null : const Icon(Icons.fiber_new, color: Colors.orange),\n                    onTap: () => _markRead(id),\n                  ),\n                );\n              },\n            );\n          },\n        ),\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "profile": {
        "edit_profile_screen.dart": {
          "_text": "// lib/user/profile/edit_profile_screen.dart\nimport 'dart:io';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:intl/intl.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass EditProfileScreen extends StatefulWidget {\n  final Map<String, dynamic> userData;\n  const EditProfileScreen({super.key, required this.userData});\n\n  @override\n  State<EditProfileScreen> createState() => _EditProfileScreenState();\n}\n\nclass _EditProfileScreenState extends State<EditProfileScreen> {\n  late TextEditingController _fullNameController;\n  late TextEditingController _usernameController;\n  late TextEditingController _bioController;\n  late TextEditingController _phoneController;\n  late TextEditingController _localityController;\n  late TextEditingController _cityController;\n  late TextEditingController _stateController;\n  DateTime? _dob;\n  String? _gender;\n  String _profileImageUrl = '';\n  File? _newProfileImage;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'user_image');\n  bool _isSaving = false;\n  List<Map<String, dynamic>> _emergencyContacts = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _fullNameController = TextEditingController(text: widget.userData['fullName']);\n    _usernameController = TextEditingController(text: widget.userData['username']);\n    _bioController = TextEditingController(text: widget.userData['bio']);\n    _phoneController = TextEditingController(text: widget.userData['phoneNo']);\n    _localityController = TextEditingController(text: widget.userData['locality']);\n    _cityController = TextEditingController(text: widget.userData['city']);\n    _stateController = TextEditingController(text: widget.userData['state']);\n    _dob = widget.userData['dob']?.toDate();\n    _gender = widget.userData['gender'];\n    _profileImageUrl = widget.userData['profileImageUrl'] ?? '';\n    _emergencyContacts = List<Map<String, dynamic>>.from(widget.userData['emergencyContacts'] ?? []);\n  }\n\n  Future<void> _pickImage() async {\n    if (await Permission.photos.request().isGranted) {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _newProfileImage = File(picked.path));\n      }\n    }\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_newProfileImage == null) return _profileImageUrl;\n    try {\n      final response = await cloudinary.uploadFile(CloudinaryFile.fromFile(_newProfileImage!.path));\n      return response.secureUrl;\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n      }\n      return _profileImageUrl;\n    }\n  }\n\n  Future<void> _saveChanges() async {\n    if (_isSaving || !mounted) return;\n    setState(() => _isSaving = true);\n    final url = await _uploadImage();\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null && mounted) {\n      try {\n        await FirebaseFirestore.instance.collection('user').doc(uid).update({\n          'fullName': _fullNameController.text.trim(),\n          'username': _usernameController.text.trim(),\n          'bio': _bioController.text.trim(),\n          'phoneNo': _phoneController.text.trim(),\n          'profileImageUrl': url,\n          'locality': _localityController.text.trim(),\n          'city': _cityController.text.trim(),\n          'state': _stateController.text.trim(),\n          'dob': _dob != null ? Timestamp.fromDate(_dob!) : null,\n          'gender': _gender,\n          'emergencyContacts': _emergencyContacts,\n        });\n        if (mounted) Navigator.pop(context, true);\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Save failed: $e')));\n        }\n      }\n    }\n    if (mounted) setState(() => _isSaving = false);\n  }\n\n  Future<void> _pickDob() async {\n    final picked = await showDatePicker(\n      context: context,\n      initialDate: _dob ?? DateTime.now(),\n      firstDate: DateTime(1900),\n      lastDate: DateTime.now(),\n    );\n    if (picked != null && mounted) {\n      setState(() => _dob = picked);\n    }\n  }\n\n  void _addEmergencyContact() {\n    _showContactDialog();\n  }\n\n  void _editEmergencyContact(int index) {\n    _showContactDialog(index: index);\n  }\n\n  void _deleteEmergencyContact(int index) {\n    setState(() {\n      _emergencyContacts.removeAt(index);\n    });\n  }\n\n  void _showContactDialog({int? index}) {\n    final isEdit = index != null;\n    final nameController = TextEditingController(text: isEdit ? _emergencyContacts[index]['name'] : '');\n    final relationController = TextEditingController(text: isEdit ? _emergencyContacts[index]['relation'] : '');\n    final phoneController = TextEditingController(text: isEdit ? _emergencyContacts[index]['number'] : '');\n\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          title: Text(isEdit ? 'Edit Contact' : 'Add Contact'),\n          content: SingleChildScrollView(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                TextField(controller: nameController, decoration: const InputDecoration(labelText: 'Name')),\n                TextField(controller: relationController, decoration: const InputDecoration(labelText: 'Relation')),\n                TextField(controller: phoneController, decoration: const InputDecoration(labelText: 'Phone'), keyboardType: TextInputType.phone),\n              ],\n            ),\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: const Text('Cancel'),\n            ),\n            ElevatedButton(\n              onPressed: () {\n                final name = nameController.text.trim();\n                final relation = relationController.text.trim();\n                final phone = phoneController.text.trim();\n                if (name.isNotEmpty && relation.isNotEmpty && phone.isNotEmpty) {\n                  final contact = {'name': name, 'relation': relation, 'number': phone};\n                  setState(() {\n                    if (isEdit) {\n                      _emergencyContacts[index] = contact;\n                    } else {\n                      _emergencyContacts.add(contact);\n                    }\n                  });\n                  Navigator.pop(context);\n                }\n              },\n              child: Text(isEdit ? 'Update' : 'Add'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Edit Profile'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundImage: _newProfileImage != null\n                            ? FileImage(_newProfileImage!)\n                            : (_profileImageUrl.isNotEmpty ? NetworkImage(_profileImageUrl) : null),\n                        child: (_newProfileImage == null && _profileImageUrl.isEmpty)\n                            ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                            : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Personal Details',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              _buildTextField(_fullNameController, 'Full Name', Icons.person),\n              _buildTextField(_usernameController, 'Username', Icons.alternate_email),\n              _buildTextField(_bioController, 'Bio', Icons.info, maxLines: 3),\n              _buildTextField(_phoneController, 'Phone Number', Icons.phone, keyboardType: TextInputType.phone),\n              Card(\n                elevation: 2,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                child: ListTile(\n                  title: Text(_dob == null ? 'Select DOB' : DateFormat('yyyy-MM-dd').format(_dob!)),\n                  trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                  onTap: _pickDob,\n                ),\n              ),\n              const SizedBox(height: 8),\n              DropdownButtonFormField<String>(\n                value: _gender,\n                hint: const Text('Select Gender'),\n                decoration: InputDecoration(\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.transgender, color: Colors.blueAccent),\n                ),\n                items: ['Male', 'Female', 'Other'].map((g) => DropdownMenuItem(value: g, child: Text(g))).toList(),\n                onChanged: (value) => setState(() => _gender = value),\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Location',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              _buildTextField(_localityController, 'Locality', Icons.location_on),\n              _buildTextField(_cityController, 'City', Icons.location_city),\n              _buildTextField(_stateController, 'State', Icons.map),\n              const SizedBox(height: 24),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  const Text(\n                    'Emergency Contacts',\n                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n                  ),\n                  IconButton(\n                    icon: const Icon(Icons.add_circle, color: Colors.blueAccent),\n                    onPressed: _addEmergencyContact,\n                  ),\n                ],\n              ),\n              const SizedBox(height: 8),\n              if (_emergencyContacts.isEmpty)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: const Padding(\n                    padding: EdgeInsets.all(16.0),\n                    child: Center(\n                      child: Text(\n                        'No emergency contacts added',\n                        style: TextStyle(color: Colors.grey),\n                      ),\n                    ),\n                  ),\n                )\n              else\n                Column(\n                  children: _emergencyContacts.asMap().entries.map((entry) {\n                    int idx = entry.key;\n                    Map<String, dynamic> contact = entry.value;\n                    return Card(\n                      elevation: 2,\n                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                      child: ListTile(\n                        leading: const Icon(Icons.emergency, color: Colors.red),\n                        title: Text(contact['name'] ?? ''),\n                        subtitle: Text(\n                          'Relation: ${contact['relation'] ?? ''}\\nPhone: ${contact['number'] ?? ''}',\n                        ),\n                        trailing: Row(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            IconButton(\n                              icon: const Icon(Icons.edit, color: Colors.blue),\n                              onPressed: () => _editEmergencyContact(idx),\n                            ),\n                            IconButton(\n                              icon: const Icon(Icons.delete, color: Colors.red),\n                              onPressed: () => _deleteEmergencyContact(idx),\n                            ),\n                          ],\n                        ),\n                      ),\n                    );\n                  }).toList(),\n                ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _saveChanges,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Save Changes', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {int maxLines = 1, TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        maxLines: maxLines,\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _fullNameController.dispose();\n    _usernameController.dispose();\n    _bioController.dispose();\n    _phoneController.dispose();\n    _localityController.dispose();\n    _cityController.dispose();\n    _stateController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "settings_screen.dart": {
          "_text": "// lib/user/profile/settings_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport '../../welcome_page.dart';\n\nclass SettingsScreen extends StatelessWidget {\n  const SettingsScreen({super.key});\n\n  Future<void> _logout(BuildContext context) async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null) {\n      final playerId = OneSignal.User.pushSubscription.id;\n      if (playerId != null) {\n        await FirebaseFirestore.instance.collection('user').doc(uid).update({\n          'playerIds': FieldValue.arrayRemove([playerId]),\n        });\n      }\n    }\n    await FirebaseAuth.instance.signOut();\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.remove('lastRole'); // Clear role on logout\n    Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const WelcomePage()));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Settings'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: ListView(\n          padding: const EdgeInsets.all(16.0),\n          children: [\n            const Text(\n              'Account',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n            ),\n            const SizedBox(height: 8),\n            Card(\n              elevation: 2,\n              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n              child: ListTile(\n                leading: const Icon(Icons.logout, color: Colors.red),\n                title: const Text('Logout'),\n                onTap: () => _logout(context),\n              ),\n            ),\n            const SizedBox(height: 24),\n            const Text(\n              'Preferences',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n            ),\n            const SizedBox(height: 8),\n            \n          ],\n        ),\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "user_profile.dart": {
          "_text": "// lib/user/profile/user_profile.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:url_launcher/url_launcher.dart';\nimport 'edit_profile_screen.dart';\nimport 'settings_screen.dart';\n\nclass UserProfile extends StatefulWidget {\n  const UserProfile({super.key});\n\n  @override\n  State<UserProfile> createState() => _UserProfileState();\n}\n\nclass _UserProfileState extends State<UserProfile> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  Map<String, dynamic>? _userData;\n  bool _isLoading = true;\n  bool _hasError = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadUserData();\n  }\n\n  Future<void> _loadUserData() async {\n    if (!mounted) return;\n\n    setState(() {\n      _isLoading = true;\n      _hasError = false;\n    });\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final doc = await _firestore.collection('user').doc(uid).get();\n        if (doc.exists && mounted) {\n          setState(() {\n            _userData = doc.data();\n            _isLoading = false;\n          });\n        } else if (mounted) {\n          setState(() {\n            _isLoading = false;\n            _hasError = true;\n          });\n        }\n      } else if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    } catch (e) {\n      print('Error loading user data: $e');\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    }\n  }\n\n  Future<void> _callNumber(String number) async {\n    final uri = Uri(scheme: 'tel', path: number);\n    if (await canLaunchUrl(uri)) {\n      await launchUrl(uri);\n    } else if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Could not launch dialer for $number')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.grey[100],\n      appBar: AppBar(\n        title: const Text('Profile'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        leading: IconButton(\n          icon: const Icon(Icons.menu, color: Colors.white),\n          onPressed: () {\n            if (mounted) {\n              Navigator.push(\n                context,\n                MaterialPageRoute(builder: (context) => const SettingsScreen()),\n              );\n            }\n          },\n        ),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.edit, color: Colors.white),\n            onPressed: () async {\n              if (_userData != null && mounted) {\n                final updated = await Navigator.push(\n                  context,\n                  MaterialPageRoute(\n                    builder: (context) => EditProfileScreen(userData: _userData ?? {}),\n                  ),\n                );\n                if (updated == true && mounted) {\n                  _loadUserData();\n                }\n              }\n            },\n          ),\n        ],\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n          : _hasError\n              ? Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      const Icon(Icons.error, size: 64, color: Colors.red),\n                      const SizedBox(height: 16),\n                      const Text(\n                        'Error loading profile data',\n                        style: TextStyle(fontSize: 18, color: Colors.red),\n                      ),\n                      const SizedBox(height: 16),\n                      ElevatedButton(\n                        onPressed: _loadUserData,\n                        style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                        child: const Text('Retry', style: TextStyle(color: Colors.white)),\n                      ),\n                    ],\n                  ),\n                )\n              : _userData == null\n                  ? const Center(\n                      child: Text(\n                        'No user data available',\n                        style: TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                    )\n                  : RefreshIndicator(\n                      onRefresh: _loadUserData,\n                      color: Colors.blueAccent,\n                      child: SingleChildScrollView(\n                        physics: const AlwaysScrollableScrollPhysics(),\n                        padding: const EdgeInsets.all(16.0),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            _buildHeader(),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Personal Information'),\n                            _buildCard(\n                              Column(\n                                crossAxisAlignment: CrossAxisAlignment.start,\n                                children: [\n                                  _buildInfoRow(Icons.info, 'Bio:', _userData!['bio']),\n                                  _buildInfoRow(Icons.email, 'Email:', _userData!['email']),\n                                  _buildInfoRow(Icons.phone, 'Phone:', _userData!['phoneNo']),\n                                  _buildInfoRow(\n                                      Icons.cake,\n                                      'DOB:',\n                                      _userData!['dob'] != null\n                                          ? DateFormat('yyyy-MM-dd').format(_userData!['dob'].toDate())\n                                          : ''),\n                                  _buildInfoRow(Icons.person, 'Gender:', _userData!['gender']),\n                                ],\n                              ),\n                            ),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Location'),\n                            _buildCard(\n                              Column(\n                                crossAxisAlignment: CrossAxisAlignment.start,\n                                children: [\n                                  _buildInfoRow(Icons.location_on, 'Locality:', _userData!['locality']),\n                                  _buildInfoRow(Icons.location_city, 'City:', _userData!['city']),\n                                  _buildInfoRow(Icons.map, 'State:', _userData!['state']),\n                                ],\n                              ),\n                            ),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Emergency Contacts'),\n                            const SizedBox(height: 8),\n                            _buildEmergencyContacts(),\n                          ],\n                        ),\n                      ),\n                    ),\n    );\n  }\n\n  Widget _buildHeader() {\n    return Center(\n      child: Column(\n        children: [\n          CircleAvatar(\n            radius: 60,\n            backgroundColor: Colors.grey[300],\n            backgroundImage: (_userData!['profileImageUrl'] != null &&\n                    _userData!['profileImageUrl'].toString().isNotEmpty)\n                ? NetworkImage(_userData!['profileImageUrl'])\n                : null,\n            child: (_userData!['profileImageUrl'] == null ||\n                    _userData!['profileImageUrl'].toString().isEmpty)\n                ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                : null,\n          ),\n          const SizedBox(height: 16),\n          Text(\n            _userData!['fullName'] ?? 'No Name',\n            style: const TextStyle(\n              fontSize: 24,\n              fontWeight: FontWeight.bold,\n              color: Colors.blueAccent,\n            ),\n          ),\n          Text(\n            '@${_userData!['username'] ?? ''}',\n            style: const TextStyle(fontSize: 16, color: Colors.grey),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSectionTitle(String title) {\n    return Text(\n      title,\n      style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n    );\n  }\n\n  Widget _buildCard(Widget child) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      color: Colors.white,\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: child,\n      ),\n    );\n  }\n\n  Widget _buildEmergencyContacts() {\n    final contacts = _userData!['emergencyContacts'] as List?;\n    if (contacts == null || contacts.isEmpty) {\n      return _buildCard(\n        const Center(\n          child: Text(\n            'No emergency contacts added',\n            style: TextStyle(color: Colors.grey),\n          ),\n        ),\n      );\n    } else {\n      return Column(\n        children: contacts.map((e) {\n          return _buildCard(\n            ListTile(\n              leading: const Icon(Icons.emergency, color: Colors.red),\n              title: Text(e['name'] ?? ''),\n              subtitle: Text(\n                'Relation: ${e['relation'] ?? ''}\\nPhone: ${e['number'] ?? ''}',\n              ),\n              trailing: IconButton(\n                icon: const Icon(Icons.phone, color: Colors.green),\n                onPressed: () {\n                  if (e['number'] != null && e['number'].toString().isNotEmpty) {\n                    _callNumber(e['number']);\n                  }\n                },\n              ),\n            ),\n          );\n        }).toList(),\n      );\n    }\n  }\n\n  Widget _buildInfoRow(IconData icon, String label, String? value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 6.0),\n      child: Row(\n        children: [\n          Icon(icon, color: Colors.blueAccent),\n          const SizedBox(width: 8),\n          Expanded(\n            child: Text(\n              '$label ${value ?? 'Not set'}',\n              style: const TextStyle(fontSize: 16),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "user_bottom_nav.dart": {
        "_text": "// lib/user/user_bottom_nav.dart\nimport 'package:flutter/material.dart';\nimport 'family/family_screen.dart';\nimport 'home/home_screen.dart';\nimport 'caretaker/caretaker_screen.dart';\nimport 'profile/user_profile.dart';\n\nclass UserBottomNav extends StatefulWidget {\n  const UserBottomNav({super.key});\n\n  @override\n  State<UserBottomNav> createState() => _UserBottomNavState();\n}\n\nclass _UserBottomNavState extends State<UserBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const HomeScreen(),\n    const FamilyScreen(),\n    const CaretakerScreen(),\n    const UserProfile(),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        type: BottomNavigationBarType.fixed,\n        selectedItemColor: Colors.blueAccent,\n        unselectedItemColor: Colors.grey,\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n          BottomNavigationBarItem(icon: Icon(Icons.group), label: 'Family'),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.manage_accounts),\n            label: 'CareTaker',\n          ),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n        ],\n      ),\n    );\n  }\n}",
        "_encoding": "utf-8"
      }
    },
    "utils": {
      "notification_helper.dart": {
        "_text": "// lib/utils/notification_helper.dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\nimport 'package:intl/intl.dart';\n\nFuture<void> sendNotification(List<String> playerIds, String content) async {\n  if (playerIds.isEmpty) return;\n\n  const appId = '73673a14-2de9-44c4-a9c5-dd531da39b59';\n  const apiKey = 'os_v2_app_onttufbn5fcmjkof3vjr3i43lhrirnuaeujum3mksb5gtjrhjnq7fj2wbm4rjwmg3kyo4ikoqvmiyv5rm5pxgqjx46gd37w3fvc2yey';\n\n  try {\n    final response = await http.post(\n      Uri.parse('https://onesignal.com/api/v1/notifications'),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': 'Basic $apiKey',\n      },\n      body: jsonEncode({\n        'app_id': appId,\n        'include_player_ids': playerIds,\n        'contents': {'en': content},\n        'priority': 10,\n      }),\n    ).timeout(const Duration(seconds: 10));\n\n    if (response.statusCode != 200) {\n      print('Failed to send notification: ${response.statusCode} - ${response.body}');\n    }\n  } catch (e) {\n    print('Error sending notification: $e');\n  }\n}\n\nFuture<void> scheduleNotification(List<String> playerIds, String content, DateTime scheduledTime) async {\n  if (playerIds.isEmpty) return;\n\n  const appId = '73673a14-2de9-44c4-a9c5-dd531da39b59';\n  const apiKey = 'os_v2_app_onttufbn5fcmjkof3vjr3i43lhrirnuaeujum3mksb5gtjrhjnq7fj2wbm4rjwmg3kyo4ikoqvmiyv5rm5pxgqjx46gd37w3fvc2yey';\n\n  final formattedTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(scheduledTime.toUtc()) + ' UTC';\n\n  try {\n    final response = await http.post(\n      Uri.parse('https://onesignal.com/api/v1/notifications'),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': 'Basic $apiKey',\n      },\n      body: jsonEncode({\n        'app_id': appId,\n        'include_player_ids': playerIds,\n        'contents': {'en': content},\n        'send_after': formattedTime,\n        'priority': 10,\n      }),\n    ).timeout(const Duration(seconds: 10));\n\n    if (response.statusCode != 200) {\n      print('Failed to schedule notification: ${response.statusCode} - ${response.body}');\n    }\n  } catch (e) {\n    print('Error scheduling notification: $e');\n  }\n}",
        "_encoding": "utf-8"
      }
    },
    "firebase_options.dart": {
      "_text": "// File generated by FlutterFire CLI.\n// ignore_for_file: type=lint\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for web - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        return ios;\n      case TargetPlatform.macOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for macos - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyD24yA69_RtcP-ad4cVST3ykwfEEpWScGw',\n    appId: '1:54955106735:android:ed95e1b17fba45b566cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n  );\n\n  static const FirebaseOptions ios = FirebaseOptions(\n    apiKey: 'AIzaSyAznFalyZJzZlofbHOIYUXbGiipNwL7PXU',\n    appId: '1:54955106735:ios:da277fbc63d770d366cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n    iosBundleId: 'com.example.dementiaVirtualMemory',\n  );\n}\n",
      "_encoding": "utf-8"
    },
    "forgot_password_page.dart": {
      "_text": "// lib/forgot_password_page.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({super.key});\n\n  @override\n  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();\n}\n\nclass _ForgotPasswordPageState extends State<ForgotPasswordPage> {\n  final TextEditingController emailController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  bool _loading = false;\n\n  Future<void> _resetPassword() async {\n    setState(() => _loading = true);\n    try {\n      await _auth.sendPasswordResetEmail(email: emailController.text.trim());\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Password reset link sent to ${emailController.text}')));\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed: $e')));\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: true, // Ensure content resizes when keyboard appears\n      appBar: AppBar(\n        title: const Text('Forgot Password'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView( // Add SingleChildScrollView to handle keyboard overflow\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Text(\n                'Enter your email to reset your password',\n                style: TextStyle(fontSize: 18, color: Colors.blueAccent),\n                textAlign: TextAlign.center,\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'Email',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.email, color: Colors.blueAccent),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _loading\n                  ? const CircularProgressIndicator(color: Colors.blueAccent)\n                  : ElevatedButton(\n                      onPressed: _resetPassword,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Send Reset Link', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "login_page.dart": {
      "_text": "// lib/login_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'admin/admin_bottom_nav.dart';\nimport 'careTaker/care_taker.dart';\nimport 'register_page.dart';\nimport 'forgot_password_page.dart';\nimport 'user/user_bottom_nav.dart';\n\nclass LoginPage extends StatefulWidget {\n  final String role;\n  const LoginPage({Key? key, required this.role}) : super(key: key);\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _loading = false;\n\n  Future<void> _login() async {\n    setState(() => _loading = true);\n    try {\n      final credential = await _auth.signInWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n      if (uid != null) {\n        final doc = await _firestore.collection(widget.role).doc(uid).get();\n        if (doc.exists) {\n          final data = doc.data()!;\n          if (data['isBanned'] == true) {\n            await _auth.signOut();\n            if (mounted) {\n              ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Account is banned')));\n            }\n            return;\n          }\n          // Add player ID\n          final playerId = OneSignal.User.pushSubscription.id;\n          if (playerId != null) {\n            await _firestore.collection(widget.role).doc(uid).update({\n              'playerIds': FieldValue.arrayUnion([playerId]),\n            });\n          }\n          // Save the role for auto-login\n          final prefs = await SharedPreferences.getInstance();\n          await prefs.setString('lastRole', widget.role);\n\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Logged in as ${widget.role}')));\n          }\n          if (widget.role == 'user') {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const UserBottomNav()));\n          } else if (widget.role == 'caretaker') {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const CareTaker()));\n          } else {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const AdminBottomNav()));\n          }\n        } else {\n          throw 'Role mismatch or user not found';\n        }\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Login failed: $e')));\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  void _goToRegister() {\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(\n        builder: (context) => RegisterPage(role: widget.role),\n      ),\n    );\n  }\n\n  void _forgotPassword() {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const ForgotPasswordPage()),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isAdmin = widget.role == 'admin';\n    return Scaffold(\n      resizeToAvoidBottomInset: true, // Ensure content resizes when keyboard appears\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SafeArea(\n          child: SingleChildScrollView( // Add SingleChildScrollView to handle keyboard overflow\n            padding: const EdgeInsets.all(24.0),\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Text(\n                  '${widget.role.toUpperCase()} Login',\n                  style: const TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n                ),\n                const SizedBox(height: 32),\n                TextField(\n                  controller: emailController,\n                  decoration: InputDecoration(\n                    labelText: 'Email',\n                    border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                    filled: true,\n                    fillColor: Colors.white,\n                    prefixIcon: const Icon(Icons.email, color: Colors.blueAccent),\n                  ),\n                ),\n                const SizedBox(height: 16),\n                TextField(\n                  controller: passwordController,\n                  decoration: InputDecoration(\n                    labelText: 'Password',\n                    border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                    filled: true,\n                    fillColor: Colors.white,\n                    prefixIcon: const Icon(Icons.lock, color: Colors.blueAccent),\n                  ),\n                  obscureText: true,\n                ),\n                const SizedBox(height: 8),\n                Align(\n                  alignment: Alignment.centerRight,\n                  child: TextButton(\n                    onPressed: _forgotPassword,\n                    child: const Text('Forgot Password?', style: TextStyle(color: Colors.blueAccent)),\n                  ),\n                ),\n                const SizedBox(height: 24),\n                _loading\n                    ? const CircularProgressIndicator(color: Colors.blueAccent)\n                    : ElevatedButton(\n                        onPressed: _login,\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: Colors.blueAccent,\n                          padding: const EdgeInsets.symmetric(vertical: 16),\n                          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                          minimumSize: const Size(double.infinity, 50),\n                        ),\n                        child: Text('Login as ${widget.role}', style: const TextStyle(fontSize: 18, color: Colors.white)),\n                      ),\n                const SizedBox(height: 16),\n                if (!isAdmin)\n                  TextButton(\n                    onPressed: _goToRegister,\n                    child: const Text(\"Don't have an account? Sign up here\", style: TextStyle(color: Colors.blueAccent)),\n                  ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "main.dart": {
      "_text": "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nimport 'package:flutter_gemini/flutter_gemini.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'firebase_options.dart';\nimport 'welcome_page.dart';\nimport 'user/user_bottom_nav.dart';\nimport 'careTaker/care_taker.dart';\nimport 'admin/admin_bottom_nav.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n  OneSignal.initialize(\"73673a14-2de9-44c4-a9c5-dd531da39b59\");\n  OneSignal.Notifications.requestPermission(true);\n\n  final prefs = await SharedPreferences.getInstance();\n  final user = FirebaseAuth.instance.currentUser;\n  Widget initialScreen = const WelcomePage();\n  \n  await dotenv.load();\n  Gemini.init(apiKey: dotenv.env['GEMINI_API_KEY']!);\n\n  if (user != null) {\n    final role = prefs.getString('lastRole') ?? 'user';\n    if (role == 'user') {\n      initialScreen = const UserBottomNav();\n    } else if (role == 'caretaker') {\n      initialScreen = const CareTaker();\n    } else if (role == 'admin') {\n      initialScreen = const AdminBottomNav();\n    }\n  }\n\n  runApp(MyApp(initialScreen: initialScreen));\n}\n\nclass MyApp extends StatelessWidget {\n  final Widget initialScreen;\n\n  const MyApp({super.key, required this.initialScreen});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'DVMA',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: initialScreen,\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "register_page.dart": {
      "_text": "// lib/register_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\n\nclass RegisterPage extends StatefulWidget {\n  final String role;\n  const RegisterPage({super.key, required this.role});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final TextEditingController nameController = TextEditingController();\n  final TextEditingController usernameController = TextEditingController();\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final TextEditingController phoneController = TextEditingController();\n\n  // Caretaker specific (keep minimal)\n  final TextEditingController experienceYearsController = TextEditingController();\n\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _loading = false;\n\n  Future<void> _register() async {\n    setState(() => _loading = true);\n    try {\n      final username = usernameController.text.trim();\n      final phone = phoneController.text.trim();\n      final snapUsername = await _firestore\n          .collection(widget.role)\n          .where('username', isEqualTo: username)\n          .get();\n      if (snapUsername.docs.isNotEmpty) throw 'Username already exists';\n\n      final snapPhone = await _firestore\n          .collection(widget.role)\n          .where('phoneNo', isEqualTo: phone)\n          .get();\n      if (snapPhone.docs.isNotEmpty) throw 'Phone number already exists';\n\n      final credential = await _auth.createUserWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n      if (uid != null) {\n        Map<String, dynamic> data = {\n          'uid': uid,\n          'fullName': nameController.text.trim(),\n          'username': username,\n          'email': emailController.text.trim(),\n          'phoneNo': phone,\n          'createdAt': Timestamp.now(),\n          'currentConnectionId': null,\n          'emergencyContacts': [],\n          'members': [],\n          'reports_sent': [],\n          'playerIds': [],\n          'isBanned': false,\n        };\n        if (widget.role == 'caretaker') {\n          data.addAll({\n            'experienceYears': int.tryParse(experienceYearsController.text.trim()) ?? 0,\n            'isApprove': false,\n            'isRemove': false,\n            'roadmap': [],\n          });\n        }\n        await _firestore.collection(widget.role).doc(uid).set(data);\n        // Add player ID\n        final playerId = OneSignal.User.pushSubscription.id;\n        if (playerId != null) {\n          await _firestore.collection(widget.role).doc(uid).update({\n            'playerIds': FieldValue.arrayUnion([playerId]),\n          });\n        }\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Registration successful')),\n          );\n        }\n        Navigator.pop(context);\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Registration failed: $e')));\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: true, // Ensure content resizes when keyboard appears\n      appBar: AppBar(\n        title: Text('Register as ${widget.role.toUpperCase()}'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Registration Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              _buildTextField(nameController, 'Full Name', Icons.person),\n              _buildTextField(usernameController, 'Username', Icons.alternate_email),\n              _buildTextField(emailController, 'Email', Icons.email),\n              _buildTextField(passwordController, 'Password', Icons.lock, obscureText: true),\n              _buildTextField(phoneController, 'Phone Number', Icons.phone, keyboardType: TextInputType.phone),\n              if (widget.role == 'caretaker') ...[\n                const SizedBox(height: 24),\n                const Text(\n                  'Caretaker Details',\n                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n                ),\n                const SizedBox(height: 8),\n                _buildTextField(experienceYearsController, 'Experience Years', Icons.work_history, keyboardType: TextInputType.number),\n              ],\n              const SizedBox(height: 32),\n              _loading\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _register,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: Text('Register as ${widget.role}', style: const TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {bool obscureText = false, TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        obscureText: obscureText,\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "welcome_page.dart": {
      "_text": "import 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'login_page.dart';\n\nclass WelcomePage extends StatelessWidget {\n  const WelcomePage({Key? key}) : super(key: key);\n\n  void _navigateTo(BuildContext context, String role) {\n    Navigator.push(\n      context,\n      MaterialPageRoute(\n        builder: (context) => LoginPage(role: role),\n      ),\n    );\n  }\n\n  void _showAdminDialog(BuildContext context) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Admin Access'),\n        content: const Text('Are you sure you want to access Admin login?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: const Text('Cancel'),\n          ),\n          TextButton(\n            onPressed: () {\n              Navigator.pop(context);\n              _navigateTo(context, 'admin');\n            },\n            child: const Text('Proceed'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: const BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.blueAccent, Colors.lightBlue],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SafeArea(\n          child: Center(\n            child: Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  GestureDetector(\n                    onLongPress: () => _showAdminDialog(context),\n                    child: const Text(\n                      'Welcome to DVMA',\n                      style: TextStyle(\n                        fontSize: 32,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                        letterSpacing: 1.2,\n                        shadows: [\n                          Shadow(\n                            blurRadius: 10.0,\n                            color: Colors.black26,\n                            offset: Offset(2.0, 2.0),\n                          ),\n                        ],\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ).animate().fadeIn(duration: 800.ms).slideY(begin: -0.2),\n                  const SizedBox(height: 16),\n                  const Text(\n                    'Select your role to continue',\n                    style: TextStyle(\n                      fontSize: 18,\n                      color: Colors.white70,\n                      fontStyle: FontStyle.italic,\n                    ),\n                  ).animate().fadeIn(duration: 1000.ms).slideY(begin: 0.2),\n                  const SizedBox(height: 48),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.person,\n                    label: 'I am a User',\n                    role: 'user',\n                    gradient: const LinearGradient(\n                      colors: [Colors.blue, Colors.blueAccent],\n                    ),\n                  ),\n                  const SizedBox(height: 20),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.volunteer_activism,\n                    label: 'I am a Caretaker',\n                    role: 'caretaker',\n                    gradient: const LinearGradient(\n                      colors: [Colors.green, Colors.greenAccent],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRoleButton({\n    required BuildContext context,\n    required IconData icon,\n    required String label,\n    required String role,\n    required LinearGradient gradient,\n  }) {\n    return Card(\n      elevation: 8,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: InkWell(\n        onTap: () => _navigateTo(context, role),\n        borderRadius: BorderRadius.circular(12),\n        child: Container(\n          decoration: BoxDecoration(\n            gradient: gradient,\n            borderRadius: BorderRadius.circular(12),\n          ),\n          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),\n          child: Row(\n            children: [\n              Icon(icon, size: 30, color: Colors.white),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Text(\n                  label,\n                  style: const TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.w600,\n                    color: Colors.white,\n                  ),\n                ),\n              ),\n              const Icon(Icons.arrow_forward, color: Colors.white),\n            ],\n          ),\n        ),\n      ),\n    ).animate().scale(duration: 600.ms, delay: 200.ms, curve: Curves.easeOut);\n  }\n}",
      "_encoding": "utf-8"
    }
  }
}