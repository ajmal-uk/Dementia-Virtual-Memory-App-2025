{
  "lib": {
    "user": {
      "caretaker": {
        "caretaker_screen.dart": {
          "_text": "// lib/user/caretaker/caretaker_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:url_launcher/url_launcher.dart';\n \nimport '../../utils/notification_helper.dart';\n \nclass CaretakerScreen extends StatefulWidget {\n  const CaretakerScreen({super.key});\n \n  @override\n  State<CaretakerScreen> createState() => _CaretakerScreenState();\n}\n \nclass _CaretakerScreenState extends State<CaretakerScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  String? _currentConnectionId;\n  Map<String, dynamic>? _connectedCaretaker;\n  List<QueryDocumentSnapshot> _availableCaretakers = [];\n  bool _isLoading = true;\n  bool _hasError = false;\n \n  @override\n  void initState() {\n    super.initState();\n    _loadData();\n  }\n \n  Future<void> _loadData() async {\n    if (!mounted) return;\n    setState(() => _isLoading = true);\n \n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final userDoc = await _firestore.collection('user').doc(uid).get();\n        if (!userDoc.exists) {\n          if (mounted) {\n            setState(() {\n              _isLoading = false;\n              _hasError = true;\n            });\n          }\n          return;\n        }\n        \n        _currentConnectionId = userDoc.data()?['currentConnectionId'];\n \n        if (_currentConnectionId != null) {\n          final connectionDoc = await _firestore\n              .collection('connections')\n              .doc(_currentConnectionId)\n              .get();\n          if (connectionDoc.exists) {\n            final status = connectionDoc.data()?['status'];\n            if (status == 'unbind_requested') {\n              // Show dialog for unbind request\n              if (mounted) {\n                showDialog(\n                  context: context,\n                  builder: (context) => AlertDialog(\n                    title: const Text('Unbind Request Pending'),\n                    content: const Text(\n                      'An unbind request is pending confirmation from the caretaker.',\n                    ),\n                    actions: [\n                      TextButton(\n                        onPressed: () => Navigator.pop(context),\n                        child: const Text('OK'),\n                      ),\n                    ],\n                  ),\n                );\n                setState(() {\n                  _connectedCaretaker = null;\n                  _isLoading = false;\n                });\n              }\n            } else {\n              final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n              if (caretakerUid != null) {\n                final caretakerDoc = await _firestore\n                    .collection('caretaker')\n                    .doc(caretakerUid)\n                    .get();\n                if (mounted) {\n                  setState(() {\n                    _connectedCaretaker = caretakerDoc.data();\n                    _isLoading = false;\n                  });\n                }\n              } else {\n                if (mounted) {\n                  setState(() {\n                    _connectedCaretaker = null;\n                    _isLoading = false;\n                  });\n                }\n              }\n            }\n          } else {\n            if (mounted) {\n              setState(() {\n                _connectedCaretaker = null;\n                _isLoading = false;\n              });\n            }\n          }\n        } else {\n          final query = await _firestore\n              .collection('caretaker')\n              .where('isApprove', isEqualTo: true)\n              .where('isRemove', isEqualTo: false)\n              .where('currentConnectionId', isNull: true)\n              .get();\n          if (mounted) {\n            setState(() {\n              _availableCaretakers = query.docs;\n              _isLoading = false;\n            });\n          }\n        }\n      }\n    } catch (e) {\n      print('Error loading data: $e');\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n        ScaffoldMessenger.of(\n          context,\n        ).showSnackBar(SnackBar(content: Text('Error loading data: $e')));\n      }\n    }\n  }\n \n  Future<void> _sendRequest(String caretakerUid) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid != null) {\n      try {\n        // Check if there's already a pending request\n        final existingRequests = await _firestore\n            .collection('connections')\n            .where('user_uid', isEqualTo: uid)\n            .where('caretaker_uid', isEqualTo: caretakerUid)\n            .where('status', isEqualTo: 'pending')\n            .get();\n        \n        if (existingRequests.docs.isNotEmpty) {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('You already have a pending request to this caretaker')),\n            );\n          }\n          return;\n        }\n \n        await _firestore.collection('connections').add({\n          'user_uid': uid,\n          'caretaker_uid': caretakerUid,\n          'status': 'pending',\n          'timestamp': Timestamp.now(),\n          'confirmedBy': null,\n        });\n \n        // Notify caretaker\n        final caretakerDoc = await _firestore\n            .collection('caretaker')\n            .doc(caretakerUid)\n            .get();\n        final playerIds = List<String>.from(\n          caretakerDoc.data()?['playerIds'] ?? [],\n        );\n        await sendNotification(playerIds, 'New connection request from user');\n \n        // Add to notifications subcollection\n        await _firestore\n            .collection('caretaker')\n            .doc(caretakerUid)\n            .collection('notifications')\n            .add({\n              'type': 'connection_request',\n              'message': 'Connection request from user $uid',\n              'from': uid,\n              'to': caretakerUid,\n              'createdAt': Timestamp.now(),\n              'isRead': false,\n            });\n \n        if (mounted) {\n          ScaffoldMessenger.of(\n            context,\n          ).showSnackBar(const SnackBar(content: Text('Request sent!')));\n          _loadData();\n        }\n      } catch (e) {\n        print('Error sending request: $e');\n        if (mounted) {\n          ScaffoldMessenger.of(\n            context,\n          ).showSnackBar(SnackBar(content: Text('Error: $e')));\n        }\n      }\n    }\n  }\n \n  Future<void> _requestUnbind() async {\n    if (!mounted) return;\n \n    if (_currentConnectionId != null) {\n      try {\n        await _firestore\n            .collection('connections')\n            .doc(_currentConnectionId)\n            .update({\n              'status': 'unbind_requested',\n              'confirmedBy': _auth.currentUser?.uid,\n            });\n \n        // Notify caretaker\n        final connectionDoc = await _firestore\n            .collection('connections')\n            .doc(_currentConnectionId)\n            .get();\n        final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n        if (caretakerUid != null) {\n          final caretakerDoc = await _firestore\n              .collection('caretaker')\n              .doc(caretakerUid)\n              .get();\n          final playerIds = List<String>.from(\n            caretakerDoc.data()?['playerIds'] ?? [],\n          );\n          await sendNotification(playerIds, 'Unbind request from user');\n \n          await _firestore\n              .collection('caretaker')\n              .doc(caretakerUid)\n              .collection('notifications')\n              .add({\n                'type': 'unbind_request',\n                'message': 'Unbind request from user',\n                'from': _auth.currentUser?.uid,\n                'to': caretakerUid,\n                'createdAt': Timestamp.now(),\n                'isRead': false,\n              });\n        }\n \n        if (mounted) {\n          ScaffoldMessenger.of(\n            context,\n          ).showSnackBar(const SnackBar(content: Text('Unbind request sent')));\n          _loadData();\n        }\n      } catch (e) {\n        print('Error requesting unbind: $e');\n        if (mounted) {\n          ScaffoldMessenger.of(\n            context,\n          ).showSnackBar(SnackBar(content: Text('Error: $e')));\n        }\n      }\n    }\n  }\n \n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return const Scaffold(body: Center(child: CircularProgressIndicator()));\n    }\n \n    if (_hasError) {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Caretaker')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Icon(Icons.error, size: 64, color: Colors.red),\n              const SizedBox(height: 16),\n              const Text(\n                'Error loading caretaker data',\n                style: TextStyle(fontSize: 18, color: Colors.red),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: _loadData,\n                child: const Text('Retry'),\n              ),\n            ],\n          ),\n        ),\n      );\n    }\n \n    if (_connectedCaretaker != null) {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Connected Caretaker')),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              CircleAvatar(\n                radius: 50,\n                backgroundImage: NetworkImage(\n                  _connectedCaretaker!['profileImageUrl'] ?? '',\n                ),\n                onBackgroundImageError: (_, __) => const Icon(Icons.person, size: 50),\n              ),\n              const SizedBox(height: 16),\n              Text(\n                _connectedCaretaker!['fullName'] ?? '',\n                style: const TextStyle(fontSize: 20),\n              ),\n              Text(\n                'Experience: ${_connectedCaretaker!['experienceYears'] ?? 0} years',\n              ),\n              const SizedBox(height: 20),\n              ElevatedButton(\n                onPressed: _requestUnbind,\n                child: const Text('Request Unbind'),\n              ),\n              const SizedBox(height: 10),\n              IconButton(\n                icon: const Icon(Icons.phone),\n                onPressed: () async {\n                  final phone = _connectedCaretaker!['phoneNo'];\n                  if (phone != null && phone.isNotEmpty) {\n                    final url = Uri.parse('tel:$phone');\n                    if (await canLaunchUrl(url)) {\n                      await launchUrl(url);\n                    } else {\n                      if (mounted) {\n                        ScaffoldMessenger.of(context).showSnackBar(\n                          const SnackBar(content: Text('Could not launch phone app')),\n                        );\n                      }\n                    }\n                  }\n                },\n              ),\n            ],\n          ),\n        ),\n      );\n    } else {\n      return Scaffold(\n        appBar: AppBar(title: const Text('Available Caretakers')),\n        body: _availableCaretakers.isEmpty\n            ? const Center(\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    Icon(Icons.person_off, size: 64, color: Colors.grey),\n                    SizedBox(height: 16),\n                    Text(\n                      'No available caretakers at the moment',\n                      style: TextStyle(fontSize: 18, color: Colors.grey),\n                    ),\n                  ],\n                ),\n              )\n            : RefreshIndicator(\n                onRefresh: _loadData,\n                child: ListView.builder(\n                  itemCount: _availableCaretakers.length,\n                  itemBuilder: (context, index) {\n                    final caretaker =\n                        _availableCaretakers[index].data()\n                            as Map<String, dynamic>;\n                    final caretakerUid = _availableCaretakers[index].id;\n                    return ListTile(\n                      leading: CircleAvatar(\n                        backgroundImage: NetworkImage(\n                          caretaker['profileImageUrl'] ?? '',\n                        ),\n                        onBackgroundImageError: (_, __) => const Icon(Icons.person),\n                      ),\n                      title: Text(caretaker['fullName'] ?? ''),\n                      subtitle: Text(\n                        'Experience: ${caretaker['experienceYears'] ?? 0} years',\n                      ),\n                      trailing: Row(\n                        mainAxisSize: MainAxisSize.min,\n                        children: [\n                          IconButton(\n                            icon: const Icon(Icons.phone),\n                            onPressed: () async {\n                              final phone = caretaker['phoneNo'];\n                              if (phone != null && phone.isNotEmpty) {\n                                final url = Uri.parse('tel:$phone');\n                                if (await canLaunchUrl(url)) {\n                                  await launchUrl(url);\n                                } else {\n                                  if (mounted) {\n                                    ScaffoldMessenger.of(context).showSnackBar(\n                                      const SnackBar(content: Text('Could not launch phone app')),\n                                    );\n                                  }\n                                }\n                              }\n                            },\n                          ),\n                          ElevatedButton(\n                            child: const Text('Send Request'),\n                            onPressed: () => _sendRequest(caretakerUid),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                ),\n              ),\n      );\n    }\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "family": {
        "family_add_screen.dart": {
          "_text": "// lib/user/family/family_add_screen.dart\nimport 'dart:io';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass AddScreen extends StatefulWidget {\n  const AddScreen({Key? key}) : super(key: key);\n\n  @override\n  State<AddScreen> createState() => _AddScreenState();\n}\n\nclass _AddScreenState extends State<AddScreen> {\n  final _nameController = TextEditingController();\n  final _relationController = TextEditingController();\n  final _phoneController = TextEditingController();\n  File? _image;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      if (mounted) {\n        ScaffoldMessenger.of(context)\n            .showSnackBar(const SnackBar(content: Text('Permission denied')));\n      }\n      return;\n    }\n    final picked = await _picker.pickImage(source: ImageSource.gallery);\n    if (picked != null) setState(() => _image = File(picked.path));\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_image == null) return '';\n    return cloudinary.uploadFile(CloudinaryFile.fromFile(_image!.path)).then(\n      (r) => r.secureUrl,\n      onError: (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context)\n              .showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n        }\n        return '';\n      },\n    );\n  }\n\n  Future<void> _save() async {\n    if (_nameController.text.trim().isEmpty ||\n        _relationController.text.trim().isEmpty ||\n        _phoneController.text.trim().isEmpty) {\n      ScaffoldMessenger.of(context)\n          .showSnackBar(const SnackBar(content: Text('All fields are required')));\n      return;\n    }\n\n    // show loading dialog to prevent “freeze” perception\n    showDialog(\n      barrierDismissible: false,\n      context: context,\n      builder: (_) =>\n          const Center(child: CircularProgressIndicator()),\n    );\n\n    final url = await _uploadImage();\n    if (!mounted) return;\n\n    Navigator.pop(context); // close loading\n    Navigator.pop(context, {\n      'name': _nameController.text.trim(),\n      'relation': _relationController.text.trim(),\n      'phone': _phoneController.text.trim(),\n      'imageUrl': url ?? '',\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.blue,\n        title: const Text('Add Member', style: TextStyle(color: Colors.white)),\n      ),\n      body: Container(\n        color: Colors.lightBlue[100],\n        padding: const EdgeInsets.all(16),\n        child: ListView(\n          children: [\n            TextField(\n              controller: _nameController,\n              decoration: _fieldDecoration('Name'),\n            ),\n            const SizedBox(height: 10),\n            TextField(\n              controller: _relationController,\n              decoration: _fieldDecoration('Relation'),\n            ),\n            const SizedBox(height: 10),\n            TextField(\n              controller: _phoneController,\n              keyboardType: TextInputType.phone,\n              decoration: _fieldDecoration('Phone'),\n            ),\n            const SizedBox(height: 10),\n            ElevatedButton(onPressed: _pickImage, child: const Text('Pick Image')),\n            if (_image != null)\n              Padding(\n                padding: const EdgeInsets.only(top: 8),\n                child: Text('Selected: ${_image!.path.split('/').last}'),\n              ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: _save,\n              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),\n              child: const Text('Add', style: TextStyle(color: Colors.white)),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  InputDecoration _fieldDecoration(String label) => InputDecoration(\n        labelText: label,\n        filled: true,\n        fillColor: Colors.grey[200],\n        border: OutlineInputBorder(\n          borderRadius: BorderRadius.circular(10),\n          borderSide: BorderSide.none,\n        ),\n      );\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}\n",
          "_encoding": "utf-8"
        },
        "family_edit_screen.dart": {
          "_text": "// lib/user/family/family_edit_screen.dart\nimport 'dart:io';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass EditScreen extends StatefulWidget {\n  final Map<String, dynamic> member;\n  const EditScreen({Key? key, required this.member}) : super(key: key);\n\n  @override\n  State<EditScreen> createState() => _EditScreenState();\n}\n\nclass _EditScreenState extends State<EditScreen> {\n  late TextEditingController _nameController;\n  late TextEditingController _relationController;\n  late TextEditingController _phoneController;\n  String _imageUrl = '';\n  File? _newImage;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n\n  @override\n  void initState() {\n    super.initState();\n    _nameController = TextEditingController(text: widget.member['name']);\n    _relationController = TextEditingController(text: widget.member['relation']);\n    _phoneController = TextEditingController(text: widget.member['phone']);\n    _imageUrl = widget.member['imageUrl'] ?? '';\n  }\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      ScaffoldMessenger.of(context)\n          .showSnackBar(const SnackBar(content: Text('Permission denied')));\n      return;\n    }\n    final picked = await _picker.pickImage(source: ImageSource.gallery);\n    if (picked != null) setState(() => _newImage = File(picked.path));\n  }\n\n  Future<String> _uploadImage() async {\n    if (_newImage == null) return _imageUrl;\n    try {\n      final r = await cloudinary.uploadFile(CloudinaryFile.fromFile(_newImage!.path));\n      return r.secureUrl;\n    } catch (e) {\n      ScaffoldMessenger.of(context)\n          .showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n      return _imageUrl;\n    }\n  }\n\n  Future<void> _save() async {\n    showDialog(\n      barrierDismissible: false,\n      context: context,\n      builder: (_) => const Center(child: CircularProgressIndicator()),\n    );\n    final url = await _uploadImage();\n    if (!mounted) return;\n    Navigator.pop(context);\n    Navigator.pop(context, {\n      'name': _nameController.text.trim(),\n      'relation': _relationController.text.trim(),\n      'phone': _phoneController.text.trim(),\n      'imageUrl': url,\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(backgroundColor: Colors.blue, title: const Text('Edit Member', style: TextStyle(color: Colors.white))),\n      body: Container(\n        color: Colors.lightBlue[100],\n        padding: const EdgeInsets.all(16),\n        child: ListView(\n          children: [\n            TextField(controller: _nameController, decoration: _dec('Name')),\n            const SizedBox(height: 10),\n            TextField(controller: _relationController, decoration: _dec('Relation')),\n            const SizedBox(height: 10),\n            TextField(controller: _phoneController, decoration: _dec('Phone')),\n            const SizedBox(height: 10),\n            ElevatedButton(onPressed: _pickImage, child: const Text('Pick New Image')),\n            if (_newImage != null) Text('Selected: ${_newImage!.path.split('/').last}'),\n            if (_imageUrl.isNotEmpty) Text('Current URL: $_imageUrl'),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: _save,\n              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),\n              child: const Text('Save', style: TextStyle(color: Colors.white)),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  InputDecoration _dec(String label) => InputDecoration(\n        labelText: label,\n        filled: true,\n        fillColor: Colors.grey[200],\n        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10), borderSide: BorderSide.none),\n      );\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}\n",
          "_encoding": "utf-8"
        },
        "family_scanner_screen.dart": {
          "_text": "// lib/user/family/family_scanner_screen.dart\nimport 'dart:convert';\nimport 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:camera/camera.dart';\nimport 'package:http/http.dart' as http;\n \nclass ScannerScreen extends StatefulWidget {\n  final List<Map<String, dynamic>> members;\n  const ScannerScreen({super.key, required this.members});\n \n  @override\n  State<ScannerScreen> createState() => _ScannerScreenState();\n}\n \nclass _ScannerScreenState extends State<ScannerScreen> {\n  late CameraController _controller;\n  late Future<void> _initializeControllerFuture;\n  XFile? _capturedImage;\n  bool _hasCameraError = false;\n \n  @override\n  void initState() {\n    super.initState();\n    _initializeCamera();\n  }\n \n  Future<void> _initializeCamera() async {\n    try {\n      final cameras = await availableCameras();\n      if (cameras.isEmpty) {\n        setState(() {\n          _hasCameraError = true;\n        });\n        return;\n      }\n      \n      final firstCamera = cameras.first;\n      _controller = CameraController(\n        firstCamera,\n        ResolutionPreset.medium,\n        enableAudio: false,\n      );\n      \n      // Assign the future immediately\n      _initializeControllerFuture = _controller.initialize();\n \n      // Wait for initialization to complete\n      await _initializeControllerFuture;\n \n      if (mounted) setState(() {});\n    } catch (e) {\n      print('Error initializing camera: $e');\n      setState(() {\n        _hasCameraError = true;\n      });\n    }\n  }\n \n  @override\n  void dispose() {\n    try {\n      _controller.dispose();\n    } catch (e) {\n      print('Error disposing camera: $e');\n    }\n    super.dispose();\n  }\n \n  Future<void> _captureImage() async {\n    try {\n      // Wait until controller is initialized\n      await _initializeControllerFuture;\n \n      final image = await _controller.takePicture();\n      setState(() {\n        _capturedImage = image;\n      });\n    } catch (e) {\n      print('Error capturing image: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error capturing image: $e')),\n        );\n      }\n    }\n  }\n \n  Future<void> _sendToApi() async {\n    if (_capturedImage == null) return;\n \n    try {\n      final imageBytes = await _capturedImage!.readAsBytes();\n      final base64Image = base64Encode(imageBytes);\n \n      final response = await http.post(\n        Uri.parse('https://url.com/api/recognize'),\n        body: {\n          'members': jsonEncode(widget.members.map((m) => {\n            'memberName': m['name'],\n            'memberRelation': m['relation'],\n            'memberImage': m['imageUrl'],  // Sending URL as per updated API expectation\n          }).toList()),\n          'imageUrl': 'data:image/jpeg;base64,$base64Image',\n        },\n      ).timeout(const Duration(seconds: 30));\n \n      if (response.statusCode == 200) {\n        final result = jsonDecode(response.body);\n        if (result['matchFound']) {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              SnackBar(content: Text('Match found: ${result['memberName']}')),\n            );\n          }\n        } else {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('No matches found')),\n            );\n          }\n        }\n      } else {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Failed to process image')),\n          );\n        }\n      }\n    } catch (e) {\n      print('Error sending image to API: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error sending image to API: $e')),\n        );\n      }\n    }\n  }\n \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.blue,\n        leading: IconButton(\n          icon: const Icon(Icons.arrow_back, color: Colors.white),\n          onPressed: () => Navigator.pop(context),\n        ),\n        title: const Text('Scan', style: TextStyle(color: Colors.white)),\n      ),\n      body: Container(\n        color: Colors.lightBlue[100],\n        child: _hasCameraError\n            ? Center(\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    const Icon(Icons.camera_alt, size: 64, color: Colors.red),\n                    const SizedBox(height: 16),\n                    const Text(\n                      'Camera not available',\n                      style: TextStyle(fontSize: 18, color: Colors.red),\n                    ),\n                    const SizedBox(height: 16),\n                    ElevatedButton(\n                      onPressed: () {\n                        setState(() {\n                          _hasCameraError = false;\n                        });\n                        _initializeCamera();\n                      },\n                      child: const Text('Retry'),\n                    ),\n                  ],\n                ),\n              )\n            : _capturedImage == null\n                ? FutureBuilder<void>(\n                    future: _initializeControllerFuture,\n                    builder: (context, snapshot) {\n                      if (snapshot.connectionState == ConnectionState.done) {\n                        if (snapshot.hasError) {\n                          return Center(\n                            child: Column(\n                              mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                                const Icon(Icons.error, size: 64, color: Colors.red),\n                                const SizedBox(height: 16),\n                                Text(\n                                  'Error initializing camera: ${snapshot.error}',\n                                  style: const TextStyle(fontSize: 16, color: Colors.red),\n                                  textAlign: TextAlign.center,\n                                ),\n                                const SizedBox(height: 16),\n                                ElevatedButton(\n                                  onPressed: () {\n                                    setState(() {});\n                                    _initializeCamera();\n                                  },\n                                  child: const Text('Retry'),\n                                ),\n                              ],\n                            ),\n                          );\n                        }\n                        return CameraPreview(_controller);\n                      } else if (snapshot.connectionState == ConnectionState.waiting) {\n                        return const Center(child: CircularProgressIndicator());\n                      } else {\n                        return const Center(child: Text('Initializing camera...'));\n                      }\n                    },\n                  )\n                : Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Image.file(\n                        File(_capturedImage!.path),\n                        height: 300,\n                        errorBuilder: (context, error, stackTrace) {\n                          return const Icon(Icons.broken_image, size: 100, color: Colors.grey);\n                        },\n                      ),\n                      const SizedBox(height: 20),\n                      Row(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          ElevatedButton(\n                            onPressed: _sendToApi,\n                            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),\n                            child: const Text('OK', style: TextStyle(color: Colors.white)),\n                          ),\n                          const SizedBox(width: 20),\n                          ElevatedButton(\n                            onPressed: () {\n                              setState(() {\n                                _capturedImage = null;\n                              });\n                            },\n                            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n                            child: const Text('Retake', style: TextStyle(color: Colors.white)),\n                          ),\n                        ],\n                      ),\n                    ],\n                  ),\n      ),\n      floatingActionButton: _capturedImage == null && !_hasCameraError\n          ? FloatingActionButton(\n              onPressed: _captureImage,\n              backgroundColor: Colors.blue,\n              child: const Icon(Icons.camera),\n            )\n          : null,\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_screen.dart": {
          "_text": "// lib/user/family/family_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nimport 'family_add_screen.dart';\nimport 'family_edit_screen.dart';\nimport 'family_scanner_screen.dart';\n\nclass FamilyScreen extends StatefulWidget {\n  const FamilyScreen({super.key});\n\n  @override\n  State<FamilyScreen> createState() => _FamilyScreenState();\n}\n\nclass _FamilyScreenState extends State<FamilyScreen> {\n  final _searchController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  List<Map<String, dynamic>> _members = [];\n  String _search = '';\n  bool _isLoading = true;\n  bool _hasError = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadMembers();\n    _searchController.addListener(\n      () => setState(() => _search = _searchController.text.toLowerCase()),\n    );\n  }\n\n  Future<void> _loadMembers() async {\n    if (!mounted) return;\n    setState(() {\n      _isLoading = true;\n      _hasError = false;\n    });\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid == null) throw Exception('User not logged in');\n\n      final docRef = _firestore.collection('user').doc(uid);\n      final doc = await docRef.get();\n\n      if (!doc.exists) {\n        // ensure document exists with empty array\n        await docRef.set({'members': []});\n        _members = [];\n      } else {\n        final data = doc.data();\n        _members = List<Map<String, dynamic>>.from(data?['members'] ?? []);\n      }\n      if (mounted) setState(() => _isLoading = false);\n    } catch (e) {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    }\n  }\n\n  Future<void> _updateMembers(List<Map<String, dynamic>> newMembers) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n    try {\n      await _firestore.collection('user').doc(uid).update({\n        'members': newMembers,\n      });\n      await _loadMembers();\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(\n          context,\n        ).showSnackBar(SnackBar(content: Text('Error updating members: $e')));\n      }\n    }\n  }\n\n  List<Map<String, dynamic>> get _filteredMembers {\n    if (_search.isEmpty) return _members;\n    return _members\n        .where(\n          (m) =>\n              (m['name'] ?? '').toLowerCase().contains(_search) ||\n              (m['relation'] ?? '').toLowerCase().contains(_search),\n        )\n        .toList();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.blue,\n        title: const Text('Family', style: TextStyle(color: Colors.white)),\n      ),\n      body: Container(\n        color: Colors.lightBlue[100],\n        child: Column(\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(8.0),\n              child: TextField(\n                controller: _searchController,\n                decoration: InputDecoration(\n                  hintText: 'search',\n                  filled: true,\n                  fillColor: Colors.grey[200],\n                  border: OutlineInputBorder(\n                    borderRadius: BorderRadius.circular(10),\n                    borderSide: BorderSide.none,\n                  ),\n                  prefixIcon: const Icon(Icons.search),\n                ),\n              ),\n            ),\n            Expanded(\n              child: _isLoading\n                  ? const Center(child: CircularProgressIndicator())\n                  : _hasError\n                  ? Center(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          const Text(\n                            'Error loading family members',\n                            style: TextStyle(fontSize: 18, color: Colors.red),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton(\n                            onPressed: _loadMembers,\n                            child: const Text('Retry'),\n                          ),\n                        ],\n                      ),\n                    )\n                  : _filteredMembers.isEmpty\n                  ? const Center(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Icon(\n                            Icons.family_restroom,\n                            size: 64,\n                            color: Colors.grey,\n                          ),\n                          SizedBox(height: 16),\n                          Text(\n                            'No family members yet',\n                            style: TextStyle(fontSize: 18, color: Colors.grey),\n                          ),\n                          SizedBox(height: 8),\n                          Text(\n                            'Add your first family member',\n                            style: TextStyle(fontSize: 14, color: Colors.grey),\n                          ),\n                        ],\n                      ),\n                    )\n                  : ListView.builder(\n                      itemCount: _filteredMembers.length,\n                      itemBuilder: (context, index) {\n                        final member = _filteredMembers[index];\n                        return ListTile(\n                          leading: CircleAvatar(\n                            backgroundImage:\n                                (member['imageUrl'] ?? '').isNotEmpty\n                                ? NetworkImage(member['imageUrl'])\n                                : null,\n                            child: (member['imageUrl'] ?? '').isEmpty\n                                ? const Icon(Icons.person)\n                                : null,\n                          ),\n                          title: Text(member['name'] ?? ''),\n                          subtitle: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              Text('relation: ${member['relation'] ?? ''}'),\n                              Text('phone: ${member['phone'] ?? ''}'),\n                            ],\n                          ),\n                          trailing: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              IconButton(\n                                icon: const Icon(\n                                  Icons.edit,\n                                  color: Colors.blue,\n                                ),\n                                onPressed: () async {\n                                  final updatedMember = await Navigator.push(\n                                    context,\n                                    MaterialPageRoute(\n                                      builder: (context) =>\n                                          EditScreen(member: member),\n                                    ),\n                                  );\n                                  if (updatedMember != null) {\n                                    final newMembers =\n                                        List<Map<String, dynamic>>.from(\n                                          _members,\n                                        );\n                                    newMembers[_members.indexOf(member)] =\n                                        updatedMember;\n                                    await _updateMembers(newMembers);\n                                  }\n                                },\n                              ),\n                              IconButton(\n                                icon: const Icon(\n                                  Icons.delete,\n                                  color: Colors.red,\n                                ),\n                                onPressed: () async {\n                                  final confirm = await showDialog<bool>(\n                                    context: context,\n                                    builder: (context) => AlertDialog(\n                                      title: const Text('Delete Family Member'),\n                                      content: const Text('Are you sure?'),\n                                      actions: [\n                                        TextButton(\n                                          onPressed: () =>\n                                              Navigator.pop(context, false),\n                                          child: const Text('Cancel'),\n                                        ),\n                                        ElevatedButton(\n                                          style: ElevatedButton.styleFrom(\n                                            backgroundColor: Colors.red,\n                                          ),\n                                          onPressed: () =>\n                                              Navigator.pop(context, true),\n                                          child: const Text('Delete'),\n                                        ),\n                                      ],\n                                    ),\n                                  );\n                                  if (confirm == true) {\n                                    final newMembers =\n                                        List<Map<String, dynamic>>.from(\n                                          _members,\n                                        );\n                                    newMembers.removeAt(\n                                      _members.indexOf(member),\n                                    );\n                                    await _updateMembers(newMembers);\n                                  }\n                                },\n                              ),\n                            ],\n                          ),\n                        );\n                      },\n                    ),\n            ),\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: [\n                  FloatingActionButton(\n                    backgroundColor: Colors.orange,\n                    child: const Icon(Icons.add),\n                    onPressed: () async {\n                      final newMember = await Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => const AddScreen(),\n                        ),\n                      );\n                      if (newMember != null) {\n                        final newMembers = List<Map<String, dynamic>>.from(\n                          _members,\n                        )..add(newMember);\n                        await _updateMembers(newMembers);\n                      }\n                    },\n                  ),\n                  FloatingActionButton(\n                    backgroundColor: Colors.orange,\n                    child: const Icon(Icons.camera_alt),\n                    onPressed: () async {\n                      final result = await Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => ScannerScreen(\n                            members: _members\n                                .map(\n                                  (m) => m.map(\n                                    (k, v) => MapEntry(k, v?.toString() ?? ''),\n                                  ),\n                                )\n                                .toList(),\n                          ),\n                        ),\n                      );\n                      if (result != null && result['matchFound'] && mounted) {\n                        ScaffoldMessenger.of(context).showSnackBar(\n                          SnackBar(\n                            content: Text(\n                              'Match found: ${result['memberName']}',\n                            ),\n                          ),\n                        );\n                      }\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
          "_encoding": "utf-8"
        }
      },
      "home": {
        "add_task_page.dart": {
          "_text": "// lib/user/home/add_task_page.dart\nimport 'package:flutter/material.dart';\n\nclass AddTaskPage extends StatefulWidget {\n  const AddTaskPage({super.key});\n\n  @override\n  State<AddTaskPage> createState() => _AddTaskPageState();\n}\n\nclass _AddTaskPageState extends State<AddTaskPage> {\n  final TextEditingController _taskController = TextEditingController();\n  final TextEditingController _descController = TextEditingController();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Add Task')),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: _taskController,\n              decoration: const InputDecoration(\n                labelText: 'Task name',\n                border: OutlineInputBorder(),\n              ),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: _descController,\n              decoration: const InputDecoration(\n                labelText: 'Description (optional)',\n                border: OutlineInputBorder(),\n              ),\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () {\n                if (_taskController.text.trim().isEmpty) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(content: Text('Task name cannot be empty')),\n                  );\n                  return;\n                }\n                Navigator.pop(context, {\n                  'task': _taskController.text.trim(),\n                  'description': _descController.text.trim(),\n                });\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}\n",
          "_encoding": "utf-8"
        },
        "edit_task_page.dart": {
          "_text": "// lib/user/home/edit_task_page.dart\nimport 'package:flutter/material.dart';\n\nclass EditTaskPage extends StatefulWidget {\n  final String taskName;\n  final String description;\n\n  const EditTaskPage({super.key, required this.taskName, required this.description});\n\n  @override\n  State<EditTaskPage> createState() => _EditTaskPageState();\n}\n\nclass _EditTaskPageState extends State<EditTaskPage> {\n  late TextEditingController _taskController;\n  late TextEditingController _descController;\n\n  @override\n  void initState() {\n    super.initState();\n    _taskController = TextEditingController(text: widget.taskName);\n    _descController = TextEditingController(text: widget.description);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Edit Task')),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(controller: _taskController, decoration: const InputDecoration(labelText: 'Task name', border: OutlineInputBorder())),\n            const SizedBox(height: 16),\n            TextField(controller: _descController, decoration: const InputDecoration(labelText: 'Description (optional)', border: OutlineInputBorder())),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () => Navigator.pop(context, {'task': _taskController.text.trim(), 'description': _descController.text.trim()}),\n              child: const Text('Save Changes'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "home_screen.dart": {
          "_text": "// lib/user/home/home_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/logger.dart';\n\nimport 'add_task_page.dart';\nimport 'edit_task_page.dart';\nimport '../notifications/notifications_screen.dart';\n\nfinal logger = Logger();\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({super.key});\n  @override\n  State<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  String _selectedTab = 'All';\n\n  @override\n  void initState() {\n    super.initState();\n    _checkBanned();\n  }\n\n  Future<void> _checkBanned() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n    try {\n      final doc = await _firestore.collection('user').doc(uid).get();\n      if (doc.data()?['isBanned'] == true) {\n        await _auth.signOut();\n        if (mounted) Navigator.pushReplacementNamed(context, '/welcome');\n      }\n    } catch (e) {\n      // If permission denied here, user must update Firestore security rules.\n      logger.e('Error checking banned status: $e');\n    }\n  }\n\n  /// Note: to avoid requiring a composite Firestore index (completed ASC + createdAt DESC),\n  /// we subscribe to documents ordered by createdAt (single-field index, auto-built)\n  /// and apply the completed filter client-side.\n  Stream<List<QueryDocumentSnapshot<Map<String, dynamic>>>> _getTasksStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.value([]);\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n\n    // Order by createdAt (single-field ordering — does not require a composite index).\n    final baseStream = coll.orderBy('createdAt', descending: true).snapshots();\n\n    // Map to documents and apply client-side filter based on _selectedTab.\n    return baseStream.map((snap) {\n      final allDocs = snap.docs;\n      if (_selectedTab == 'Completed') {\n        return allDocs\n            .where((d) => (d.data()['completed'] as bool? ?? false))\n            .toList();\n      } else if (_selectedTab == 'InCompleted') {\n        return allDocs\n            .where((d) => !(d.data()['completed'] as bool? ?? false))\n            .toList();\n      } else {\n        return allDocs;\n      }\n    });\n  }\n\n  /// Get remaining tasks. If Firestore returns an index error for the `where` query,\n  /// fallback to fetching all and counting client-side.\n  Future<int> _getRemaining() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return 0;\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n\n    try {\n      // Preferred: server-side count by where().\n      final snap = await coll.where('completed', isEqualTo: false).get();\n      return snap.docs.length;\n    } catch (e) {\n      final err = e.toString();\n      logger.w('Error getting remaining tasks (trying fallback): $err');\n      // If it's index-related or any other issue, fallback to downloading all docs and counting.\n      try {\n        final all = await coll.get();\n        final count = all.docs\n            .where((d) => !(d.data()['completed'] as bool? ?? false))\n            .length;\n        return count;\n      } catch (e2) {\n        logger.e('Fallback failed getting remaining tasks: $e2');\n        return 0;\n      }\n    }\n  }\n\n  Future<void> _deleteTask(String id) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n    final confirm = await showDialog<bool>(\n      context: context,\n      builder: (_) => AlertDialog(\n        title: const Text('Delete Task'),\n        content: const Text('Are you sure?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context, false),\n            child: const Text('Cancel'),\n          ),\n          ElevatedButton(\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n            onPressed: () => Navigator.pop(context, true),\n            child: const Text('Delete'),\n          ),\n        ],\n      ),\n    );\n    if (confirm == true) {\n      try {\n        await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection('to_dos')\n            .doc(id)\n            .delete();\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(\n            context,\n          ).showSnackBar(SnackBar(content: Text('Error deleting task: $e')));\n        }\n      }\n    }\n  }\n\n  Future<void> _toggleTaskStatus(String id, bool current) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n    try {\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('to_dos')\n          .doc(id)\n          .update({'completed': !current});\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(\n          context,\n        ).showSnackBar(SnackBar(content: Text('Error updating task: $e')));\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: [\n          // top bar\n          Container(\n            color: Colors.blue,\n            padding: EdgeInsets.only(\n              top: MediaQuery.of(context).padding.top,\n              bottom: 8,\n            ),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.end,\n              children: [\n                IconButton(\n                  icon: const Icon(Icons.notifications, color: Colors.yellow),\n                  onPressed: () => Navigator.push(\n                    context,\n                    MaterialPageRoute(\n                      builder: (_) => const NotificationsScreen(),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n\n          // remaining count\n          FutureBuilder<int>(\n            future: _getRemaining(),\n            builder: (context, snap) {\n              if (snap.connectionState == ConnectionState.waiting) {\n                return const SizedBox();\n              }\n              if (snap.hasError) {\n                // If permission denied, real fix is to update Firestore rules.\n                final err = snap.error.toString();\n                logger.e('Remaining-count error: $err');\n                return _errorBanner('Error loading remaining count');\n              }\n              final int remaining = snap.data ?? 0;\n              return Container(\n                margin: const EdgeInsets.all(16),\n                padding: const EdgeInsets.symmetric(\n                  horizontal: 32,\n                  vertical: 8,\n                ),\n                decoration: BoxDecoration(\n                  color: Colors.green,\n                  borderRadius: BorderRadius.circular(20),\n                ),\n                child: Text(\n                  '${remaining.toString().padLeft(3, '0')} Remaining',\n                  style: const TextStyle(\n                    fontSize: 24,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n              );\n            },\n          ),\n\n          // filter buttons\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: [\n              _filterButton('All'),\n              _filterButton('InCompleted'),\n              _filterButton('Completed'),\n            ],\n          ),\n\n          // task list (uses client-side filtering to avoid composite index requirement)\n          Expanded(\n            child: StreamBuilder<List<QueryDocumentSnapshot<Map<String, dynamic>>>>(\n              stream: _getTasksStream(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (snapshot.hasError) {\n                  // If permission denied: user must update Firestore rules.\n                  final err = snapshot.error.toString();\n                  logger.e('Task stream error: $err');\n                  final permissionDenied =\n                      err.contains('permission-denied') ||\n                      err.contains('PERMISSION_DENIED');\n                  final needsIndex =\n                      err.contains('requires an index') ||\n                      err.contains('FAILED_PRECONDITION');\n\n                  return Center(\n                    child: Padding(\n                      padding: const EdgeInsets.all(24),\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          Text(\n                            permissionDenied\n                                ? 'Permission error: check Firestore rules for user read access.'\n                                : needsIndex\n                                ? 'Firestore index is missing.\\nCreate composite index: completed ASC + createdAt DESC.'\n                                : 'Failed to load tasks.',\n                            textAlign: TextAlign.center,\n                            style: const TextStyle(fontSize: 16),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton.icon(\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Retry'),\n                            onPressed: () => setState(() {}),\n                          ),\n                        ],\n                      ),\n                    ),\n                  );\n                }\n\n                final docs = snapshot.data ?? [];\n                if (docs.isEmpty) return _emptyState();\n\n                return ListView.builder(\n                  itemCount: docs.length,\n                  itemBuilder: (context, index) {\n                    final doc = docs[index];\n                    final task = doc.data();\n                    final id = doc.id;\n                    final completed = task['completed'] as bool? ?? false;\n                    final description = task['description'] ?? '';\n\n                    return Container(\n                      margin: const EdgeInsets.symmetric(\n                        horizontal: 16,\n                        vertical: 8,\n                      ),\n                      padding: const EdgeInsets.all(16),\n                      decoration: BoxDecoration(\n                        color: completed ? Colors.white : Colors.grey[300],\n                        borderRadius: BorderRadius.circular(20),\n                      ),\n                      child: Row(\n                        children: [\n                          Expanded(\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                Text(\n                                  task['task'] ?? '',\n                                  style: const TextStyle(\n                                    fontSize: 18,\n                                    fontWeight: FontWeight.bold,\n                                  ),\n                                ),\n                                if (description.isNotEmpty)\n                                  Text(\n                                    description,\n                                    style: const TextStyle(\n                                      color: Colors.black54,\n                                    ),\n                                  ),\n                              ],\n                            ),\n                          ),\n                          IconButton(\n                            icon: Icon(\n                              completed\n                                  ? Icons.check_circle\n                                  : Icons.radio_button_unchecked,\n                              color: completed ? Colors.green : Colors.red,\n                            ),\n                            onPressed: () => _toggleTaskStatus(id, completed),\n                          ),\n                          IconButton(\n                            icon: const Icon(Icons.edit, color: Colors.blue),\n                            onPressed: () async {\n                              final updated = await Navigator.push(\n                                context,\n                                MaterialPageRoute(\n                                  builder: (_) => EditTaskPage(\n                                    taskName: task['task'] ?? '',\n                                    description: description,\n                                  ),\n                                ),\n                              );\n                              if (updated != null) {\n                                final uid = _auth.currentUser?.uid;\n                                if (uid != null) {\n                                  try {\n                                    await _firestore\n                                        .collection('user')\n                                        .doc(uid)\n                                        .collection('to_dos')\n                                        .doc(id)\n                                        .update({\n                                          'task': updated['task'],\n                                          'description': updated['description'],\n                                        });\n                                  } catch (e) {\n                                    if (mounted) {\n                                      ScaffoldMessenger.of(\n                                        context,\n                                      ).showSnackBar(\n                                        SnackBar(\n                                          content: Text('Error updating: $e'),\n                                        ),\n                                      );\n                                    }\n                                  }\n                                }\n                              }\n                            },\n                          ),\n                          IconButton(\n                            icon: const Icon(Icons.delete, color: Colors.red),\n                            onPressed: () => _deleteTask(id),\n                          ),\n                        ],\n                      ),\n                    );\n                  },\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: FloatingActionButton(\n        backgroundColor: Colors.orange,\n        child: const Icon(Icons.add, color: Colors.black),\n        onPressed: () async {\n          final newTask = await Navigator.push(\n            context,\n            MaterialPageRoute(builder: (_) => const AddTaskPage()),\n          );\n          if (newTask != null) {\n            final uid = _auth.currentUser?.uid;\n            if (uid != null) {\n              try {\n                await _firestore\n                    .collection('user')\n                    .doc(uid)\n                    .collection('to_dos')\n                    .add({\n                      'task': newTask['task'],\n                      'description': newTask['description'],\n                      'completed': false,\n                      'createdAt': Timestamp.now(),\n                      'createdBy': 'user',\n                    });\n              } catch (e) {\n                if (mounted) {\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    SnackBar(content: Text('Error adding task: $e')),\n                  );\n                }\n              }\n            }\n          }\n        },\n      ),\n    );\n  }\n\n  Widget _filterButton(String label) {\n    return GestureDetector(\n      onTap: () => setState(() => _selectedTab = label),\n      child: Container(\n        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n        decoration: BoxDecoration(\n          color: _selectedTab == label ? Colors.white : Colors.grey,\n          borderRadius: BorderRadius.circular(20),\n        ),\n        child: Text(\n          label,\n          style: TextStyle(\n            color: _selectedTab == label ? Colors.black : Colors.white,\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _errorBanner(String text) => Container(\n    margin: const EdgeInsets.all(16),\n    padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 8),\n    decoration: BoxDecoration(\n      color: Colors.red[100],\n      borderRadius: BorderRadius.circular(20),\n    ),\n    child: Text(\n      text,\n      style: const TextStyle(color: Colors.red, fontSize: 16),\n      textAlign: TextAlign.center,\n    ),\n  );\n\n  Widget _emptyState() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: const [\n          Icon(Icons.inbox, size: 64, color: Colors.grey),\n          SizedBox(height: 16),\n          Text(\n            'No tasks yet. Add one to get started!',\n            style: TextStyle(fontSize: 18, color: Colors.grey),\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
          "_encoding": "utf-8"
        }
      },
      "notifications": {
        "notifications_screen.dart": {
          "_text": "// lib/user/notifications/notifications_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass NotificationsScreen extends StatefulWidget {\n  const NotificationsScreen({super.key});\n\n  @override\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\n}\n\nclass _NotificationsScreenState extends State<NotificationsScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  Stream<QuerySnapshot> _getNotifications() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore.collection('user').doc(uid).collection('notifications').orderBy('createdAt', descending: true).snapshots();\n  }\n\n  Future<void> _markRead(String id) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid != null) {\n      await _firestore.collection('user').doc(uid).collection('notifications').doc(id).update({'isRead': true});\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Notifications')),\n      body: StreamBuilder<QuerySnapshot>(\n        stream: _getNotifications(),\n        builder: (context, snapshot) {\n          if (snapshot.hasError) return Text('Error: ${snapshot.error}');\n          if (!snapshot.hasData) return const Center(child: CircularProgressIndicator());\n          final notifs = snapshot.data!.docs;\n          return ListView.builder(\n            itemCount: notifs.length,\n            itemBuilder: (context, index) {\n              final notif = notifs[index].data() as Map<String, dynamic>;\n              final id = notifs[index].id;\n              return ListTile(\n                title: Text(notif['message'] ?? ''),\n                subtitle: Text(notif['type'] ?? ''),\n                trailing: notif['isRead'] ? null : const Icon(Icons.fiber_new),\n                onTap: () => _markRead(id),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "profile": {
        "edit_profile_screen.dart": {
          "_text": "// lib/user/profile/edit_profile_screen.dart\nimport 'dart:io';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:intl/intl.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass EditProfileScreen extends StatefulWidget {\n  final Map<String, dynamic> userData;\n  const EditProfileScreen({super.key, required this.userData});\n\n  @override\n  State<EditProfileScreen> createState() => _EditProfileScreenState();\n}\n\nclass _EditProfileScreenState extends State<EditProfileScreen> {\n  late TextEditingController _fullNameController;\n  late TextEditingController _usernameController;\n  late TextEditingController _bioController;\n  late TextEditingController _phoneController;\n  late TextEditingController _localityController;\n  late TextEditingController _cityController;\n  late TextEditingController _stateController;\n  DateTime? _dob;\n  String? _gender;\n  String _profileImageUrl = '';\n  File? _newProfileImage;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'user_image');\n\n  @override\n  void initState() {\n    super.initState();\n    _fullNameController = TextEditingController(text: widget.userData['fullName']);\n    _usernameController = TextEditingController(text: widget.userData['username']);\n    _bioController = TextEditingController(text: widget.userData['bio']);\n    _phoneController = TextEditingController(text: widget.userData['phoneNo']);\n    _localityController = TextEditingController(text: widget.userData['locality']);\n    _cityController = TextEditingController(text: widget.userData['city']);\n    _stateController = TextEditingController(text: widget.userData['state']);\n    _dob = widget.userData['dob']?.toDate();\n    _gender = widget.userData['gender'];\n    _profileImageUrl = widget.userData['profileImageUrl'] ?? '';\n  }\n\n  Future<void> _pickImage() async {\n    if (await Permission.photos.request().isGranted) {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null) setState(() => _newProfileImage = File(picked.path));\n    }\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_newProfileImage == null) return _profileImageUrl;\n    try {\n      final response = await cloudinary.uploadFile(CloudinaryFile.fromFile(_newProfileImage!.path));\n      return response.secureUrl;\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n      return _profileImageUrl;\n    }\n  }\n\n  Future<void> _saveChanges() async {\n    final url = await _uploadImage();\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null) {\n      await FirebaseFirestore.instance.collection('user').doc(uid).update({\n        'fullName': _fullNameController.text,\n        'username': _usernameController.text,\n        'bio': _bioController.text,\n        'phoneNo': _phoneController.text,\n        'profileImageUrl': url,\n        'locality': _localityController.text,\n        'city': _cityController.text,\n        'state': _stateController.text,\n        'dob': _dob != null ? Timestamp.fromDate(_dob!) : null,\n        'gender': _gender,\n      });\n      Navigator.pop(context, true);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Edit Profile')),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(controller: _fullNameController, decoration: const InputDecoration(labelText: 'Full Name')),\n            TextField(controller: _usernameController, decoration: const InputDecoration(labelText: 'Username')),\n            TextField(controller: _bioController, decoration: const InputDecoration(labelText: 'Bio')),\n            TextField(controller: _phoneController, decoration: const InputDecoration(labelText: 'Phone Number')),\n            ElevatedButton(onPressed: _pickImage, child: const Text('Pick New Profile Image')),\n            if (_newProfileImage != null) Text('Selected: ${_newProfileImage!.path.split('/').last}'),\n            if (_profileImageUrl.isNotEmpty) Text('Current URL: $_profileImageUrl'),\n            TextField(controller: _localityController, decoration: const InputDecoration(labelText: 'Locality')),\n            TextField(controller: _cityController, decoration: const InputDecoration(labelText: 'City')),\n            TextField(controller: _stateController, decoration: const InputDecoration(labelText: 'State')),\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Text(_dob == null ? 'Select DOB' : DateFormat('yyyy-MM-dd').format(_dob!)),\n                IconButton(\n                  icon: const Icon(Icons.calendar_today),\n                  onPressed: () async {\n                    final picked = await showDatePicker(\n                      context: context,\n                      initialDate: _dob ?? DateTime.now(),\n                      firstDate: DateTime(1900),\n                      lastDate: DateTime.now(),\n                    );\n                    if (picked != null) setState(() => _dob = picked);\n                  },\n                ),\n              ],\n            ),\n            DropdownButton<String>(\n              value: _gender,\n              hint: const Text('Select Gender'),\n              items: ['Male', 'Female', 'Other'].map((g) => DropdownMenuItem(value: g, child: Text(g))).toList(),\n              onChanged: (value) => setState(() => _gender = value),\n            ),\n            const SizedBox(height: 24),\n            ElevatedButton(onPressed: _saveChanges, child: const Text('Save Changes')),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    // dispose controllers\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "settings_screen.dart": {
          "_text": "// lib/user/profile/settings_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport '../../welcome_page.dart';\n\nclass SettingsScreen extends StatelessWidget {\n  const SettingsScreen({super.key});\n\n  Future<void> _logout(BuildContext context) async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null) {\n      final playerId = OneSignal.User.pushSubscription.id;\n      if (playerId != null) {\n        await FirebaseFirestore.instance.collection('user').doc(uid).update({\n          'playerIds': FieldValue.arrayRemove([playerId]),\n        });\n      }\n    }\n    await FirebaseAuth.instance.signOut();\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.remove('lastRole'); // Clear role on logout\n    Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const WelcomePage()));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Settings')),\n      body: ListView(\n        children: [\n          ListTile(\n            title: const Text('Logout'),\n            trailing: const Icon(Icons.logout),\n            onTap: () => _logout(context),\n          ),\n          // more settings\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "user_profile.dart": {
          "_text": "// lib/user/profile/user_profile.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'edit_profile_screen.dart';\nimport 'settings_screen.dart';\n\nclass UserProfile extends StatefulWidget {\n  const UserProfile({super.key});\n\n  @override\n  State<UserProfile> createState() => _UserProfileState();\n}\n\nclass _UserProfileState extends State<UserProfile> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  Map<String, dynamic>? _userData;\n  bool _isLoading = true;\n  bool _hasError = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadUserData();\n  }\n\n  Future<void> _loadUserData() async {\n    if (!mounted) return;\n\n    setState(() {\n      _isLoading = true;\n      _hasError = false;\n    });\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final doc = await _firestore.collection('user').doc(uid).get();\n        if (doc.exists) {\n          setState(() {\n            _userData = doc.data();\n            _isLoading = false;\n          });\n        } else {\n          setState(() {\n            _isLoading = false;\n            _hasError = true;\n          });\n        }\n      } else {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    } catch (e) {\n      print('Error loading user data: $e');\n      setState(() {\n        _isLoading = false;\n        _hasError = true;\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Profile'),\n        leading: IconButton(\n          icon: const Icon(Icons.menu),\n          onPressed: () => Navigator.push(\n            context,\n            MaterialPageRoute(builder: (context) => const SettingsScreen()),\n          ),\n        ),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.edit),\n            onPressed: () async {\n              if (_userData != null) {\n                final updated = await Navigator.push(\n                  context,\n                  MaterialPageRoute(\n                    builder: (context) =>\n                        EditProfileScreen(userData: _userData ?? {}),\n                  ),\n                );\n                if (updated == true && mounted) {\n                  _loadUserData();\n                }\n              }\n            },\n          ),\n        ],\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator())\n          : _hasError\n          ? Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  const Icon(Icons.error, size: 64, color: Colors.red),\n                  const SizedBox(height: 16),\n                  const Text(\n                    'Error loading profile data',\n                    style: TextStyle(fontSize: 18, color: Colors.red),\n                  ),\n                  const SizedBox(height: 16),\n                  ElevatedButton(\n                    onPressed: _loadUserData,\n                    child: const Text('Retry'),\n                  ),\n                ],\n              ),\n            )\n          : _userData == null\n          ? const Center(\n              child: Text(\n                'No user data available',\n                style: TextStyle(fontSize: 18, color: Colors.grey),\n              ),\n            )\n          : RefreshIndicator(\n              onRefresh: _loadUserData,\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.all(16.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Center(\n                      child: CircleAvatar(\n                        radius: 60,\n                        backgroundImage: NetworkImage(\n                          _userData!['profileImageUrl'] ?? '',\n                        ),\n                        onBackgroundImageError: (_, __) =>\n                            const Icon(Icons.person, size: 60),\n                      ),\n                    ),\n                    const SizedBox(height: 16),\n                    Center(\n                      child: Text(\n                        _userData!['fullName'] ?? '',\n                        style: const TextStyle(\n                          fontSize: 24,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                    Center(child: Text('@${_userData!['username'] ?? ''}')),\n                    const SizedBox(height: 24),\n                    _buildInfoRow('Bio:', _userData!['bio']),\n                    _buildInfoRow('Email:', _userData!['email']),\n                    _buildInfoRow('Phone:', _userData!['phoneNo']),\n                    _buildInfoRow(\n                      'DOB:',\n                      _userData!['dob'] != null\n                          ? DateFormat(\n                              'yyyy-MM-dd',\n                            ).format(_userData!['dob'].toDate())\n                          : '',\n                    ),\n                    _buildInfoRow('Gender:', _userData!['gender']),\n                    const SizedBox(height: 16),\n                    const Text(\n                      'Location:',\n                      style: TextStyle(fontWeight: FontWeight.bold),\n                    ),\n                    _buildInfoRow('Locality:', _userData!['locality']),\n                    _buildInfoRow('City:', _userData!['city']),\n                    _buildInfoRow('State:', _userData!['state']),\n                    const SizedBox(height: 16),\n                    const Text(\n                      'Emergency Contacts:',\n                      style: TextStyle(fontWeight: FontWeight.bold),\n                    ),\n                    ...(_userData!['emergencyContacts'] as List? ?? []).map(\n                      (e) => ListTile(\n                        title: Text(e['name'] ?? ''),\n                        subtitle: Text(\n                          'Relation: ${e['relation'] ?? ''}, Phone: ${e['number'] ?? ''}',\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n    );\n  }\n\n  Widget _buildInfoRow(String label, String? value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 4.0),\n      child: Text(\n        '$label ${value ?? ''}',\n        style: const TextStyle(fontSize: 16),\n      ),\n    );\n  }\n}\n",
          "_encoding": "utf-8"
        }
      },
      "user_bottom_nav.dart": {
        "_text": "// lib/user/user_bottom_nav.dart\nimport 'package:flutter/material.dart';\nimport 'family/family_screen.dart';\nimport 'home/home_screen.dart';\nimport 'caretaker/caretaker_screen.dart';\nimport 'profile/user_profile.dart';\n\nclass UserBottomNav extends StatefulWidget {\n  const UserBottomNav({super.key});\n\n  @override\n  State<UserBottomNav> createState() => _UserBottomNavState();\n}\n\nclass _UserBottomNavState extends State<UserBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const HomeScreen(),\n    const FamilyScreen(),\n    const CaretakerScreen(),\n    const UserProfile(),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        type: BottomNavigationBarType.fixed,\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n          BottomNavigationBarItem(icon: Icon(Icons.group), label: 'Family'),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.manage_accounts),\n            label: 'CareTaker',\n          ),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      }
    },
    "utils": {
      "notification_helper.dart": {
        "_text": "// lib/utils/notification_helper.dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n \nFuture<void> sendNotification(List<String> playerIds, String content) async {\n  if (playerIds.isEmpty) return;\n  \n  const appId = '73673a14-2de9-44c4-a9c5-dd531da39b59';\n  const apiKey = 'os_v2_app_onttufbn5fcmjkof3vjr3i43lhrirnuaeujum3mksb5gtjrhjnq7fj2wbm4rjwmg3kyo4ikoqvmiyv5rm5pxgqjx46gd37w3fvc2yey';\n  \n  try {\n    final response = await http.post(\n      Uri.parse('https://onesignal.com/api/v1/notifications'),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': 'Basic $apiKey',\n      },\n      body: jsonEncode({\n        'app_id': appId,\n        'include_player_ids': playerIds,\n        'contents': {'en': content},\n        'priority': 10,\n      }),\n    ).timeout(const Duration(seconds: 10));\n    \n    if (response.statusCode != 200) {\n      print('Failed to send notification: ${response.statusCode} - ${response.body}');\n    }\n  } catch (e) {\n    print('Error sending notification: $e');\n  }\n}",
        "_encoding": "utf-8"
      }
    },
    "firebase_options.dart": {
      "_text": "// File generated by FlutterFire CLI.\n// ignore_for_file: type=lint\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for web - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        return ios;\n      case TargetPlatform.macOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for macos - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyD24yA69_RtcP-ad4cVST3ykwfEEpWScGw',\n    appId: '1:54955106735:android:ed95e1b17fba45b566cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n  );\n\n  static const FirebaseOptions ios = FirebaseOptions(\n    apiKey: 'AIzaSyAznFalyZJzZlofbHOIYUXbGiipNwL7PXU',\n    appId: '1:54955106735:ios:da277fbc63d770d366cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n    iosBundleId: 'com.example.dementiaVirtualMemory',\n  );\n}\n",
      "_encoding": "utf-8"
    },
    "forgot_password_page.dart": {
      "_text": "// lib/forgot_password_page.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({Key? key}) : super(key: key);\n\n  @override\n  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();\n}\n\nclass _ForgotPasswordPageState extends State<ForgotPasswordPage> {\n  final TextEditingController emailController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  bool _loading = false;\n\n  Future<void> _resetPassword() async {\n    setState(() => _loading = true);\n    try {\n      await _auth.sendPasswordResetEmail(email: emailController.text.trim());\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Password reset link sent to ${emailController.text}')));\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed: $e')));\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Forgot Password')),\n      body: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            const Text('Enter your email to reset your password', style: TextStyle(fontSize: 16)),\n            const SizedBox(height: 16),\n            TextField(controller: emailController, decoration: const InputDecoration(labelText: 'Email')),\n            const SizedBox(height: 24),\n            _loading ? const CircularProgressIndicator() : ElevatedButton(onPressed: _resetPassword, child: const Text('Send Reset Link')),\n          ],\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "login_page.dart": {
      "_text": "// lib/login_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'admin/admin_bottom_nav.dart';\nimport 'careTaker/care_taker.dart';\nimport 'register_page.dart';\nimport 'forgot_password_page.dart';\nimport 'user/user_bottom_nav.dart';\n\nclass LoginPage extends StatefulWidget {\n  final String role;\n  const LoginPage({Key? key, required this.role}) : super(key: key);\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _loading = false;\n\n  Future<void> _login() async {\n    setState(() => _loading = true);\n    try {\n      final credential = await _auth.signInWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n      if (uid != null) {\n        final doc = await _firestore.collection(widget.role).doc(uid).get();\n        if (doc.exists) {\n          final data = doc.data()!;\n          if (data['isBanned'] == true) {\n            await _auth.signOut();\n            ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Account is banned')));\n            return;\n          }\n          // Add player ID\n          final playerId = OneSignal.User.pushSubscription.id;\n          if (playerId != null) {\n            await _firestore.collection(widget.role).doc(uid).update({\n              'playerIds': FieldValue.arrayUnion([playerId]),\n            });\n          }\n          // Save the role for auto-login\n          final prefs = await SharedPreferences.getInstance();\n          await prefs.setString('lastRole', widget.role);\n\n          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Logged in as ${widget.role}')));\n          if (widget.role == 'user') {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const UserBottomNav()));\n          } else if (widget.role == 'caretaker') {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const CareTaker()));\n          } else {\n            Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => const AdminBottomNav()));\n          }\n        } else {\n          throw 'Role mismatch or user not found';\n        }\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Login failed: $e')));\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  void _goToRegister() {\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(\n        builder: (context) => RegisterPage(role: widget.role),\n      ),\n    );\n  }\n\n  void _forgotPassword() {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const ForgotPasswordPage()),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isAdmin = widget.role == 'admin';\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('${widget.role.toUpperCase()} Login'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: passwordController,\n              decoration: const InputDecoration(labelText: 'Password'),\n              obscureText: true,\n            ),\n            const SizedBox(height: 8),\n            Align(\n              alignment: Alignment.centerRight,\n              child: TextButton(\n                onPressed: _forgotPassword,\n                child: const Text('Forgot Password?'),\n              ),\n            ),\n            const SizedBox(height: 16),\n            _loading\n                ? const CircularProgressIndicator()\n                : ElevatedButton(\n                    onPressed: _login,\n                    child: Text('Login as ${widget.role}'),\n                  ),\n            const SizedBox(height: 16),\n            if (!isAdmin)\n              TextButton(\n                onPressed: _goToRegister,\n                child: const Text(\"Don't have an account? Sign up here\"),\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "main.dart": {
      "_text": "// lib/main.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'firebase_options.dart';\nimport 'welcome_page.dart';\nimport 'user/user_bottom_nav.dart';\nimport 'careTaker/care_taker.dart';\nimport 'admin/admin_bottom_nav.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n  OneSignal.initialize(\"73673a14-2de9-44c4-a9c5-dd531da39b59\");\n  OneSignal.Notifications.requestPermission(true);\n\n  // Check for auto-login\n  final prefs = await SharedPreferences.getInstance();\n  final user = FirebaseAuth.instance.currentUser;\n  Widget initialScreen = const WelcomePage();\n\n  if (user != null) {\n    final role = prefs.getString('lastRole') ?? 'user';\n    if (role == 'user') {\n      initialScreen = const UserBottomNav();\n    } else if (role == 'caretaker') {\n      initialScreen = const CareTaker();\n    } else if (role == 'admin') {\n      initialScreen = const AdminBottomNav();\n    }\n  }\n\n  runApp(MyApp(initialScreen: initialScreen));\n}\n\nclass MyApp extends StatelessWidget {\n  final Widget initialScreen;\n\n  const MyApp({super.key, required this.initialScreen});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'DVMA',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: initialScreen,\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "register_page.dart": {
      "_text": "// lib/register_page.dart\nimport 'dart:io';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:file_picker/file_picker.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:intl/intl.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass RegisterPage extends StatefulWidget {\n  final String role;\n  const RegisterPage({super.key, required this.role});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final TextEditingController nameController = TextEditingController();\n  final TextEditingController usernameController = TextEditingController();\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final TextEditingController phoneController = TextEditingController();\n  final TextEditingController bioController = TextEditingController();\n  final TextEditingController localityController = TextEditingController();\n  final TextEditingController cityController = TextEditingController();\n  final TextEditingController stateController = TextEditingController();\n\n  // User specific\n  DateTime? dob;\n  String? gender;\n  final TextEditingController emergencyNameController = TextEditingController();\n  final TextEditingController emergencyRelationController =\n      TextEditingController();\n  final TextEditingController emergencyPhoneController =\n      TextEditingController();\n\n  // Caretaker specific\n  final TextEditingController experienceYearsController =\n      TextEditingController();\n  final TextEditingController experienceBioController = TextEditingController();\n  final TextEditingController graduationYearController =\n      TextEditingController();\n  final TextEditingController graduationFromController =\n      TextEditingController();\n\n  File? _profileImage;\n  File? _certificate;\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  final _picker = ImagePicker();\n  bool _loading = false;\n\n  final cloudinary = CloudinaryPublic(\n    'dts8hgf4f',\n    'default',\n    cache: false,\n  ); // default not used, use preset in upload\n\n  Future<void> _pickProfileImage() async {\n    if (await Permission.photos.request().isGranted) {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null) setState(() => _profileImage = File(picked.path));\n    }\n  }\n\n  Future<void> _pickCertificate() async {\n    final result = await FilePicker.platform.pickFiles(\n      type: FileType.custom,\n      allowedExtensions: ['pdf', 'jpg', 'png'],\n    );\n    if (result != null)\n      setState(() => _certificate = File(result.files.first.path!));\n  }\n\n  Future<String?> _uploadFile(File file, String preset) async {\n    try {\n      final response = await cloudinary.uploadFile(\n        CloudinaryFile.fromFile(\n          file.path,\n          resourceType: CloudinaryResourceType.Auto,\n          folder: preset,\n        ),\n        uploadPreset: preset,\n      );\n      return response.secureUrl;\n    } catch (e) {\n      ScaffoldMessenger.of(\n        context,\n      ).showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n      return null;\n    }\n  }\n\n  Future<void> _register() async {\n    setState(() => _loading = true);\n    try {\n      final username = usernameController.text.trim();\n      final phone = phoneController.text.trim();\n      final snapUsername = await _firestore\n          .collection(widget.role)\n          .where('username', isEqualTo: username)\n          .get();\n      if (snapUsername.docs.isNotEmpty) throw 'Username already exists';\n\n      final snapPhone = await _firestore\n          .collection(widget.role)\n          .where('phoneNo', isEqualTo: phone)\n          .get();\n      if (snapPhone.docs.isNotEmpty) throw 'Phone number already exists';\n\n      final credential = await _auth.createUserWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n      if (uid != null) {\n        String? profileUrl = 'https://res.cloudinary.com/dts8hgf4f/image/upload/v1758882470/user_jvnx80.png';\n        if (_profileImage != null) {\n          profileUrl = await _uploadFile(\n            _profileImage!,\n            widget.role == 'user' ? 'user_image' : 'care_taker_image',\n          );\n        }\n        Map<String, dynamic> data = {\n          'uid': uid,\n          'fullName': nameController.text.trim(),\n          'username': username,\n          'email': emailController.text.trim(),\n          'phoneNo': phone,\n          'bio': bioController.text.trim(),\n          'profileImageUrl': profileUrl ?? '',\n          'locality': localityController.text.trim(),\n          'city': cityController.text.trim(),\n          'state': stateController.text.trim(),\n          'createdAt': Timestamp.now(),\n          'currentConnectionId': null,\n          'emergencyContacts': [],\n          'members': [],\n          'reports_sent': [],\n          'playerIds': [],\n          'isBanned': false,\n        };\n        if (widget.role == 'user') {\n          data.addAll({\n            'dob': dob != null ? Timestamp.fromDate(dob!) : null,\n            'gender': gender,\n            'emergencyContacts': [\n              {\n                'name': emergencyNameController.text.trim(),\n                'relation': emergencyRelationController.text.trim(),\n                'number': emergencyPhoneController.text.trim(),\n              },\n            ],\n          });\n        } else if (widget.role == 'caretaker') {\n          String? certUrl;\n          if (_certificate != null) {\n            certUrl = await _uploadFile(_certificate!, 'graduation');\n          }\n          data.addAll({\n            'dob': dob != null ? Timestamp.fromDate(dob!) : null,\n            'gender': gender,\n            'experienceYears':\n                int.tryParse(experienceYearsController.text.trim()) ?? 0,\n            'experienceBio': experienceBioController.text.trim(),\n            'graduationOnNursing': {\n              'year': graduationYearController.text.trim(),\n              'from': graduationFromController.text.trim(),\n              'uploadCertificateUrl': certUrl ?? '',\n            },\n            'isApprove': false,\n            'isRemove': false,\n            'roadmap': [],\n          });\n        }\n        await _firestore.collection(widget.role).doc(uid).set(data);\n        // Add player ID\n        final playerId = OneSignal.User.pushSubscription.id;\n        if (playerId != null) {\n          await _firestore.collection(widget.role).doc(uid).update({\n            'playerIds': FieldValue.arrayUnion([playerId]),\n          });\n        }\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Registration successful')),\n        );\n        Navigator.pop(context);\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(\n        context,\n      ).showSnackBar(SnackBar(content: Text('Registration failed: $e')));\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isUser = widget.role == 'user';\n    return Scaffold(\n      appBar: AppBar(title: Text('Register as ${widget.role.toUpperCase()}')),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: nameController,\n              decoration: const InputDecoration(labelText: 'Full Name'),\n            ),\n            TextField(\n              controller: usernameController,\n              decoration: const InputDecoration(labelText: 'Username'),\n            ),\n            TextField(\n              controller: emailController,\n              decoration: const InputDecoration(labelText: 'Email'),\n            ),\n            TextField(\n              controller: passwordController,\n              decoration: const InputDecoration(labelText: 'Password'),\n              obscureText: true,\n            ),\n            TextField(\n              controller: phoneController,\n              decoration: const InputDecoration(labelText: 'Phone Number'),\n            ),\n            TextField(\n              controller: bioController,\n              decoration: const InputDecoration(labelText: 'Bio'),\n            ),\n            TextField(\n              controller: localityController,\n              decoration: const InputDecoration(labelText: 'Locality'),\n            ),\n            TextField(\n              controller: cityController,\n              decoration: const InputDecoration(labelText: 'City'),\n            ),\n            TextField(\n              controller: stateController,\n              decoration: const InputDecoration(labelText: 'State'),\n            ),\n            const SizedBox(height: 16),\n            Row(\n              children: [\n                Text(\n                  dob == null\n                      ? 'Select DOB'\n                      : DateFormat('yyyy-MM-dd').format(dob!),\n                ),\n                IconButton(\n                  icon: const Icon(Icons.calendar_today),\n                  onPressed: () async {\n                    final picked = await showDatePicker(\n                      context: context,\n                      initialDate: DateTime(1960),\n                      firstDate: DateTime(1900),\n                      lastDate: DateTime.now(),\n                    );\n                    if (picked != null) setState(() => dob = picked);\n                  },\n                ),\n              ],\n            ),\n            DropdownButton<String>(\n              value: gender,\n              hint: const Text('Select Gender'),\n              items: [\n                'Male',\n                'Female',\n                'Other',\n              ].map((g) => DropdownMenuItem(value: g, child: Text(g))).toList(),\n              onChanged: (value) => setState(() => gender = value),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: _pickProfileImage,\n              child: const Text('Pick Profile Image'),\n            ),\n            if (_profileImage != null)\n              Text('Selected: ${_profileImage!.path.split('/').last}'),\n            if (isUser) ...[\n              const SizedBox(height: 16),\n              TextField(\n                controller: emergencyNameController,\n                decoration: const InputDecoration(\n                  labelText: 'Emergency Contact Name',\n                ),\n              ),\n              TextField(\n                controller: emergencyRelationController,\n                decoration: const InputDecoration(\n                  labelText: 'Emergency Relation',\n                ),\n              ),\n              TextField(\n                controller: emergencyPhoneController,\n                decoration: const InputDecoration(labelText: 'Emergency Phone'),\n              ),\n            ],\n            if (!isUser) ...[\n              TextField(\n                controller: experienceYearsController,\n                decoration: const InputDecoration(\n                  labelText: 'Experience Years',\n                ),\n                keyboardType: TextInputType.number,\n              ),\n              TextField(\n                controller: experienceBioController,\n                decoration: const InputDecoration(labelText: 'Experience Bio'),\n              ),\n              TextField(\n                controller: graduationYearController,\n                decoration: const InputDecoration(labelText: 'Graduation Year'),\n              ),\n              TextField(\n                controller: graduationFromController,\n                decoration: const InputDecoration(labelText: 'Graduation From'),\n              ),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: _pickCertificate,\n                child: const Text('Pick Graduation Certificate'),\n              ),\n              if (_certificate != null)\n                Text('Selected: ${_certificate!.path.split('/').last}'),\n            ],\n            const SizedBox(height: 24),\n            _loading\n                ? const CircularProgressIndicator()\n                : ElevatedButton(\n                    onPressed: _register,\n                    child: Text('Register as ${widget.role}'),\n                  ),\n          ],\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "welcome_page.dart": {
      "_text": "import 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'login_page.dart';\n\nclass WelcomePage extends StatelessWidget {\n  const WelcomePage({Key? key}) : super(key: key);\n\n  void _navigateTo(BuildContext context, String role) {\n    Navigator.push(\n      context,\n      MaterialPageRoute(\n        builder: (context) => LoginPage(role: role),\n      ),\n    );\n  }\n\n  void _showAdminDialog(BuildContext context) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Admin Access'),\n        content: const Text('Are you sure you want to access Admin login?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: const Text('Cancel'),\n          ),\n          TextButton(\n            onPressed: () {\n              Navigator.pop(context);\n              _navigateTo(context, 'admin');\n            },\n            child: const Text('Proceed'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: const BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.blueAccent, Colors.lightBlue],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SafeArea(\n          child: Center(\n            child: Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  GestureDetector(\n                    onLongPress: () => _showAdminDialog(context),\n                    child: const Text(\n                      'Welcome to DVMA',\n                      style: TextStyle(\n                        fontSize: 32,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                        letterSpacing: 1.2,\n                        shadows: [\n                          Shadow(\n                            blurRadius: 10.0,\n                            color: Colors.black26,\n                            offset: Offset(2.0, 2.0),\n                          ),\n                        ],\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ).animate().fadeIn(duration: 800.ms).slideY(begin: -0.2),\n                  const SizedBox(height: 16),\n                  const Text(\n                    'Select your role to continue',\n                    style: TextStyle(\n                      fontSize: 18,\n                      color: Colors.white70,\n                      fontStyle: FontStyle.italic,\n                    ),\n                  ).animate().fadeIn(duration: 1000.ms).slideY(begin: 0.2),\n                  const SizedBox(height: 48),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.person,\n                    label: 'I am a User',\n                    role: 'user',\n                    gradient: const LinearGradient(\n                      colors: [Colors.blue, Colors.blueAccent],\n                    ),\n                  ),\n                  const SizedBox(height: 20),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.volunteer_activism,\n                    label: 'I am a Caretaker',\n                    role: 'caretaker',\n                    gradient: const LinearGradient(\n                      colors: [Colors.green, Colors.greenAccent],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRoleButton({\n    required BuildContext context,\n    required IconData icon,\n    required String label,\n    required String role,\n    required LinearGradient gradient,\n  }) {\n    return Card(\n      elevation: 8,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: InkWell(\n        onTap: () => _navigateTo(context, role),\n        borderRadius: BorderRadius.circular(12),\n        child: Container(\n          decoration: BoxDecoration(\n            gradient: gradient,\n            borderRadius: BorderRadius.circular(12),\n          ),\n          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),\n          child: Row(\n            children: [\n              Icon(icon, size: 30, color: Colors.white),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Text(\n                  label,\n                  style: const TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.w600,\n                    color: Colors.white,\n                  ),\n                ),\n              ),\n              const Icon(Icons.arrow_forward, color: Colors.white),\n            ],\n          ),\n        ),\n      ),\n    ).animate().scale(duration: 600.ms, delay: 200.ms, curve: Curves.easeOut);\n  }\n}",
      "_encoding": "utf-8"
    }
  }
}