{
  "lib": {
    "careTaker": {
      "caretaker_bottom_nav.dart": {
        "_text": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'user_screen.dart';\nimport 'profile_screen.dart';\nimport 'notifications_screen.dart';\n\nclass CareTaker extends StatefulWidget {\n  const CareTaker({super.key});\n\n  @override\n  State<CareTaker> createState() => _CareTakerState();\n}\n\nclass _CareTakerState extends State<CareTaker> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    UserScreen(),\n    const NotificationsScreen(), \n    const Profile(),\n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  Future<void> _checkBanned() async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid == null) return;\n\n    final doc = await FirebaseFirestore.instance\n        .collection('caretaker')\n        .doc(uid)\n        .get();\n\n    if (doc.data()?['isBanned'] == true) {\n      if (!mounted) return;\n      showDialog(\n        context: context,\n        builder: (_) => AlertDialog(\n          title: const Text('Account Banned'),\n          content: const Text('Your account has been banned.'),\n          actions: [\n            TextButton(\n              onPressed: () async {\n                await FirebaseAuth.instance.signOut();\n                if (!mounted) return;\n                Navigator.pushReplacementNamed(context, '/welcome');\n              },\n              child: const Text('Logout'),\n            ),\n          ],\n        ),\n      );\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _checkBanned();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: _onItemTapped,\n        selectedItemColor: Colors.blue,\n        unselectedItemColor: Colors.grey,\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'User'),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.notifications),\n            label: 'Notification',\n          ),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      },
      "family_scanner.dart": {
        "_text": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:camera/camera.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:confetti/confetti.dart';\nimport 'package:logger/logger.dart';\nimport 'package:image/image.dart' as img;\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\nfinal logger = Logger();\n\nclass ScannerScreen extends StatefulWidget {\n  final String patientUid;\n  const ScannerScreen({super.key, required this.patientUid});\n\n  @override\n  State<ScannerScreen> createState() => _ScannerScreenState();\n}\n\nclass _ScannerScreenState extends State<ScannerScreen>\n    with SingleTickerProviderStateMixin {\n  CameraController? _controller;\n  Future<void>? _initializeControllerFuture;\n  XFile? _capturedImage;\n  bool _hasCameraError = false;\n  bool _isProcessing = false;\n  bool _isLoadingCamera = true;\n  bool _isCapturing = false;\n  late ConfettiController _confettiController;\n  bool _disposed = false;\n  bool _isFrontCamera = false;\n  List<CameraDescription> _cameras = [];\n\n  // NEW: Store fetched members list here\n  List<Map<String, dynamic>> _patientMembers = [];\n  bool _isFetchingMembers = true;\n\n  // Firestore instance\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  // Result info\n  Map<String, dynamic>? _resultData;\n  bool _noMatch = false;\n\n  // Animation controller for scanning overlay\n  late AnimationController _scanAnimationController;\n\n  @override\n  void initState() {\n    super.initState();\n    _confettiController =\n        ConfettiController(duration: const Duration(seconds: 3));\n    _scanAnimationController = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..repeat(reverse: true);\n    // NEW: Start fetching members before initializing the camera\n    _fetchPatientMembers();\n  }\n\n  // NEW FUNCTION: Fetch the 'members' array from the patient's document\n  Future<void> _fetchPatientMembers() async {\n    if (_disposed) return;\n    setState(() => _isFetchingMembers = true);\n    try {\n      final patientDoc =\n          await _firestore.collection('user').doc(widget.patientUid).get();\n\n      if (patientDoc.exists) {\n        final data = patientDoc.data();\n        final membersList = data?['members'] as List<dynamic>?;\n        \n        if (membersList != null) {\n            // Convert List<dynamic> to List<Map<String, dynamic>>\n            _patientMembers = membersList\n                .whereType<Map<String, dynamic>>()\n                .toList();\n        }\n      }\n      // Continue to camera setup only after members are fetched\n      await _initializeCamera();\n    } catch (e) {\n      logger.e('Error fetching patient members: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n            _hasCameraError = true;\n            _isLoadingCamera = false;\n        });\n      }\n    } finally {\n        if (mounted && !_disposed) setState(() => _isFetchingMembers = false);\n    }\n  }\n\n  Future<void> _initializeCamera() async {\n    if (_disposed || _isFetchingMembers) return; // Wait for members\n    setState(() {\n      _isLoadingCamera = true;\n      _resultData = null;\n      _noMatch = false;\n      _capturedImage = null;\n    });\n    try {\n      await _controller?.dispose();\n      _cameras = await availableCameras().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera initialization timed out');\n        },\n      );\n      if (_cameras.isEmpty) {\n        if (mounted && !_disposed) {\n          setState(() {\n            _hasCameraError = true;\n            _isLoadingCamera = false;\n          });\n        }\n        return;\n      }\n      final selectedCamera = _cameras.firstWhere(\n        (camera) =>\n            camera.lensDirection ==\n            (_isFrontCamera ? CameraLensDirection.front : CameraLensDirection.back),\n        orElse: () => _cameras.first,\n      );\n      _controller = CameraController(\n        selectedCamera,\n        ResolutionPreset.low, // Optimized to lower resolution for faster processing\n        enableAudio: false,\n        imageFormatGroup: ImageFormatGroup.jpeg,\n      );\n      _initializeControllerFuture = _controller!.initialize().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera controller initialization timed out');\n        },\n      );\n      await _initializeControllerFuture;\n      if (mounted && !_disposed) {\n        setState(() => _isLoadingCamera = false);\n      }\n    } catch (e) {\n      logger.e('Error initializing camera: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _hasCameraError = true;\n          _isLoadingCamera = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _toggleCamera() async {\n    if (_cameras.length < 2) return;\n    setState(() {\n      _isFrontCamera = !_isFrontCamera;\n      _hasCameraError = false;\n      _isLoadingCamera = true;\n      _capturedImage = null;\n      _resultData = null;\n      _noMatch = false;\n    });\n    await _initializeCamera();\n  }\n\n  Future<void> _captureImage() async {\n    if (_controller == null ||\n        _initializeControllerFuture == null ||\n        _hasCameraError ||\n        _isLoadingCamera ||\n        _isCapturing ||\n        _isProcessing || \n        _patientMembers.isEmpty) { // Prevent capture if no members\n      if (_patientMembers.isEmpty && mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Cannot scan: Patient has no registered family members.')),\n        );\n      }\n      return;\n    }\n    setState(() => _isCapturing = true);\n    try {\n      await _initializeControllerFuture;\n      await _controller!.pausePreview();\n      final image = await _controller!.takePicture();\n\n      // Process image (flip if front, resize and compress)\n      final bytes = await File(image.path).readAsBytes();\n      Uint8List processedBytes;\n      if (_isFrontCamera) {\n        processedBytes = await compute(_flipHorizontal, bytes);\n      } else {\n        processedBytes = await compute(_resizeAndCompressBytes, bytes);\n      }\n      await File(image.path).writeAsBytes(processedBytes);\n\n      if (_controller != null && _controller!.value.isInitialized) {\n        await _controller!.resumePreview();\n      }\n\n      if (mounted && !_disposed) {\n        setState(() {\n          _capturedImage = image;\n          _resultData = null;\n          _noMatch = false;\n          _isCapturing = false;\n        });\n      }\n    } catch (e) {\n      logger.e('Error capturing image: $e');\n      if (_controller != null && _controller!.value.isInitialized) {\n        try {\n          await _controller!.resumePreview();\n        } catch (_) {}\n      }\n      if (mounted && !_disposed) setState(() => _isCapturing = false);\n    }\n  }\n\n  static Uint8List _flipHorizontal(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n    final flipped = img.flipHorizontal(image);\n    return _resizeAndCompress(flipped);\n  }\n\n  static Uint8List _resizeAndCompressBytes(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n    return _resizeAndCompress(image);\n  }\n\n  static Uint8List _resizeAndCompress(img.Image image) {\n    const maxSize = 512;\n    img.Image resized = image;\n    if (image.width > maxSize || image.height > maxSize) {\n      if (image.width > image.height) {\n        resized = img.copyResize(image, width: maxSize);\n      } else {\n        resized = img.copyResize(image, height: maxSize);\n      }\n    }\n    return img.encodeJpg(resized, quality: 85);\n  }\n\n  Future<String> _encodeImage(Uint8List bytes) async {\n    return await compute(_encodeBase64, bytes);\n  }\n\n  static String _encodeBase64(Uint8List bytes) {\n    return base64Encode(bytes);\n  }\n\n  Future<void> _sendToApi() async {\n    if (_capturedImage == null || _isProcessing || _patientMembers.isEmpty) return;\n    if (mounted && !_disposed) setState(() => _isProcessing = true);\n\n    try {\n      final imageBytes = await _capturedImage!.readAsBytes();\n      final base64Image = await _encodeImage(imageBytes);\n      \n      // LOGIC: Use the fetched _patientMembers list\n      final membersPayload = _patientMembers.map((m) => {\n          'memberName': m['name'],\n          'memberRelation': m['relation'],\n          'memberImage': m['imageUrl'],\n      }).toList();\n\n      final response = await http.post(\n        Uri.parse('https://una-heliotropic-aspersively.ngrok-free.dev/recognize'),\n        body: {\n          'members': jsonEncode(membersPayload), // Use fetched members\n          'imageUrl': 'data:image/jpeg;base64,$base64Image',\n        },\n      ).timeout(const Duration(seconds: 30));\n\n      if (!mounted || _disposed) return;\n\n      if (response.statusCode == 200) {\n        final result = jsonDecode(response.body);\n        if (result['matchFound']) {\n          _confettiController.play();\n          setState(() {\n            _resultData = result;\n            _noMatch = false;\n          });\n        } else {\n          setState(() {\n            _resultData = null;\n            _noMatch = true;\n          });\n        }\n      } else {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } catch (e) {\n      logger.e('Error sending image to API: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } finally {\n      if (mounted && !_disposed) setState(() => _isProcessing = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Show a loading indicator if fetching members OR setting up camera\n    if (_isFetchingMembers || _isLoadingCamera) {\n      return Scaffold(\n        appBar: AppBar(\n          title: Text(_isFetchingMembers ? 'Loading Patient Data...' : 'Initializing Camera...'),\n          backgroundColor: Colors.blueAccent,\n          elevation: 0,\n        ),\n        body: const Center(child: CircularProgressIndicator()),\n      );\n    }\n    \n    // Check if patient has any family members registered\n    if (_patientMembers.isEmpty) {\n        return Scaffold(\n            appBar: AppBar(\n                title: const Text('Scan Family Member'),\n                backgroundColor: Colors.redAccent,\n                elevation: 0,\n            ),\n            body: Center(\n                child: Padding(\n                    padding: const EdgeInsets.all(32.0),\n                    child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                            const Icon(Icons.group_off, size: 80, color: Colors.red),\n                            const SizedBox(height: 16),\n                            const Text(\n                                'No Family Members Registered',\n                                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n                                textAlign: TextAlign.center,\n                            ),\n                            const SizedBox(height: 8),\n                            const Text(\n                                'The patient connected to your account has no registered family members to verify against.',\n                                textAlign: TextAlign.center,\n                                style: TextStyle(color: Colors.grey),\n                            ),\n                            const SizedBox(height: 24),\n                            ElevatedButton(\n                                onPressed: () => Navigator.pop(context),\n                                child: const Text('Go Back'),\n                            ),\n                        ],\n                    ),\n                ),\n            ),\n        );\n    }\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Scan Family Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        actions: [\n          IconButton(\n            icon: Icon(_isFrontCamera ? Icons.camera_rear : Icons.camera_front),\n            onPressed: _isLoadingCamera || _isCapturing || _isProcessing\n                ? null\n                : _toggleCamera,\n          ),\n        ],\n      ),\n      body: Stack(\n        children: [\n          _hasCameraError\n              ? _buildCameraError()\n              : _capturedImage == null\n                  ? _buildCameraPreview()\n                  : _buildCapturedImageWithAnimation(),\n          Align(\n            alignment: Alignment.topCenter,\n            child: ConfettiWidget(\n              confettiController: _confettiController,\n              blastDirectionality: BlastDirectionality.explosive,\n              shouldLoop: false,\n              numberOfParticles: 50,\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: _capturedImage == null &&\n              !_hasCameraError &&\n              _controller != null &&\n              !_isLoadingCamera\n          ? FloatingActionButton(\n              onPressed: _isCapturing || _isProcessing ? null : _captureImage,\n              backgroundColor: Colors.blueAccent,\n              child: _isCapturing\n                  ? const CircularProgressIndicator(color: Colors.white)\n                  : const Icon(Icons.camera_alt, color: Colors.white),\n            )\n          : null,\n    );\n  }\n\n  Widget _buildCapturedImageWithAnimation() {\n    return Stack(\n      children: [\n        Image.file(\n          File(_capturedImage!.path),\n          width: double.infinity,\n          height: double.infinity,\n          fit: BoxFit.cover,\n        ),\n        if (_isProcessing)\n          Positioned.fill(\n            child: Container(\n              color: Colors.black26,\n              child: Center(\n                child: Container(\n                  width: 250,\n                  height: 250,\n                  decoration: BoxDecoration(\n                    border: Border.all(color: Colors.blueAccent, width: 2),\n                  ),\n                  child: AnimatedBuilder(\n                    animation: _scanAnimationController,\n                    builder: (context, child) {\n                      return Align(\n                        alignment: Alignment(\n                            0, -1 + 2 * _scanAnimationController.value),\n                        child: Container(\n                          height: 4,\n                          width: double.infinity,\n                          color: Colors.blueAccent,\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              ),\n            ),\n          ),\n        Positioned(\n          bottom: 40, // Increased bottom padding\n          left: 20,\n          right: 20,\n          child: _buildBottomControls(),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildBottomControls() {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        if (!_isProcessing)\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _sendToApi,\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.green,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('OK', style: TextStyle(fontSize: 16, color: Colors.white)),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  setState(() {\n                    _capturedImage = null;\n                    _resultData = null;\n                    _noMatch = false;\n                  });\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.red,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('Retake', style: TextStyle(fontSize: 16, color: Colors.white)),\n              ),\n            ],\n          ),\n        const SizedBox(height: 16),\n        if (_resultData != null || _noMatch) _buildResultOverlay(),\n      ],\n    );\n  }\n\n  Widget _buildResultOverlay() {\n    return Center(\n      child: Container(\n        width: MediaQuery.of(context).size.width * 0.8,\n        padding: const EdgeInsets.all(20),\n        decoration: BoxDecoration(\n          color: Colors.white.withOpacity(0.9),\n          borderRadius: BorderRadius.circular(16),\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(0.1),\n              blurRadius: 8,\n              spreadRadius: 2,\n            ),\n          ],\n        ),\n        child: _resultData != null\n            ? Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'Match Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.blueAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                  const SizedBox(height: 16),\n                  if (_resultData!['memberImageUrl'] != null &&\n                      _resultData!['memberImageUrl'].isNotEmpty)\n                    ClipRRect(\n                      borderRadius: BorderRadius.circular(8),\n                      child: Image.network(\n                        _resultData!['memberImageUrl'],\n                        height: 100,\n                        width: 100,\n                        fit: BoxFit.cover,\n                      ),\n                    ),\n                  const SizedBox(height: 12),\n                  Text(\n                    'Name: ${_resultData!['memberName']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Relation: ${_resultData!['memberRelation']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Confidence: ${(_resultData!['confidence'] * 100).toStringAsFixed(2)}%',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                ],\n              )\n            : Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'No Matches Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.redAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                ],\n              ),\n      ).animate().fadeIn(duration: 400.ms),\n    );\n  }\n\n  Widget _buildCameraPreview() {\n    return FutureBuilder<void>(\n      future: _initializeControllerFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.done) {\n          if (snapshot.hasError || _controller == null) return _buildCameraError();\n          return CameraPreview(_controller!).animate().fadeIn(duration: 500.ms);\n        }\n        return const Center(child: CircularProgressIndicator());\n      },\n    );\n  }\n\n  Widget _buildCameraError() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          const Icon(Icons.camera_alt, size: 64, color: Colors.red),\n          const SizedBox(height: 16),\n          const Text(\n            'Camera not available',\n            style: TextStyle(fontSize: 18, color: Colors.red),\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: _initializeCamera,\n            child: const Text('Retry'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _disposed = true;\n    _controller?.dispose();\n    _confettiController.dispose();\n    _scanAnimationController.dispose();\n    super.dispose();\n  }\n}",
        "_encoding": "utf-8"
      },
      "notifications_screen.dart": {
        "_text": "// lib/careTaker/notifications.dart\nimport 'package:flutter/material.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:url_launcher/url_launcher.dart';\nimport 'package:intl/intl.dart';\n\nimport '../utils/notification_helper.dart';\n\nclass NotificationsScreen extends StatefulWidget {\n  const NotificationsScreen({super.key});\n\n  @override\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\n}\n\nclass _NotificationsScreenState extends State<NotificationsScreen> {\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  @override\n  void initState() {\n    super.initState();\n    _markAllAsRead();\n  }\n\n  // --- Utility Functions ---\n\n  Future<String> _fetchUserName(String userUid) async {\n    try {\n      final doc = await _firestore.collection('user').doc(userUid).get();\n      return doc.data()?['fullName'] as String? ?? 'User Not Found';\n    } catch (e) {\n      return 'Error fetching name';\n    }\n  }\n\n  Future<void> _markAllAsRead() async {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return;\n\n    try {\n      final batch = _firestore.batch();\n      final snapshot = await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .where('isRead', isEqualTo: false)\n          .get();\n\n      for (var doc in snapshot.docs) {\n        batch.update(doc.reference, {'isRead': true});\n      }\n      await batch.commit();\n    } catch (e) {\n      if (mounted) {\n        // Handle error silently\n      }\n    }\n  }\n\n  Future<void> _handleCall(String userUid) async {\n    try {\n      final userDoc = await _firestore.collection('user').doc(userUid).get();\n      final phone = userDoc.data()?['phoneNo'] as String?;\n\n      if (phone != null && phone.isNotEmpty) {\n        final url = Uri.parse('tel:$phone');\n        if (await canLaunchUrl(url)) {\n          await launchUrl(url);\n        } else {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('Could not launch phone app.')),\n            );\n          }\n        }\n      } else {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('User phone number not available.')),\n          );\n        }\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error getting phone number: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleAccept(String notificationId, String userUid, String connectionId) async {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return;\n\n    try {\n      // Update connection status\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'accepted',\n        'confirmedBy': caretakerUid,\n      });\n\n      // Update Caretaker's profile\n      await _firestore.collection('caretaker').doc(caretakerUid).update({\n        'isConnected': true,\n        'currentConnectionId': connectionId,\n      });\n\n      // Update User's profile\n      await _firestore.collection('user').doc(userUid).update({\n        'isConnected': true,\n        'currentConnectionId': connectionId,\n      });\n\n      // Delete the notification\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      // Notify user\n      final userDoc = await _firestore.collection('user').doc(userUid).get();\n      final playerIds = List<String>.from(userDoc.data()?['playerIds'] ?? []);\n      await sendNotification(playerIds, 'Your connection request has been accepted!');\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Connection established!')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to establish connection: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleDecline(String notificationId, String userUid, String connectionId) async {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return;\n\n    try {\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'rejected',\n      });\n\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      final userDoc = await _firestore.collection('user').doc(userUid).get();\n      final playerIds = List<String>.from(userDoc.data()?['playerIds'] ?? []);\n      await sendNotification(playerIds, 'Your connection request was declined');\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Connection request declined.')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to decline connection: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleUnbindAccept(String notificationId, String userUid, String connectionId) async {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return;\n\n    try {\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'unbound',\n      });\n\n      // Update both profiles\n      await _firestore.collection('caretaker').doc(caretakerUid).update({\n        'isConnected': false,\n        'currentConnectionId': null,\n      });\n\n      await _firestore.collection('user').doc(userUid).update({\n        'isConnected': false,\n        'currentConnectionId': null,\n      });\n\n      // Delete the notification\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Connection unbound successfully')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to unbind connection: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleUnbindDecline(String notificationId, String connectionId) async {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return;\n\n    try {\n      // Revert unbind request\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'accepted',\n        'requestedBy': null,\n      });\n\n      // Delete the notification\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Unbind request declined')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to decline unbind: $e')),\n        );\n      }\n    }\n  }\n\n  // --- Stream and UI Builders ---\n\n  Stream<QuerySnapshot> _getNotificationsStream() {\n    final caretakerUid = _auth.currentUser?.uid;\n    if (caretakerUid == null) return Stream.empty();\n\n    return _firestore\n        .collection('caretaker')\n        .doc(caretakerUid)\n        .collection('notifications')\n        .orderBy('createdAt', descending: true)\n        .snapshots();\n  }\n\n  Widget _buildNotificationCard(DocumentSnapshot doc) {\n    final data = doc.data() as Map<String, dynamic>;\n    final type = data['type'] as String? ?? 'general';\n    final isRead = data['isRead'] as bool? ?? false;\n    final senderUid = data['from'] as String?;\n    final notificationMessage = data['message'] as String? ?? 'No message.';\n    final connectionId = data['connectionId'] as String?;\n\n    TextStyle textStyle = const TextStyle(fontWeight: FontWeight.normal);\n    Color cardColor = Colors.white;\n    IconData icon = Icons.info;\n\n    if (type == 'connection_request') {\n      textStyle = const TextStyle(\n        fontWeight: FontWeight.bold,\n        color: Colors.blueAccent,\n      );\n      cardColor = Colors.blue.shade50;\n      icon = Icons.person_add;\n    } else if (type == 'unbind_request') {\n      textStyle = const TextStyle(\n        fontWeight: FontWeight.bold,\n        color: Colors.orange,\n      );\n      cardColor = Colors.orange.shade50;\n      icon = Icons.link_off;\n    } else if (!isRead) {\n      cardColor = Colors.yellow.shade100;\n    }\n\n    return Card(\n      elevation: 3,\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n      color: cardColor,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(12.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            ListTile(\n              leading: Icon(icon, color: Colors.blueAccent),\n              title: (type == 'connection_request' && senderUid != null)\n                  ? FutureBuilder<String>(\n                      future: _fetchUserName(senderUid),\n                      builder: (context, snapshot) {\n                        String userName = snapshot.data ?? 'Loading User...';\n                        String displayMessage = 'Connection request from $userName.';\n                        return Text(displayMessage, style: textStyle);\n                      },\n                    )\n                  : (type == 'unbind_request' && senderUid != null)\n                      ? FutureBuilder<String>(\n                          future: _fetchUserName(senderUid),\n                          builder: (context, snapshot) {\n                            String userName = snapshot.data ?? 'Loading User...';\n                            String displayMessage = 'Unbind request from $userName.';\n                            return Text(displayMessage, style: textStyle);\n                          },\n                        )\n                      : Text(notificationMessage, style: textStyle),\n              subtitle: Text(\n                'Received: ${DateFormat('MMM dd, hh:mm a').format((data['createdAt'] as Timestamp).toDate())}',\n                style: const TextStyle(fontSize: 12, color: Colors.grey),\n              ),\n              contentPadding: EdgeInsets.zero,\n            ),\n\n            if ((type == 'connection_request' || type == 'unbind_request') && senderUid != null && connectionId != null)\n              Padding(\n                padding: const EdgeInsets.only(top: 8.0),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  children: [\n                    if (type == 'connection_request') ...[\n                      Expanded(\n                        flex: 1,\n                        child: OutlinedButton.icon(\n                          icon: const Icon(Icons.phone, size: 18, color: Colors.green),\n                          label: const Text('Call', style: TextStyle(fontSize: 13, color: Colors.green)),\n                          onPressed: () => _handleCall(senderUid),\n                          style: OutlinedButton.styleFrom(\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                            side: const BorderSide(color: Colors.green),\n                          ),\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      Expanded(\n                        flex: 2,\n                        child: ElevatedButton.icon(\n                          icon: const Icon(Icons.check, size: 18, color: Colors.white),\n                          label: const Text('Accept', style: TextStyle(fontSize: 13, color: Colors.white)),\n                          onPressed: () => _handleAccept(doc.id, senderUid, connectionId),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.blueAccent,\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                          ),\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      Expanded(\n                        flex: 2,\n                        child: ElevatedButton.icon(\n                          icon: const Icon(Icons.close, size: 18, color: Colors.white),\n                          label: const Text('Decline', style: TextStyle(fontSize: 13, color: Colors.white)),\n                          onPressed: () => _handleDecline(doc.id, senderUid, connectionId),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.red,\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                          ),\n                        ),\n                      ),\n                    ] else if (type == 'unbind_request') ...[\n                      Expanded(\n                        flex: 1,\n                        child: OutlinedButton.icon(\n                          icon: const Icon(Icons.phone, size: 18, color: Colors.green),\n                          label: const Text('Call', style: TextStyle(fontSize: 13, color: Colors.green)),\n                          onPressed: () => _handleCall(senderUid),\n                          style: OutlinedButton.styleFrom(\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                            side: const BorderSide(color: Colors.green),\n                          ),\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      Expanded(\n                        flex: 2,\n                        child: ElevatedButton.icon(\n                          icon: const Icon(Icons.check, size: 18, color: Colors.white),\n                          label: const Text('Accept', style: TextStyle(fontSize: 13, color: Colors.white)),\n                          onPressed: () => _handleUnbindAccept(doc.id, senderUid, connectionId),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.orange,\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                          ),\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      Expanded(\n                        flex: 2,\n                        child: ElevatedButton.icon(\n                          icon: const Icon(Icons.close, size: 18, color: Colors.white),\n                          label: const Text('Decline', style: TextStyle(fontSize: 13, color: Colors.white)),\n                          onPressed: () => _handleUnbindDecline(doc.id, connectionId),\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.red,\n                            padding: const EdgeInsets.symmetric(horizontal: 0),\n                          ),\n                        ),\n                      ),\n                    ],\n                  ],\n                ),\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Notifications'),\n        centerTitle: true,\n        backgroundColor: Colors.blueAccent,\n      ),\n      body: StreamBuilder<QuerySnapshot>(\n        stream: _getNotificationsStream(),\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          if (snapshot.hasError) {\n            return Center(\n              child: Text('Error loading notifications: ${snapshot.error}'),\n            );\n          }\n          if (snapshot.data == null || snapshot.data!.docs.isEmpty) {\n            return const Center(child: Text('You have no notifications.'));\n          }\n\n          final notifications = snapshot.data!.docs;\n\n          return ListView.builder(\n            itemCount: notifications.length,\n            itemBuilder: (context, index) {\n              return _buildNotificationCard(notifications[index]);\n            },\n          );\n        },\n      ),\n    );\n  }\n}",
        "_encoding": "utf-8"
      },
      "profile_screen.dart": {
        "_text": "import 'package:flutter/material.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport '../../welcome_page.dart';\nimport '../report_page.dart';\n\nclass Profile extends StatefulWidget {\n  const Profile({super.key});\n\n  @override\n  State<Profile> createState() => _ProfileState();\n}\n\nclass _ProfileState extends State<Profile> {\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  Map<String, dynamic>? _userData;\n  bool _isLoading = true;\n\n  @override\n  void initState() {\n    super.initState();\n    _fetchUserData();\n  }\n\n  // --- Live Data Fetch Function ---\n  void _fetchUserData() async {\n    final user = _auth.currentUser;\n    if (user == null) {\n      if (mounted) {\n        setState(() => _isLoading = false);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('No authenticated user found.')),\n        );\n      }\n      return;\n    }\n\n    try {\n      final docSnapshot =\n          await _firestore.collection('caretaker').doc(user.uid).get();\n\n      if (docSnapshot.exists && mounted) {\n        setState(() {\n          _userData = docSnapshot.data()!;\n          _isLoading = false;\n        });\n      } else if (mounted) {\n        setState(() => _isLoading = false);\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n              content: Text('User profile data not found in Firestore.')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        setState(() => _isLoading = false);\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error fetching profile data: $e')),\n        );\n      }\n    }\n  }\n\n  // --- Log Out Function ---\n  void _logout() async {\n    await _auth.signOut();\n    if (mounted) {\n      Navigator.of(context).pushAndRemoveUntil(\n        MaterialPageRoute(builder: (context) => const WelcomePage()),\n        (Route<dynamic> route) => false,\n      );\n    }\n  }\n\n  // Helper to display experience/relation based on type\n  String _getRoleDetail() {\n    final type = _userData?['caregiverType'];\n    if (type == 'nurse') {\n      final years = _userData?['experienceYears'] ?? 0;\n      return 'Experience: $years years (Nurse)';\n    } else if (type == 'relative') {\n      final relation = _userData?['relation'] ?? 'N/A';\n      return 'Relation: $relation (Relative)';\n    }\n    return 'Role: Caretaker';\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return Scaffold(\n        appBar: AppBar(\n          title: const Text('Profile'),\n          centerTitle: true,\n          backgroundColor: Colors.indigo,\n        ),\n        body: const Center(\n          child: CircularProgressIndicator(color: Colors.indigo),\n        ),\n      );\n    }\n\n    final profileImageUrl = _userData?['profileImageUrl'];\n\n    Widget profileImageWidget;\n    if (profileImageUrl != null && profileImageUrl.isNotEmpty) {\n      profileImageWidget = CircleAvatar(\n        radius: 60,\n        backgroundImage: NetworkImage(profileImageUrl),\n        backgroundColor: Colors.indigo.shade50,\n      );\n    } else {\n      profileImageWidget = CircleAvatar(\n        radius: 60,\n        backgroundColor: Colors.indigo.shade50,\n        child: const Icon(Icons.person, size: 60, color: Colors.indigo),\n      );\n    }\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Profile'),\n        centerTitle: true,\n        backgroundColor: Colors.indigo,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(20),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n          children: [\n            const SizedBox(height: 50),\n\n            // Profile Card\n            Card(\n              elevation: 8,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(16),\n              ),\n              child: Padding(\n                padding: const EdgeInsets.all(24),\n                child: Column(\n                  children: [\n                    profileImageWidget,\n                    const SizedBox(height: 16),\n                    Text(\n                      _userData?['fullName'] ?? 'User Name Not Set',\n                      style: const TextStyle(\n                        fontSize: 28,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.indigo,\n                      ),\n                    ),\n                    const SizedBox(height: 8),\n                    Text(\n                      _getRoleDetail(),\n                      style: const TextStyle(fontSize: 16, color: Colors.black87),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      'Contact: ${_userData?['phoneNo'] ?? 'N/A'}',\n                      style: const TextStyle(fontSize: 16, color: Colors.black54),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n\n            const SizedBox(height: 40),\n\n            // Reports Sent Section\n            Card(\n              elevation: 4,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n              child: Column(\n                children: [\n                  ListTile(\n                    leading:\n                        const Icon(Icons.file_present, color: Colors.indigo),\n                    title: const Text(\n                      'Reports Sent',\n                      style: TextStyle(fontWeight: FontWeight.w500),\n                    ),\n                    trailing: const Icon(Icons.arrow_forward_ios,\n                        size: 16, color: Colors.grey),\n                    onTap: () {\n                      // Navigate to reports screen\n                    },\n                  ),\n\n                  // 🔹 Added Report Option\n                  ListTile(\n                    leading: const Icon(Icons.report, color: Colors.orange),\n                    title: const Text('Report',\n                        style: TextStyle(fontWeight: FontWeight.w500)),\n                    trailing: const Icon(Icons.arrow_forward_ios,\n                        size: 16, color: Colors.grey),\n                    onTap: () => Navigator.push(\n                      context,\n                      MaterialPageRoute(\n                        builder: (context) =>\n                            const ReportPage(reporterRole: 'caretaker'),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n\n            const SizedBox(height: 20),\n\n            // Log Out Setting\n            Card(\n              elevation: 4,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n              child: ListTile(\n                leading: const Icon(Icons.logout, color: Colors.red),\n                title: const Text(\n                  'Log Out',\n                  style: TextStyle(\n                    fontWeight: FontWeight.w500,\n                    color: Colors.red,\n                  ),\n                ),\n                trailing: const Icon(Icons.arrow_forward_ios,\n                    size: 16, color: Colors.grey),\n                onTap: _logout,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      },
      "user_screen.dart": {
        "_text": "import 'package:flutter/material.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:intl/intl.dart';\n\nclass UserScreen extends StatefulWidget {\n  const UserScreen({super.key});\n\n  @override\n  State<UserScreen> createState() => _UserScreenState();\n}\n\nclass _UserScreenState extends State<UserScreen> {\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  String? _patientUid;\n  String? _patientName;\n  bool _isConnected = false;\n  bool _isLoading = true;\n\n  // State for filtering tabs\n  String _selectedTab = 'Today';\n\n  @override\n  void initState() {\n    super.initState();\n    _checkConnectionStatus();\n  }\n\n  // --- Connection & Patient Data Fetch ---\n  Future<void> _checkConnectionStatus() async {\n    final caretakerUid = _auth.currentUser?.uid;\n\n    if (caretakerUid == null || !mounted) {\n      if (mounted) setState(() => _isLoading = false);\n      return;\n    }\n\n    try {\n      final caretakerDoc = await _firestore\n        .collection('caretaker')\n        .doc(caretakerUid)\n        .get();\n      final data = caretakerDoc.data();\n\n      // Check for isConnected and currentConnectionId\n      final isConnectedField = data?['isConnected'] as bool? ?? false;\n      final connectionId = data?['currentConnectionId'] as String?;\n\n      if (isConnectedField && connectionId != null && connectionId.isNotEmpty) {\n        final connectionDoc = await _firestore\n          .collection('connections')\n          .doc(connectionId)\n          .get();\n        final patientUid = connectionDoc.data()?['user_uid'] as String?;\n\n        if (patientUid != null) {\n          final patientDoc = await _firestore\n            .collection('user')\n            .doc(patientUid)\n            .get();\n\n          if (patientDoc.exists) {\n            if (mounted) {\n              setState(() {\n                _patientUid = patientUid;\n                _patientName =\n                  patientDoc.data()?['fullName'] ?? 'Unknown Patient';\n                _isConnected = true;\n                _isLoading = false; // FINALLY DONE LOADING\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (mounted) {\n        setState(() {\n          _patientUid = null; // Ensure patient UID is null if not connected\n          _isConnected = false;\n          _isLoading = false;\n        });\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error checking connection: $e')),\n        );\n        setState(() {\n          _patientUid = null;\n          _isConnected = false;\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  // --- Task Stream Filtering Function ---\n  Stream<QuerySnapshot<Map<String, dynamic>>> _getTasksStream() {\n    if (_patientUid == null) return Stream.empty();\n\n    final coll = _firestore.collection('user').doc(_patientUid).collection('to_dos');\n\n    final now = DateTime.now();\n    final todayMidnight = DateTime(now.year, now.month, now.day);\n    final tomorrowMidnight = todayMidnight.add(const Duration(days: 1));\n    final todayStart = Timestamp.fromDate(todayMidnight);\n    final todayEnd = Timestamp.fromDate(tomorrowMidnight);\n\n    // FIX: Using correct path for recurring tasks\n    final recurringColl = _firestore\n      .collection('user')\n      .doc(_patientUid)\n      .collection('recurring_tasks');\n\n    if (_selectedTab == 'Recurring') {\n      return recurringColl.orderBy('createdAt', descending: true).snapshots();\n    } else if (_selectedTab == 'Today') {\n      return coll\n        .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n        .where('dueDate', isLessThan: todayEnd)\n        .orderBy('dueDate', descending: false)\n        .snapshots();\n    } else if (_selectedTab == 'Upcoming') {\n      return coll\n        .where('dueDate', isGreaterThanOrEqualTo: todayEnd)\n        .orderBy('dueDate', descending: false)\n        .snapshots();\n    } else if (_selectedTab == 'Completed') {\n      // Non-indexed query for Completed tab (sorted locally)\n      return coll.where('completed', isEqualTo: true).snapshots();\n    } else if (_selectedTab == 'All') {\n      return coll.orderBy('dueDate', descending: true).snapshots();\n    } else {\n      return Stream.empty();\n    }\n  }\n\n  // --- Utility Methods ---\n\n  // Helper to format Timestamp (safe)\n  String _formatTimestamp(Timestamp? ts) {\n    if (ts == null) return 'N/A';\n    return DateFormat('MMM dd, hh:mm a').format(ts.toDate());\n  }\n\n  // Helper to format Time Map (safe)\n  String _formatTimeMap(Map<String, dynamic>? timeMap) {\n    if (timeMap == null) return 'N/A';\n    final hour = (timeMap['hour'] as int? ?? 0).toString().padLeft(2, '0');\n    final min = (timeMap['min'] as int? ?? 0).toString().padLeft(2, '0');\n    return '$hour:$min';\n  }\n\n  // --- UI Builders ---\n\n  Widget _buildPatientDetails() {\n    return Card(\n      elevation: 4,\n      margin: const EdgeInsets.all(16),\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            const Text(\n              '👤 Patient Details',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n            ),\n            const SizedBox(height: 8),\n            Text('Name: ${_patientName ?? 'Loading...'}'),\n            const Text('Age: 65'), // Static for now\n            const Text(\n              'Condition: Dementia, recovering from surgery',\n            ), // Static for now\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTaskCard(DocumentSnapshot doc) {\n    // We can safely cast data()! to Map<String, dynamic> since we check doc.exists in the StreamBuilder\n    final task = doc.data() as Map<String, dynamic>;\n    final isTemplate = _selectedTab == 'Recurring';\n\n    // Fields from Firestore document\n    final completed = isTemplate\n      ? false\n      : (task['completed'] as bool? ?? false);\n    final title = task['task'] as String? ?? 'Untitled Task';\n    final details = task['description'] as String? ?? 'No details provided.';\n    final dueDate = task['dueDate'] as Timestamp?;\n    final reminderTime = task['reminderTime'] as Timestamp?;\n\n    final Map<String, dynamic>? dailyDueTime =\n      task['dailyDueTime'] as Map<String, dynamic>?;\n    final Map<String, dynamic>? dailyReminderTime =\n      task['dailyReminderTime'] as Map<String, dynamic>?;\n\n    return Card(\n      elevation: 3,\n      margin: const EdgeInsets.symmetric(\n        horizontal: 16,\n        vertical: 8,\n      ),\n      child: ExpansionTile(\n        key: Key(doc.id),\n        leading: Icon(\n          isTemplate\n            ? Icons.repeat\n            : (completed ? Icons.check_circle : Icons.list_alt),\n          color: isTemplate\n            ? Colors.indigo\n            : (completed ? Colors.green : Colors.orange),\n        ),\n        title: Text(\n          title,\n          style: TextStyle(\n            decoration: completed ? TextDecoration.lineThrough : null,\n            fontWeight: FontWeight.w500,\n          ),\n        ),\n        // Display status/due date in subtitle\n        subtitle: isTemplate\n          ? const Text('Daily Template', style: TextStyle(color: Colors.blue))\n          : Text(\n              'Status: ${completed ? 'Completed' : 'Pending'} | Due: ${_formatTimestamp(dueDate)}',\n              style: TextStyle(color: completed ? Colors.green : Colors.red),\n            ),\n        children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                // Description (if present)\n                if (details.isNotEmpty)\n                  Padding(\n                    padding: const EdgeInsets.only(bottom: 8.0),\n                    child: Text('Details: $details'),\n                  ),\n                const Divider(height: 1, color: Colors.grey),\n                const SizedBox(height: 8),\n\n                // Displaying conditional fields\n                Text(\n                  'Created At: ${_formatTimestamp(task['createdAt'] as Timestamp?)}',\n                ),\n                Text('Created By: ${task['createdBy'] as String? ?? 'N/A'}'),\n\n                if (!isTemplate) ...[\n                  Text(\n                    'Scheduled Reminder: ${reminderTime is Timestamp ? _formatTimestamp(reminderTime) : 'None'}',\n                  ),\n                ],\n\n                if (isTemplate) ...[\n                  Text('Daily Due Time: ${_formatTimeMap(dailyDueTime)}'),\n                  Text(\n                    'Daily Reminder Time: ${_formatTimeMap(dailyReminderTime)}',\n                  ),\n                ],\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _filterChip(String label) {\n    return ChoiceChip(\n      label: const Text('Approved'),\n      selected: _selectedTab == 'Approved',\n      onSelected: (sel) {\n        if (sel) setState(() => _selectedTab = 'Approved');\n      },\n    );\n  }\n\n  Widget _buildNotConnectedState() {\n    return const Center(\n      child: Padding(\n        padding: EdgeInsets.all(32.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Icon(Icons.person_off, size: 80, color: Colors.red),\n            SizedBox(height: 16),\n            Text(\n              'Not Connected to any Patient',\n              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),\n            ),\n            SizedBox(height: 8),\n            Text(\n              'Please ensure your profile is linked to a patient user to view and manage tasks.',\n              textAlign: TextAlign.center,\n              style: TextStyle(color: Colors.grey),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  // --- Face Scanner Navigation Handler (UPDATED) ---\n  void _openFaceScanner() {\n    // Only navigate if connected and patientUid is known\n    if (_isConnected && _patientUid != null) {\n      \n    } else {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(content: Text('Cannot open scanner: Not connected to a patient.')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return Scaffold(\n        appBar: AppBar(\n          title: const Text('Loading...'),\n          backgroundColor: Colors.indigo,\n        ),\n        body: const Center(child: CircularProgressIndicator()),\n      );\n    }\n\n    if (!_isConnected) {\n      return Scaffold(\n        appBar: AppBar(\n          title: const Text('Caretaker View'),\n          centerTitle: true,\n          backgroundColor: Colors.indigo,\n          automaticallyImplyLeading: false, // NO BACK BUTTON\n        ),\n        body: _buildNotConnectedState(),\n      );\n    }\n\n    // Only show the FloatingActionButton if _isConnected is true and we have a patient UID\n    final showScannerButton = _isConnected && _patientUid != null;\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Patient: ${_patientName ?? 'N/A'}'),\n        centerTitle: true,\n        backgroundColor: Colors.indigo,\n        automaticallyImplyLeading: false, // NO BACK BUTTON\n        actions: const [\n          // Add/Edit buttons removed for read-only view\n        ],\n      ),\n      // FLOATING ACTION BUTTON IMPLEMENTATION: Conditional on connection status\n      floatingActionButton: showScannerButton\n        ? FloatingActionButton.extended(\n            onPressed: _openFaceScanner,\n            label: const Text('Face Scan', style: TextStyle(color: Colors.white)),\n            icon: const Icon(Icons.face_unlock_outlined, color: Colors.white),\n            backgroundColor: Colors.indigo,\n            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n            elevation: 6,\n          )\n        : null, // Don't show the button if not connected\n      body: Column(\n        children: [\n          _buildPatientDetails(),\n          const Divider(),\n          // Task Filtering Chips\n          SingleChildScrollView(\n            scrollDirection: Axis.horizontal,\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n            child: Row(\n              children: [\n                _filterChip('Today'),\n                const SizedBox(width: 8),\n                _filterChip('Upcoming'),\n                const SizedBox(width: 8),\n                _filterChip('Completed'),\n                const SizedBox(width: 8),\n                _filterChip('All'),\n                const SizedBox(width: 8),\n                _filterChip('Recurring'),\n              ],\n            ),\n          ),\n          Expanded(\n            child: StreamBuilder<QuerySnapshot>(\n              stream: _getTasksStream(),\n              builder: (context, snapshot) {\n                if (snapshot.hasError) {\n                  return Center(\n                    child: Text('Error loading tasks: ${snapshot.error}'),\n                  );\n                }\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n                if (snapshot.data == null || snapshot.data!.docs.isEmpty) {\n                  return Center(\n                    child: Text(\n                      'No ${_selectedTab} tasks found for this patient.',\n                    ),\n                  );\n                }\n\n                var docs = snapshot.data!.docs;\n\n                // FIX: Manual Sorting for 'Completed' tab\n                if (_selectedTab == 'Completed') {\n                  docs.sort((a, b) {\n                    // FIX IS HERE: Explicitly cast the data() result to Map<String, dynamic>\n                    final aData = a.data() as Map<String, dynamic>;\n                    final bData = b.data() as Map<String, dynamic>;\n\n                    final aDate =\n                      (aData['dueDate'] as Timestamp?)?.toDate() ??\n                      DateTime(0);\n                    final bDate =\n                      (bData['dueDate'] as Timestamp?)?.toDate() ??\n                      DateTime(0);\n\n                    // Sort descending (newest completed tasks first)\n                    return bDate.compareTo(aDate);\n                  });\n                }\n\n                return ListView.builder(\n                  itemCount: docs.length,\n                  itemBuilder: (context, index) {\n                    return _buildTaskCard(docs[index]);\n                  },\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}",
        "_encoding": "utf-8"
      }
    },
    "user": {
      "caretaker": {
        "caretaker_detail_screen.dart": {
          "_text": "// lib/user/caretaker/caretaker_detail_screen.dart\n// lib/user/caretaker/caretaker_detail_screen.dart\nimport 'package:flutter/material.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nclass CaretakerDetailScreen extends StatelessWidget {\n  final String caretakerUid;\n  final Map<String, dynamic> caretakerData;\n  final VoidCallback onConnect;\n\n  const CaretakerDetailScreen({\n    super.key,\n    required this.caretakerUid,\n    required this.caretakerData,\n    required this.onConnect,\n  });\n\n  Widget _buildNurseBadge() {\n    return Positioned(\n      top: 0,\n      right: 0,\n      child: Container(\n        padding: const EdgeInsets.all(4),\n        decoration: const BoxDecoration(\n          color: Colors.blue,\n          shape: BoxShape.circle,\n        ),\n        child: const Icon(\n          Icons.local_hospital,\n          size: 16,\n          color: Colors.white,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isNurse = caretakerData['caregiverType'] == 'nurse';\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(caretakerData['fullName'] ?? 'Caretaker'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Center(\n                child: Stack(\n                  children: [\n                    CircleAvatar(\n                      radius: 60,\n                      backgroundColor: Colors.grey[300],\n                      backgroundImage: NetworkImage(\n                        caretakerData['profileImageUrl'] ?? '',\n                      ),\n                      child: const Icon(Icons.person, size: 60, color: Colors.blueAccent),\n                    ),\n                    if (isNurse) _buildNurseBadge(),\n                  ],\n                ),\n              ),\n              const SizedBox(height: 16),\n              Center(\n                child: Column(\n                  children: [\n                    Text(\n                      caretakerData['fullName'] ?? 'Unnamed',\n                      style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n                    ),\n                    Text(\n                      '@${caretakerData['username'] ?? ''}',\n                      style: const TextStyle(fontSize: 16, color: Colors.grey),\n                    ),\n                  ],\n                ),\n              ),\n              const SizedBox(height: 24),\n              Card(\n                elevation: 3,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                child: Padding(\n                  padding: const EdgeInsets.all(16.0),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      _buildInfoRow(Icons.info_outline, 'Bio', caretakerData['bio'] ?? ''),\n                      _buildInfoRow(Icons.location_city, 'City', caretakerData['city'] ?? ''),\n                      _buildInfoRow(Icons.phone, 'Phone', caretakerData['phoneNo'] ?? ''),\n                      if (isNurse) ...[\n                        _buildInfoRow(Icons.work_history, 'Experience Years', '${caretakerData['experienceYears'] ?? 0} years'),\n                        _buildInfoRow(Icons.description, 'Experience Bio', caretakerData['experienceBio'] ?? ''),\n                        _buildInfoRow(Icons.school, 'Nursing Qualification', caretakerData['graduationOnNursing'] ?? ''),\n                        if (caretakerData['graduationCertificateUrl']?.isNotEmpty ?? false)\n                          _buildInfoRow(Icons.picture_as_pdf, 'Certificate', 'View Certificate'),\n                      ] else\n                        _buildInfoRow(Icons.family_restroom, 'Relation', caretakerData['relation'] ?? ''),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 24),\n              Row(\n                children: [\n                  Expanded(\n                    child: ElevatedButton.icon(\n                      onPressed: () async {\n                        final phone = caretakerData['phoneNo'];\n                        if (phone != null && phone.isNotEmpty) {\n                          final url = Uri.parse('tel:$phone');\n                          final can = await canLaunchUrl(url);\n                          if (can) {\n                            await launchUrl(url);\n                          } else if (context.mounted) {\n                            ScaffoldMessenger.of(context).showSnackBar(\n                              const SnackBar(content: Text('Could not launch phone app')),\n                            );\n                          }\n                        }\n                      },\n                      icon: const Icon(Icons.phone, color: Colors.white),\n                      label: const Text('Call', style: TextStyle(color: Colors.white)),\n                      style: ElevatedButton.styleFrom(backgroundColor: Colors.green),\n                    ),\n                  ),\n                  const SizedBox(width: 16),\n                  Expanded(\n                    child: ElevatedButton.icon(\n                      onPressed: onConnect,\n                      icon: const Icon(Icons.link, color: Colors.white),\n                      label: const Text('Connect', style: TextStyle(color: Colors.white)),\n                      style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                    ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildInfoRow(IconData icon, String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 8.0),\n      child: Row(\n        children: [\n          Icon(icon, color: Colors.blueAccent),\n          const SizedBox(width: 8),\n          Expanded(\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(label, style: const TextStyle(fontWeight: FontWeight.bold)),\n                Text(value),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "caretaker_requests_screen.dart": {
          "_text": "// lib/user/caretaker/caretaker_requests_screen.dart\n// lib/user/caretaker/caretaker_requests_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/logger.dart';\n\nimport 'caretaker_detail_screen.dart';\n\nfinal logger = Logger();\n\nclass CaretakerRequestsScreen extends StatefulWidget {\n  const CaretakerRequestsScreen({super.key});\n\n  @override\n  State<CaretakerRequestsScreen> createState() => _CaretakerRequestsScreenState();\n}\n\nclass _CaretakerRequestsScreenState extends State<CaretakerRequestsScreen> {\n  final _firestore = FirebaseFirestore.instance;\n  List<QueryDocumentSnapshot> _pendingRequests = [];\n  bool _isLoading = true;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadPendingRequests();\n  }\n\n  Future<void> _loadPendingRequests() async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid == null) {\n      setState(() => _isLoading = false);\n      return;\n    }\n\n    try {\n      final connectionsQuery = await _firestore\n          .collection('connections')\n          .where('user_uid', isEqualTo: uid)\n          .where('status', isEqualTo: 'pending')\n          .orderBy('timestamp', descending: true)\n          .get();\n\n      final pendingUids = connectionsQuery.docs.map((doc) => doc.data()['caretaker_uid']).toList().toSet().toList();\n\n      if (pendingUids.isEmpty) {\n        setState(() => _isLoading = false);\n        return;\n      }\n\n      final query = await _firestore\n          .collection('caretaker')\n          .where('uid', whereIn: pendingUids)\n          .get();\n\n      setState(() {\n        _pendingRequests = query.docs;\n        _isLoading = false;\n      });\n    } catch (e) {\n      logger.e('Error loading pending requests: $e');\n      setState(() => _isLoading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Pending Requests'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator())\n          : _pendingRequests.isEmpty\n              ? const Center(child: Text('No pending requests'))\n              : ListView.builder(\n                  itemCount: _pendingRequests.length,\n                  itemBuilder: (context, index) {\n                    final caretaker = _pendingRequests[index].data() as Map<String, dynamic>;\n                    final caretakerUid = _pendingRequests[index].id;\n                    return ListTile(\n                      onTap: () {\n                        Navigator.push(\n                          context,\n                          MaterialPageRoute(\n                            builder: (context) => CaretakerDetailScreen(\n                              caretakerUid: caretakerUid,\n                              caretakerData: caretaker,\n                              onConnect: () {}, // No connect for pending\n                            ),\n                          ),\n                        );\n                      },\n                      leading: CircleAvatar(\n                        backgroundImage: NetworkImage(caretaker['profileImageUrl'] ?? ''),\n                        child: const Icon(Icons.person),\n                      ),\n                      title: Text(caretaker['fullName'] ?? ''),\n                      subtitle: Text('@${caretaker['username'] ?? ''} - Pending'),\n                    );\n                  },\n                ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "caretaker_screen.dart": {
          "_text": "// lib/user/caretaker/caretaker_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/Logger.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nimport '../../utils/notification_helper.dart';\nimport 'caretaker_detail_screen.dart';\nimport 'caretaker_requests_screen.dart';\nimport 'connection_history_screen.dart';\n\nfinal logger = Logger();\n\nclass CaretakerScreen extends StatefulWidget {\n  const CaretakerScreen({super.key});\n\n  @override\n  State<CaretakerScreen> createState() => _CaretakerScreenState();\n}\n\nclass _CaretakerScreenState extends State<CaretakerScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  final _searchController = TextEditingController();\n  String _search = '';\n\n  @override\n  void initState() {\n    super.initState();\n    _searchController.addListener(() => setState(() => _search = _searchController.text.toLowerCase()));\n  }\n\n  // REAL-TIME STREAMS\n\n  // Stream for user's connection status\n  Stream<DocumentSnapshot> _getUserStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore.collection('user').doc(uid).snapshots();\n  }\n\n  // Stream for available caretakers - REMOVED THE isConnected FILTER\n  Stream<QuerySnapshot> _getAvailableCaretakersStream() {\n    return _firestore\n        .collection('caretaker')\n        .where('isBanned', isEqualTo: false).where('isConnected', isEqualTo: false)\n        .snapshots();\n  }\n\n  // Stream for connection details (if connected)\n  Stream<DocumentSnapshot?> _getConnectionStream(String? connectionId) {\n    if (connectionId == null) return Stream.value(null);\n    return _firestore.collection('connections').doc(connectionId).snapshots();\n  }\n\n  // Stream for connected caretaker details\n  Stream<DocumentSnapshot?> _getConnectedCaretakerStream(String? caretakerUid) {\n    if (caretakerUid == null) return Stream.value(null);\n    return _firestore.collection('caretaker').doc(caretakerUid).snapshots();\n  }\n\n  // ACTIONS\n\n  Future<void> _sendRequest(String caretakerUid) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n\n    try {\n      // Check if there's already a pending request\n      final existingRequests = await _firestore\n          .collection('connections')\n          .where('user_uid', isEqualTo: uid)\n          .where('caretaker_uid', isEqualTo: caretakerUid)\n          .where('status', whereIn: ['pending', 'accepted'])\n          .get();\n      \n      if (existingRequests.docs.isNotEmpty) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('You already have a request or connection with this caretaker')),\n          );\n        }\n        return;\n      }\n\n      // Check if caretaker is already connected to someone else\n      final caretakerDoc = await _firestore.collection('caretaker').doc(caretakerUid).get();\n      final isCaretakerConnected = caretakerDoc.data()?['isConnected'] == true;\n      \n      if (isCaretakerConnected) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('This caretaker is already connected to another user')),\n          );\n        }\n        return;\n      }\n\n      final ref = await _firestore.collection('connections').add({\n        'user_uid': uid,\n        'caretaker_uid': caretakerUid,\n        'status': 'pending',\n        'timestamp': Timestamp.now(),\n        'confirmedBy': null,\n        'requestedBy': uid,\n      });\n\n      // Notify caretaker\n      final playerIds = List<String>.from(\n        caretakerDoc.data()?['playerIds'] ?? [],\n      );\n      await sendNotification(playerIds, 'New connection request from user');\n\n      // Add to notifications subcollection with connectionId\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .add({\n            'type': 'connection_request',\n            'message': 'Connection request from user',\n            'from': uid,\n            'to': caretakerUid,\n            'createdAt': Timestamp.now(),\n            'isRead': false,\n            'connectionId': ref.id,\n          });\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Request sent!')));\n      }\n    } catch (e) {\n      logger.e('Error sending request: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e')));\n      }\n    }\n  }\n\n  Future<void> _requestUnbind(String connectionId, String caretakerUid) async {\n    if (!mounted) return;\n\n    try {\n      await _firestore\n          .collection('connections')\n          .doc(connectionId)\n          .update({\n            'status': 'unbind_requested',\n            'requestedBy': _auth.currentUser?.uid,\n          });\n\n      // Notify caretaker\n      final caretakerDoc = await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .get();\n      final playerIds = List<String>.from(\n        caretakerDoc.data()?['playerIds'] ?? [],\n      );\n      await sendNotification(playerIds, 'Unbind request from user');\n\n      await _firestore\n          .collection('caretaker')\n          .doc(caretakerUid)\n          .collection('notifications')\n          .add({\n            'type': 'unbind_request',\n            'message': 'Unbind request from user',\n            'from': _auth.currentUser?.uid,\n            'to': caretakerUid,\n            'createdAt': Timestamp.now(),\n            'isRead': false,\n            'connectionId': connectionId,\n          });\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Unbind request sent')));\n      }\n    } catch (e) {\n      logger.e('Error requesting unbind: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e')));\n      }\n    }\n  }\n\n  Future<void> _confirmUnbind(String connectionId, String caretakerUid) async {\n    if (!mounted) return;\n\n    try {\n      await _firestore\n          .collection('connections')\n          .doc(connectionId)\n          .update({\n            'status': 'unbound',\n          });\n\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        await _firestore.collection('user').doc(uid).update({\n          'isConnected': false,\n          'currentConnectionId': null,\n        });\n      }\n\n      await _firestore.collection('caretaker').doc(caretakerUid).update({\n        'isConnected': false,\n        'currentConnectionId': null,\n      });\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Unbound successfully')));\n      }\n    } catch (e) {\n      logger.e('Error confirming unbind: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e')));\n      }\n    }\n  }\n\n  Widget _buildNurseBadge() {\n    return Positioned(\n      top: 0,\n      right: 0,\n      child: Container(\n        padding: const EdgeInsets.all(4),\n        decoration: const BoxDecoration(\n          color: Colors.blue,\n          shape: BoxShape.circle,\n        ),\n        child: const Icon(\n          Icons.local_hospital,\n          size: 16,\n          color: Colors.white,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Caretakers'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.pending_actions),\n            onPressed: () => Navigator.push(\n              context,\n              MaterialPageRoute(builder: (context) => const CaretakerRequestsScreen()),\n            ),\n          ),\n          IconButton(\n            icon: const Icon(Icons.history),\n            onPressed: () => Navigator.push(\n              context,\n              MaterialPageRoute(builder: (context) => const ConnectionHistoryScreen()),\n            ),\n          ),\n        ],\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: StreamBuilder<DocumentSnapshot>(\n          stream: _getUserStream(),\n          builder: (context, userSnapshot) {\n            if (userSnapshot.connectionState == ConnectionState.waiting) {\n              return const Center(child: CircularProgressIndicator());\n            }\n\n            if (userSnapshot.hasError) {\n              return Center(child: Text('Error: ${userSnapshot.error}'));\n            }\n\n            final userData = userSnapshot.data?.data() as Map<String, dynamic>?;\n            final isConnected = userData?['isConnected'] == true;\n            final currentConnectionId = userData?['currentConnectionId'] as String?;\n\n            if (isConnected && currentConnectionId != null) {\n              return _buildConnectedState(currentConnectionId);\n            } else {\n              return _buildAvailableCaretakers();\n            }\n          },\n        ),\n      ),\n    );\n  }\n\n  Widget _buildConnectedState(String connectionId) {\n    return StreamBuilder<DocumentSnapshot?>(\n      stream: _getConnectionStream(connectionId),\n      builder: (context, connectionSnapshot) {\n        if (connectionSnapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n\n        if (connectionSnapshot.hasError || connectionSnapshot.data == null) {\n          return Center(child: Text('Error loading connection: ${connectionSnapshot.error}'));\n        }\n\n        final connectionData = connectionSnapshot.data?.data() as Map<String, dynamic>?;\n        final status = connectionData?['status'] as String?;\n        final requestedBy = connectionData?['requestedBy'] as String?;\n        final caretakerUid = connectionData?['caretaker_uid'] as String?;\n\n        if (caretakerUid == null) {\n          return const Center(child: Text('Error: Invalid connection'));\n        }\n\n        // Handle different connection statuses\n        if (status == 'unbind_requested') {\n          final isRequestedByMe = requestedBy == _auth.currentUser?.uid;\n          if (isRequestedByMe) {\n            return _buildUnbindPendingState(caretakerUid, connectionId);\n          } else {\n            return _buildUnbindRequestedState(caretakerUid, connectionId);\n          }\n        } else if (status == 'unbound') {\n          // Auto-refresh to available caretakers\n          WidgetsBinding.instance.addPostFrameCallback((_) {\n            setState(() {});\n          });\n          return const Center(child: Text('Connection unbound'));\n        }\n\n        // Normal connected state\n        return StreamBuilder<DocumentSnapshot?>(\n          stream: _getConnectedCaretakerStream(caretakerUid),\n          builder: (context, caretakerSnapshot) {\n            if (caretakerSnapshot.connectionState == ConnectionState.waiting) {\n              return const Center(child: CircularProgressIndicator());\n            }\n\n            if (caretakerSnapshot.hasError || caretakerSnapshot.data == null) {\n              return Center(child: Text('Error loading caretaker: ${caretakerSnapshot.error}'));\n            }\n\n            final caretakerData = caretakerSnapshot.data?.data() as Map<String, dynamic>?;\n            return _buildConnectedCaretakerUI(caretakerData!, caretakerUid, connectionId);\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildConnectedCaretakerUI(Map<String, dynamic> caretakerData, String caretakerUid, String connectionId) {\n    final isNurse = caretakerData['caregiverType'] == 'nurse';\n\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Stack(\n              children: [\n                CircleAvatar(\n                  radius: 60,\n                  backgroundColor: Colors.grey[300],\n                  backgroundImage: NetworkImage(\n                    caretakerData['profileImageUrl'] ?? '',\n                  ),\n                  child: const Icon(Icons.person, size: 60, color: Colors.blueAccent),\n                ),\n                if (isNurse) _buildNurseBadge(),\n              ],\n            ),\n            const SizedBox(height: 16),\n            Text(\n              caretakerData['fullName'] ?? 'Unnamed',\n              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n            ),\n            Text(\n              '@${caretakerData['username'] ?? ''}',\n              style: const TextStyle(fontSize: 16, color: Colors.grey),\n            ),\n            Text(\n              'Experience: ${caretakerData['experienceYears'] ?? 0} years',\n              style: const TextStyle(fontSize: 16, color: Colors.grey),\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () => _requestUnbind(connectionId, caretakerUid),\n              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n              child: const Text('Request Unbind', style: TextStyle(color: Colors.white)),\n            ),\n            const SizedBox(height: 10),\n            IconButton(\n              icon: const Icon(Icons.phone, color: Colors.green, size: 32),\n              onPressed: () async {\n                final phone = caretakerData['phoneNo'];\n                if (phone != null && phone.isNotEmpty) {\n                  final url = Uri.parse('tel:$phone');\n                  final can = await canLaunchUrl(url);\n                  if (can) {\n                    await launchUrl(url);\n                  } else if (mounted) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Could not launch phone app')),\n                    );\n                  }\n                }\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildUnbindPendingState(String caretakerUid, String connectionId) {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            const Icon(Icons.pending, size: 64, color: Colors.orange),\n            const SizedBox(height: 16),\n            const Text(\n              'Unbind Request Pending',\n              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.orange),\n            ),\n            const SizedBox(height: 8),\n            const Text(\n              'Waiting for caretaker to confirm the unbind request',\n              textAlign: TextAlign.center,\n              style: TextStyle(color: Colors.grey),\n            ),\n            const SizedBox(height: 20),\n            StreamBuilder<DocumentSnapshot?>(\n              stream: _getConnectedCaretakerStream(caretakerUid),\n              builder: (context, snapshot) {\n                if (snapshot.hasData) {\n                  final data = snapshot.data?.data() as Map<String, dynamic>?;\n                  return Text(\n                    'Caretaker: ${data?['fullName'] ?? 'Unknown'}',\n                    style: const TextStyle(fontSize: 16),\n                  );\n                }\n                return const SizedBox();\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildUnbindRequestedState(String caretakerUid, String connectionId) {\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.all(24.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            const Icon(Icons.warning, size: 64, color: Colors.red),\n            const SizedBox(height: 16),\n            const Text(\n              'Unbind Request Received',\n              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.red),\n            ),\n            const SizedBox(height: 8),\n            const Text(\n              'Caretaker has requested to unbind the connection',\n              textAlign: TextAlign.center,\n              style: TextStyle(color: Colors.grey),\n            ),\n            const SizedBox(height: 20),\n            StreamBuilder<DocumentSnapshot?>(\n              stream: _getConnectedCaretakerStream(caretakerUid),\n              builder: (context, snapshot) {\n                if (snapshot.hasData) {\n                  final data = snapshot.data?.data() as Map<String, dynamic>?;\n                  return Text(\n                    'Caretaker: ${data?['fullName'] ?? 'Unknown'}',\n                    style: const TextStyle(fontSize: 16),\n                  );\n                }\n                return const SizedBox();\n              },\n            ),\n            const SizedBox(height: 20),\n            ElevatedButton(\n              onPressed: () => _confirmUnbind(connectionId, caretakerUid),\n              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n              child: const Text('Confirm Unbind', style: TextStyle(color: Colors.white)),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildAvailableCaretakers() {\n    return Column(\n      children: [\n        // Search Field\n        Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: TextField(\n            controller: _searchController,\n            decoration: InputDecoration(\n              hintText: 'Search by username...',\n              filled: true,\n              fillColor: Colors.white,\n              border: OutlineInputBorder(\n                borderRadius: BorderRadius.circular(12),\n                borderSide: BorderSide.none,\n              ),\n              prefixIcon: const Icon(Icons.search, color: Colors.blueAccent),\n            ),\n          ),\n        ),\n\n        // Available Caretakers List\n        Expanded(\n          child: StreamBuilder<QuerySnapshot>(\n            stream: _getAvailableCaretakersStream(),\n            builder: (context, snapshot) {\n              if (snapshot.connectionState == ConnectionState.waiting) {\n                return const Center(child: CircularProgressIndicator());\n              }\n\n              if (snapshot.hasError) {\n                return Center(child: Text('Error: ${snapshot.error}'));\n              }\n\n              final docs = snapshot.data?.docs ?? [];\n\n              // Filter by search - REMOVED THE isConnected FILTER\n              final filteredDocs = docs.where((doc) {\n                final data = doc.data() as Map<String, dynamic>;\n                final username = (data['username'] as String?)?.toLowerCase() ?? '';\n                return username.contains(_search);\n              }).toList();\n\n              if (filteredDocs.isEmpty) {\n                return const Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Icon(Icons.person_off, size: 64, color: Colors.grey),\n                      SizedBox(height: 16),\n                      Text(\n                        'No available caretakers at the moment',\n                        style: TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                    ],\n                  ),\n                );\n              }\n\n              return RefreshIndicator(\n                onRefresh: () async {\n                  setState(() {});\n                },\n                color: Colors.blueAccent,\n                child: ListView.builder(\n                  itemCount: filteredDocs.length,\n                  itemBuilder: (context, index) {\n                    final doc = filteredDocs[index];\n                    final caretaker = doc.data() as Map<String, dynamic>;\n                    final caretakerUid = doc.id;\n                    final isNurse = caretaker['caregiverType'] == 'nurse';\n                    final isCaretakerConnected = caretaker['isConnected'] == true;\n\n                    return Card(\n                      elevation: 3,\n                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                      child: ListTile(\n                        onTap: () async {\n                          if (mounted) {\n                            await Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                builder: (context) => CaretakerDetailScreen(\n                                  caretakerUid: caretakerUid,\n                                  caretakerData: caretaker,\n                                  onConnect: () => _sendRequest(caretakerUid),\n                                ),\n                              ),\n                            );\n                          }\n                        },\n                        leading: Stack(\n                          children: [\n                            CircleAvatar(\n                              backgroundColor: Colors.grey[300],\n                              backgroundImage: NetworkImage(\n                                caretaker['profileImageUrl'] ?? '',\n                              ),\n                              child: const Icon(Icons.person, color: Colors.blueAccent),\n                            ),\n                            if (isNurse) _buildNurseBadge(),\n                            if (isCaretakerConnected)\n                              Positioned(\n                                bottom: 0,\n                                left: 0,\n                                child: Container(\n                                  padding: const EdgeInsets.all(2),\n                                  decoration: const BoxDecoration(\n                                    color: Colors.red,\n                                    shape: BoxShape.circle,\n                                  ),\n                                  child: const Icon(\n                                    Icons.link,\n                                    size: 12,\n                                    color: Colors.white,\n                                  ),\n                                ),\n                              ),\n                          ],\n                        ),\n                        title: Text('${caretaker['fullName'] ?? 'Unnamed'} (@${caretaker['username'] ?? ''})'),\n                        subtitle: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Text(\n                              'Experience: ${caretaker['experienceYears'] ?? 0} years | ${caretaker['city'] ?? ''}',\n                            ),\n                            if (isCaretakerConnected)\n                              const Text(\n                                'Currently connected to another user',\n                                style: TextStyle(color: Colors.red, fontSize: 12),\n                              ),\n                          ],\n                        ),\n                        trailing: Row(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            IconButton(\n                              icon: const Icon(Icons.phone, color: Colors.green),\n                              onPressed: () async {\n                                final phone = caretaker['phoneNo'];\n                                if (phone != null && phone.isNotEmpty) {\n                                  final url = Uri.parse('tel:$phone');\n                                  final can = await canLaunchUrl(url);\n                                  if (can) {\n                                    await launchUrl(url);\n                                  } else if (mounted) {\n                                    ScaffoldMessenger.of(context).showSnackBar(\n                                      const SnackBar(content: Text('Could not launch phone app')),\n                                    );\n                                  }\n                                }\n                              },\n                            ),\n                            if (!isCaretakerConnected)\n                              IconButton(\n                                icon: const Icon(Icons.person_add, color: Colors.blue),\n                                onPressed: () => _sendRequest(caretakerUid),\n                              ),\n                          ],\n                        ),\n                      ),\n                    );\n                  },\n                ),\n              );\n            },\n          ),\n        ),\n      ],\n    );\n  }\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "connection_history_screen.dart": {
          "_text": "// lib/user/caretaker/connection_history_screen.dart\n// lib/user/caretaker/connection_history_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/Logger.dart';\n\nfinal logger = Logger();\n\nclass ConnectionHistoryScreen extends StatefulWidget {\n  const ConnectionHistoryScreen({super.key});\n\n  @override\n  State<ConnectionHistoryScreen> createState() => _ConnectionHistoryScreenState();\n}\n\nclass _ConnectionHistoryScreenState extends State<ConnectionHistoryScreen> {\n  final _firestore = FirebaseFirestore.instance;\n  List<QueryDocumentSnapshot> _history = [];\n  bool _isLoading = true;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadHistory();\n  }\n\n  Future<void> _loadHistory() async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid == null) {\n      setState(() => _isLoading = false);\n      return;\n    }\n\n    try {\n      // Query past connections: status == 'unbound' or 'rejected', etc.\n      final query = await _firestore\n          .collection('connections')\n          .where('user_uid', isEqualTo: uid)\n          .where('status', whereIn: ['unbound', 'rejected', 'expired']) // Assume these statuses\n          .orderBy('timestamp', descending: true)\n          .get();\n\n      final historyUids = query.docs.map((doc) => doc.data()['caretaker_uid']).toList().toSet().toList();\n\n      if (historyUids.isNotEmpty) {\n        final caretakersQuery = await _firestore\n            .collection('caretaker')\n            .where('uid', whereIn: historyUids)\n            .get();\n\n        setState(() {\n          _history = caretakersQuery.docs;\n          _isLoading = false;\n        });\n      } else {\n        setState(() => _isLoading = false);\n      }\n    } catch (e) {\n      logger.e('Error loading history: $e');\n      setState(() => _isLoading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Connection History'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator())\n          : _history.isEmpty\n              ? const Center(child: Text('No connection history'))\n              : ListView.builder(\n                  itemCount: _history.length,\n                  itemBuilder: (context, index) {\n                    final caretaker = _history[index].data() as Map<String, dynamic>;\n                    return ListTile(\n                      leading: CircleAvatar(\n                        backgroundImage: NetworkImage(caretaker['profileImageUrl'] ?? ''),\n                        child: const Icon(Icons.person),\n                      ),\n                      title: Text(caretaker['fullName'] ?? ''),\n                      subtitle: Text('Past connection: ${caretaker['caregiverType'] ?? ''}'),\n                    );\n                  },\n                ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "diary": {
        "diary_screen.dart": {
          "_text": "// lib/user/diary/diary_screen.dart\n// lib/user/diary/diary_screen.dart\nimport 'dart:async';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\nimport 'package:intl/intl.dart';\n\nclass DiaryScreen extends StatefulWidget {\n  const DiaryScreen({super.key});\n\n  @override\n  State<DiaryScreen> createState() => _DiaryScreenState();\n}\n\nclass _DiaryScreenState extends State<DiaryScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  List<QueryDocumentSnapshot> _diaries = [];\n  bool _isLoading = true;\n  bool _hasError = false;\n  DateTime _currentDate = DateTime.now();\n  bool _hasToday = false;\n  final int _charLimit = 2000;\n  Timer? _debounce;\n  late TextEditingController _todayController;\n  bool _showedLimitToast = false;\n  late PageController _pageController;\n\n  @override\n  void initState() {\n    super.initState();\n    _todayController = TextEditingController();\n    _todayController.addListener(() {\n      setState(() {});\n    });\n    _pageController = PageController();\n    _loadDiaries();\n  }\n\n  Future<void> _loadDiaries() async {\n    if (!mounted) return;\n\n    setState(() {\n      _isLoading = true;\n      _hasError = false;\n    });\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final snap = await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection('diary')\n            .orderBy('createdAt', descending: true)\n            .get();\n\n        if (!mounted) return;\n\n        setState(() {\n          _diaries = snap.docs.reversed.toList(); // oldest first\n          _currentDate = DateTime.now();\n          final todayStr = DateFormat('yyyy-MM-dd').format(_currentDate);\n          _hasToday = _diaries.any((doc) => doc.id == todayStr);\n\n          String todayContent = '';\n          if (_hasToday) {\n            final todayDoc = _diaries.firstWhere((doc) => doc.id == todayStr);\n            todayContent = todayDoc['content'] ?? '';\n          }\n          _todayController.text = todayContent;\n          _showedLimitToast = false;\n          _isLoading = false;\n        });\n\n        WidgetsBinding.instance.addPostFrameCallback((_) {\n          if (_pageController.hasClients) {\n            _pageController.jumpToPage(\n                _diaries.length + (_hasToday ? 0 : 1) - 1);\n          }\n        });\n      } else {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    } catch (e) {\n      print('Error loading diaries: $e');\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    }\n  }\n\n  Future<void> _saveContent(String dateStr, String content) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return;\n\n    try {\n      final docRef = _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('diary')\n          .doc(dateStr);\n\n      final doc = await docRef.get();\n\n      await docRef.set({\n        'content': content,\n        'updatedAt': Timestamp.now(),\n        if (!doc.exists) 'createdAt': Timestamp.now(), // only for new docs\n      }, SetOptions(merge: true));\n    } catch (e) {\n      if (mounted) {\n        Fluttertoast.showToast(msg: 'Error saving diary: $e');\n      }\n    }\n  }\n\n  Widget _buildPage(DateTime date, String content, {bool editable = false}) {\n    final dateStr = DateFormat('yyyy-MM-dd').format(date);\n    final controller = editable ? _todayController : TextEditingController(text: content);\n\n    return Container(\n      decoration: BoxDecoration(\n        color: Colors.white,\n        borderRadius: BorderRadius.circular(8),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.black.withOpacity(0.2),\n            blurRadius: 10,\n            offset: const Offset(5, 5),\n          ),\n        ],\n        border: Border.all(color: Colors.grey.shade300),\n      ),\n      padding: const EdgeInsets.all(16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            DateFormat('MMMM dd, yyyy').format(date),\n            style: const TextStyle(\n                fontSize: 18,\n                fontWeight: FontWeight.bold,\n                color: Colors.blueAccent),\n          ),\n          const SizedBox(height: 16),\n          Expanded(\n            child: editable\n                ? TextField(\n                    controller: controller,\n                    maxLines: null,\n                    decoration: InputDecoration(\n                      hintText: 'Write your diary here...',\n                      border: InputBorder.none,\n                      counterText:\n                          '${_todayController.text.length}/$_charLimit',\n                      counterStyle: TextStyle(\n                          color: _todayController.text.length == _charLimit\n                              ? Colors.red\n                              : Colors.grey),\n                    ),\n                    onChanged: (text) {\n                      _debounce?.cancel();\n                      if (text.length > _charLimit) {\n                        _todayController.text = text.substring(0, _charLimit);\n                        _todayController.selection = TextSelection.collapsed(\n                            offset: _charLimit);\n                        if (!_showedLimitToast) {\n                          Fluttertoast.showToast(\n                              msg:\n                                  'Try to compress the content in the diary');\n                          _showedLimitToast = true;\n                        }\n                      } else {\n                        if (text.length < _charLimit) _showedLimitToast = false;\n                      }\n                      _debounce = Timer(const Duration(milliseconds: 500),\n                          () => _saveContent(dateStr, _todayController.text));\n                    },\n                  )\n                : Text(\n                    content.isEmpty ? 'No content' : content,\n                    style: const TextStyle(fontSize: 16),\n                  ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_isLoading) {\n      return const Scaffold(\n          body: Center(\n              child: CircularProgressIndicator(color: Colors.blueAccent)));\n    }\n\n    if (_hasError) {\n      return Scaffold(\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Icon(Icons.error, size: 64, color: Colors.red),\n              const SizedBox(height: 16),\n              const Text('Error loading diary',\n                  style: TextStyle(fontSize: 18, color: Colors.red)),\n              const SizedBox(height: 16),\n              ElevatedButton(\n                onPressed: _loadDiaries,\n                style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                child: const Text('Retry', style: TextStyle(color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      );\n    }\n\n    final itemCount = _diaries.length + (_hasToday ? 0 : 1);\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Daily Diary'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: itemCount == 0\n            ? const Center(\n                child: Text(\n                  'No diaries yet. Start writing today!',\n                  style: TextStyle(fontSize: 18, color: Colors.grey),\n                ),\n              )\n            : RefreshIndicator(\n                onRefresh: _loadDiaries,\n                color: Colors.blueAccent,\n                child: PageView.builder(\n                  controller: _pageController,\n                  itemCount: itemCount,\n                  itemBuilder: (context, index) {\n                    if (index == itemCount - 1 && !_hasToday) {\n                      return Transform(\n                        transform: Matrix4.identity()..setEntry(3, 2, 0.001),\n                        child: _buildPage(_currentDate, '', editable: true),\n                      );\n                    }\n\n                    final doc = _diaries[index];\n                    final dateStr = doc.id;\n                    final date = DateTime.parse(dateStr);\n                    final content = doc['content'] as String? ?? '';\n                    final isToday =\n                        dateStr == DateFormat('yyyy-MM-dd').format(_currentDate);\n\n                    return Transform(\n                      transform: Matrix4.identity()..setEntry(3, 2, 0.001),\n                      child: _buildPage(date, content, editable: isToday),\n                    );\n                  },\n                  physics: const BouncingScrollPhysics(),\n                ),\n              ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _debounce?.cancel();\n    _todayController.dispose();\n    _pageController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "family": {
        "family_add_screen.dart": {
          "_text": "// lib/user/family/family_add_screen.dart\nimport 'dart:io';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:logger/logger.dart';\nimport 'package:permission_handler/permission_handler.dart';\nimport 'package:image/image.dart' as img;\n\nfinal logger = Logger();\n\nclass AddScreen extends StatefulWidget {\n  const AddScreen({super.key});\n\n  @override\n  State<AddScreen> createState() => _AddScreenState();\n}\n\nclass _AddScreenState extends State<AddScreen> {\n  final _nameController = TextEditingController();\n  final _relationController = TextEditingController();\n  final _phoneController = TextEditingController();\n  File? _image;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _isSaving = false;\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Photo permission denied')),\n        );\n      }\n      return;\n    }\n    try {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _image = File(picked.path));\n      }\n    } catch (e) {\n      logger.e('Error picking image: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error picking image: $e')),\n        );\n      }\n    }\n  }\n\n  static Uint8List _processImage(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n\n    img.Image resized = image;\n    const maxSize = 512;\n    if (image.width > maxSize || image.height > maxSize) {\n      if (image.width > image.height) {\n        resized = img.copyResize(image, width: maxSize);\n      } else {\n        resized = img.copyResize(image, height: maxSize);\n      }\n    }\n    return img.encodeJpg(resized, quality: 85);\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_image == null) return '';\n    try {\n      final bytes = await _image!.readAsBytes();\n      final processedBytes = await compute(_processImage, bytes);\n      final r = await cloudinary\n          .uploadFile(CloudinaryFile.fromBytesData(processedBytes, identifier: 'family_member.jpg'))\n          .timeout(const Duration(seconds: 30));\n      return r.secureUrl;\n    } catch (e) {\n      logger.e('Image upload failed: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Image upload failed: $e')),\n        );\n      }\n      return '';\n    }\n  }\n\n  Future<void> _save() async {\n    if (_nameController.text.trim().isEmpty ||\n        _relationController.text.trim().isEmpty ||\n        _phoneController.text.trim().isEmpty) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('All fields are required')),\n        );\n      }\n      return;\n    }\n\n    if (_isSaving) return;\n    setState(() => _isSaving = true);\n\n    if (mounted) {\n      showDialog(\n        barrierDismissible: false,\n        context: context,\n        builder: (_) => const Center(child: CircularProgressIndicator(color: Colors.blueAccent)),\n      );\n    }\n\n    try {\n      final url = await _uploadImage();\n      if (!mounted) return;\n\n      final uid = _auth.currentUser?.uid;\n      if (uid == null) throw Exception('User not logged in');\n\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('family_members')\n          .add({\n        'name': _nameController.text.trim(),\n        'relation': _relationController.text.trim(),\n        'phone': _phoneController.text.trim(),\n        'imageUrl': url ?? '',\n        'createdAt': FieldValue.serverTimestamp(),\n      });\n      if (mounted){\n        Navigator.pop(context); // Close loading dialog\n        Navigator.pop(context); \n      }// Return to family screen\n    } catch (e) {\n      logger.e('Error saving member: $e');\n      if (mounted) {\n        Navigator.pop(context); // Close loading dialog\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error saving: $e')),\n        );\n      }\n    } finally {\n      if (mounted) setState(() => _isSaving = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Add Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Member Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              _buildTextField(_nameController, 'Name', Icons.person),\n              _buildTextField(_relationController, 'Relation', Icons.family_restroom),\n              _buildTextField(_phoneController, 'Phone', Icons.phone, keyboardType: TextInputType.phone),\n              const SizedBox(height: 24),\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundColor: Colors.grey[300],\n                        backgroundImage: _image != null ? FileImage(_image!) : null,\n                        child: _image == null ? const Icon(Icons.person, size: 60, color: Colors.blueAccent) : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _save,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Add Member', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_edit_screen.dart": {
          "_text": "// lib/user/family/family_edit_screen.dart\nimport 'dart:io';\nimport 'dart:typed_data';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:logger/logger.dart';\nimport 'package:permission_handler/permission_handler.dart';\nimport 'package:image/image.dart' as img;\n\nfinal logger = Logger();\n\nclass EditScreen extends StatefulWidget {\n  final String memberId;\n  final Map<String, dynamic> memberData;\n\n  const EditScreen({super.key, required this.memberId, required this.memberData});\n\n  @override\n  State<EditScreen> createState() => _EditScreenState();\n}\n\nclass _EditScreenState extends State<EditScreen> {\n  final _nameController = TextEditingController();\n  final _relationController = TextEditingController();\n  final _phoneController = TextEditingController();\n  File? _image;\n  String? _existingImageUrl;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'family_members');\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _isSaving = false;\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize text controllers with existing member data\n    _nameController.text = widget.memberData['name'] ?? '';\n    _relationController.text = widget.memberData['relation'] ?? '';\n    _phoneController.text = widget.memberData['phone'] ?? '';\n    _existingImageUrl = widget.memberData['imageUrl'] ?? '';\n  }\n\n  Future<void> _pickImage() async {\n    final status = await Permission.photos.request();\n    if (!status.isGranted) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Photo permission denied')),\n        );\n      }\n      return;\n    }\n    try {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _image = File(picked.path));\n      }\n    } catch (e) {\n      logger.e('Error picking image: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error picking image: $e')),\n        );\n      }\n    }\n  }\n\n  static Uint8List _processImage(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n\n    img.Image resized = image;\n    const maxSize = 512;\n    if (image.width > maxSize || image.height > maxSize) {\n      if (image.width > image.height) {\n        resized = img.copyResize(image, width: maxSize);\n      } else {\n        resized = img.copyResize(image, height: maxSize);\n      }\n    }\n    return img.encodeJpg(resized, quality: 85);\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_image == null) return _existingImageUrl;\n    try {\n      final bytes = await _image!.readAsBytes();\n      final processedBytes = await compute(_processImage, bytes);\n      final r = await cloudinary\n          .uploadFile(CloudinaryFile.fromBytesData(processedBytes, identifier: 'family_member.jpg'))\n          .timeout(const Duration(seconds: 30));\n      return r.secureUrl;\n    } catch (e) {\n      logger.e('Image upload failed: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Image upload failed: $e')),\n        );\n      }\n      return _existingImageUrl;\n    }\n  }\n\n  Future<void> _save() async {\n    if (_nameController.text.trim().isEmpty ||\n        _relationController.text.trim().isEmpty ||\n        _phoneController.text.trim().isEmpty) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('All fields are required')),\n        );\n      }\n      return;\n    }\n\n    if (_isSaving) return;\n    setState(() => _isSaving = true);\n\n    if (mounted) {\n      showDialog(\n        barrierDismissible: false,\n        context: context,\n        builder: (_) => const Center(child: CircularProgressIndicator(color: Colors.blueAccent)),\n      );\n    }\n\n    try {\n      final url = await _uploadImage();\n      if (!mounted) return;\n\n      final uid = _auth.currentUser?.uid;\n      if (uid == null) throw Exception('User not logged in');\n\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('family_members')\n          .doc(widget.memberId)\n          .update({\n        'name': _nameController.text.trim(),\n        'relation': _relationController.text.trim(),\n        'phone': _phoneController.text.trim(),\n        'imageUrl': url ?? '',\n        'updatedAt': FieldValue.serverTimestamp(),\n      });\n\n      Navigator.pop(context); // Close loading dialog\n      Navigator.pop(context); // Return to family screen\n    } catch (e) {\n      logger.e('Error updating member: $e');\n      if (mounted) {\n        Navigator.pop(context); // Close loading dialog\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error updating: $e')),\n        );\n      }\n    } finally {\n      if (mounted) setState(() => _isSaving = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Edit Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Edit Member Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              _buildTextField(_nameController, 'Name', Icons.person),\n              _buildTextField(_relationController, 'Relation', Icons.family_restroom),\n              _buildTextField(_phoneController, 'Phone', Icons.phone, keyboardType: TextInputType.phone),\n              const SizedBox(height: 24),\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundColor: Colors.grey[300],\n                        backgroundImage: _image != null\n                            ? FileImage(_image!)\n                            : _existingImageUrl != null && _existingImageUrl!.isNotEmpty\n                                ? NetworkImage(_existingImageUrl!)\n                                : null,\n                        child: _image == null && (_existingImageUrl == null || _existingImageUrl!.isEmpty)\n                            ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                            : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _save,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Update Member', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _relationController.dispose();\n    _phoneController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_scanner_screen.dart": {
          "_text": "// lib/user/family/family_scanner_screen.dart\nimport 'dart:convert';\nimport 'dart:io';\nimport 'dart:typed_data';\nimport 'package:camera/camera.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:confetti/confetti.dart';\nimport 'package:logger/logger.dart';\nimport 'package:image/image.dart' as img;\nimport 'package:permission_handler/permission_handler.dart';\n\nfinal logger = Logger();\n\nclass ScannerScreen extends StatefulWidget {\n  final List<Map<String, dynamic>> members;\n  const ScannerScreen({super.key, required this.members});\n\n  @override\n  State<ScannerScreen> createState() => _ScannerScreenState();\n}\n\nclass _ScannerScreenState extends State<ScannerScreen>\n    with SingleTickerProviderStateMixin {\n  CameraController? _controller;\n  Future<void>? _initializeControllerFuture;\n  XFile? _capturedImage;\n  bool _hasCameraError = false;\n  bool _isProcessing = false;\n  bool _isLoadingCamera = true;\n  bool _isCapturing = false;\n  late ConfettiController _confettiController;\n  bool _disposed = false;\n  bool _isFrontCamera = false;\n  List<CameraDescription> _cameras = [];\n\n  // Result info\n  Map<String, dynamic>? _resultData;\n  bool _noMatch = false;\n\n  // Animation controller for scanning overlay\n  late AnimationController _scanAnimationController;\n\n  @override\n  void initState() {\n    super.initState();\n    _confettiController =\n        ConfettiController(duration: const Duration(seconds: 3));\n    _scanAnimationController = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..repeat(reverse: true);\n    _initializeCamera();\n  }\n\n  Future<void> _initializeCamera() async {\n    if (_disposed) return;\n    setState(() {\n      _isLoadingCamera = true;\n      _resultData = null;\n      _noMatch = false;\n      _capturedImage = null;\n    });\n\n    final status = await Permission.camera.request();\n    if (!status.isGranted) {\n      if (status.isPermanentlyDenied) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Camera permission is permanently denied. Please enable it in settings.')),\n          );\n        }\n      } else {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Camera permission denied.')),\n          );\n        }\n      }\n      setState(() {\n        _hasCameraError = true;\n        _isLoadingCamera = false;\n      });\n      return;\n    }\n\n    try {\n      await _controller?.dispose();\n      _cameras = await availableCameras().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera initialization timed out');\n        },\n      );\n      if (_cameras.isEmpty) {\n        if (mounted && !_disposed) {\n          setState(() {\n            _hasCameraError = true;\n            _isLoadingCamera = false;\n          });\n        }\n        return;\n      }\n      final selectedCamera = _cameras.firstWhere(\n        (camera) =>\n            camera.lensDirection ==\n            (_isFrontCamera ? CameraLensDirection.front : CameraLensDirection.back),\n        orElse: () => _cameras.first,\n      );\n      _controller = CameraController(\n        selectedCamera,\n        ResolutionPreset.low,  // Optimized to lower resolution for faster processing\n        enableAudio: false,\n        imageFormatGroup: ImageFormatGroup.jpeg,\n      );\n      _initializeControllerFuture = _controller!.initialize().timeout(\n        const Duration(seconds: 10),\n        onTimeout: () {\n          throw Exception('Camera controller initialization timed out');\n        },\n      );\n      await _initializeControllerFuture;\n      if (mounted && !_disposed) {\n        setState(() => _isLoadingCamera = false);\n      }\n    } catch (e) {\n      logger.e('Error initializing camera: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _hasCameraError = true;\n          _isLoadingCamera = false;\n        });\n      }\n    }\n  }\n\n  Future<void> _toggleCamera() async {\n    if (_cameras.length < 2) return;\n    setState(() {\n      _isFrontCamera = !_isFrontCamera;\n      _hasCameraError = false;\n      _isLoadingCamera = true;\n      _capturedImage = null;\n      _resultData = null;\n      _noMatch = false;\n    });\n    await _initializeCamera();\n  }\n\n  Future<void> _captureImage() async {\n    if (_controller == null ||\n        _initializeControllerFuture == null ||\n        _hasCameraError ||\n        _isLoadingCamera ||\n        _isCapturing ||\n        _isProcessing) {\n      return;\n    }\n    setState(() => _isCapturing = true);\n    try {\n      await _initializeControllerFuture;\n      await _controller!.pausePreview();\n      final image = await _controller!.takePicture();\n\n      // Process image (flip if front, resize and compress)\n      final bytes = await File(image.path).readAsBytes();\n      Uint8List processedBytes;\n      if (_isFrontCamera) {\n        processedBytes = await compute(_flipHorizontal, bytes);\n      } else {\n        processedBytes = await compute(_resizeAndCompressBytes, bytes);\n      }\n      await File(image.path).writeAsBytes(processedBytes);\n\n      if (_controller != null && _controller!.value.isInitialized) {\n        await _controller!.resumePreview();\n      }\n\n      if (mounted && !_disposed) {\n        setState(() {\n          _capturedImage = image;\n          _resultData = null;\n          _noMatch = false;\n          _isCapturing = false;\n        });\n      }\n    } catch (e) {\n      logger.e('Error capturing image: $e');\n      if (_controller != null && _controller!.value.isInitialized) {\n        try {\n          await _controller!.resumePreview();\n        } catch (_) {}\n      }\n      if (mounted && !_disposed) setState(() => _isCapturing = false);\n    }\n  }\n\n  static Uint8List _flipHorizontal(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n    final flipped = img.flipHorizontal(image);\n    return _resizeAndCompress(flipped);\n  }\n\n  static Uint8List _resizeAndCompressBytes(Uint8List bytes) {\n    final image = img.decodeImage(bytes);\n    if (image == null) return bytes;\n    return _resizeAndCompress(image);\n  }\n\n  static Uint8List _resizeAndCompress(img.Image image) {\n    const maxSize = 512;\n    img.Image resized = image;\n    if (image.width > maxSize || image.height > maxSize) {\n      if (image.width > image.height) {\n        resized = img.copyResize(image, width: maxSize);\n      } else {\n        resized = img.copyResize(image, height: maxSize);\n      }\n    }\n    return img.encodeJpg(resized, quality: 85);\n  }\n\n  Future<String> _encodeImage(Uint8List bytes) async {\n    return await compute(_encodeBase64, bytes);\n  }\n\n  static String _encodeBase64(Uint8List bytes) {\n    return base64Encode(bytes);\n  }\n\n  Future<void> _sendToApi() async {\n    if (_capturedImage == null || _isProcessing) return;\n    if (mounted && !_disposed) setState(() => _isProcessing = true);\n\n    try {\n      final imageBytes = await _capturedImage!.readAsBytes();\n      final base64Image = await _encodeImage(imageBytes);\n      final response = await http.post(\n        Uri.parse('https://una-heliotropic-aspersively.ngrok-free.dev/recognize'),\n        body: {\n          'members': jsonEncode(widget.members\n              .map((m) => {\n                    'memberName': m['name'],\n                    'memberRelation': m['relation'],\n                    'memberImage': m['imageUrl'],\n                  })\n              .toList()),\n          'imageUrl': 'data:image/jpeg;base64,$base64Image',\n        },\n      ).timeout(const Duration(seconds: 30));\n\n      if (!mounted || _disposed) return;\n\n      if (response.statusCode == 200) {\n        final result = jsonDecode(response.body);\n        if (result['matchFound']) {\n          _confettiController.play();\n          setState(() {\n            _resultData = result;\n            _noMatch = false;\n          });\n        } else {\n          setState(() {\n            _resultData = null;\n            _noMatch = true;\n          });\n        }\n      } else {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } catch (e) {\n      logger.e('Error sending image to API: $e');\n      if (mounted && !_disposed) {\n        setState(() {\n          _resultData = null;\n          _noMatch = true;\n        });\n      }\n    } finally {\n      if (mounted && !_disposed) setState(() => _isProcessing = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Scan Family Member'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        actions: [\n          IconButton(\n            icon: Icon(_isFrontCamera ? Icons.camera_rear : Icons.camera_front),\n            onPressed: _isLoadingCamera || _isCapturing || _isProcessing\n                ? null\n                : _toggleCamera,\n          ),\n        ],\n      ),\n      body: Stack(\n        children: [\n          _isLoadingCamera\n              ? const Center(child: CircularProgressIndicator())\n              : _hasCameraError\n                  ? _buildCameraError()\n                  : _capturedImage == null\n                      ? _buildCameraPreview()\n                      : _buildCapturedImageWithAnimation(),\n          Align(\n            alignment: Alignment.topCenter,\n            child: ConfettiWidget(\n              confettiController: _confettiController,\n              blastDirectionality: BlastDirectionality.explosive,\n              shouldLoop: false,\n              numberOfParticles: 50,\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: _capturedImage == null &&\n              !_hasCameraError &&\n              _controller != null &&\n              !_isLoadingCamera\n          ? FloatingActionButton(\n              onPressed: _isCapturing || _isProcessing ? null : _captureImage,\n              backgroundColor: Colors.blueAccent,\n              child: _isCapturing\n                  ? const CircularProgressIndicator(color: Colors.white)\n                  : const Icon(Icons.camera_alt, color: Colors.white),\n            )\n          : null,\n    );\n  }\n\n  Widget _buildCapturedImageWithAnimation() {\n    return Stack(\n      children: [\n        Image.file(\n          File(_capturedImage!.path),\n          width: double.infinity,\n          height: double.infinity,\n          fit: BoxFit.cover,\n        ),\n        if (_isProcessing)\n          Positioned.fill(\n            child: Container(\n              color: Colors.black26,\n              child: Center(\n                child: Container(\n                  width: 250,\n                  height: 250,\n                  decoration: BoxDecoration(\n                    border: Border.all(color: Colors.blueAccent, width: 2),\n                  ),\n                  child: AnimatedBuilder(\n                    animation: _scanAnimationController,\n                    builder: (context, child) {\n                      return Align(\n                        alignment: Alignment(\n                            0, -1 + 2 * _scanAnimationController.value),\n                        child: Container(\n                          height: 4,\n                          width: double.infinity,\n                          color: Colors.blueAccent,\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              ),\n            ),\n          ),\n        Positioned(\n          bottom: 40, // Increased bottom padding\n          left: 20,\n          right: 20,\n          child: _buildBottomControls(),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildBottomControls() {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        if (!_isProcessing)\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _sendToApi,\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.green,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('OK', style: TextStyle(fontSize: 16)),\n              ),\n              ElevatedButton(\n                onPressed: () {\n                  setState(() {\n                    _capturedImage = null;\n                    _resultData = null;\n                    _noMatch = false;\n                  });\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.red,\n                  shape: RoundedRectangleBorder(\n                      borderRadius: BorderRadius.circular(12)),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                ),\n                child: const Text('Retake', style: TextStyle(fontSize: 16)),\n              ),\n            ],\n          ),\n        const SizedBox(height: 16),\n        if (_resultData != null || _noMatch) _buildResultOverlay(),\n      ],\n    );\n  }\n\n  Widget _buildResultOverlay() {\n    return Center(\n      child: Container(\n        width: MediaQuery.of(context).size.width * 0.8,\n        padding: const EdgeInsets.all(20),\n        decoration: BoxDecoration(\n          color: Colors.white.withOpacity(0.9),\n          borderRadius: BorderRadius.circular(16),\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(0.1),\n              blurRadius: 8,\n              spreadRadius: 2,\n            ),\n          ],\n        ),\n        child: _resultData != null\n            ? Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'Match Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.blueAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                  const SizedBox(height: 16),\n                  if (_resultData!['memberImageUrl'] != null &&\n                      _resultData!['memberImageUrl'].isNotEmpty)\n                    ClipRRect(\n                      borderRadius: BorderRadius.circular(8),\n                      child: Image.network(\n                        _resultData!['memberImageUrl'],\n                        height: 100,\n                        width: 100,\n                        fit: BoxFit.cover,\n                      ),\n                    ),\n                  const SizedBox(height: 12),\n                  Text(\n                    'Name: ${_resultData!['memberName']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Relation: ${_resultData!['memberRelation']}',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                  Text(\n                    'Confidence: ${(_resultData!['confidence'] * 100).toStringAsFixed(2)}%',\n                    style: Theme.of(context).textTheme.titleMedium,\n                  ),\n                ],\n              )\n            : Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Text(\n                    'No Matches Found',\n                    style: Theme.of(context).textTheme.titleLarge?.copyWith(\n                          color: Colors.redAccent,\n                          fontWeight: FontWeight.bold,\n                        ),\n                  ),\n                ],\n              ),\n      ).animate().fadeIn(duration: 400.ms),\n    );\n  }\n\n  Widget _buildCameraPreview() {\n    return FutureBuilder<void>(\n      future: _initializeControllerFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.done) {\n          if (snapshot.hasError || _controller == null) return _buildCameraError();\n          return CameraPreview(_controller!).animate().fadeIn(duration: 500.ms);\n        }\n        return const Center(child: CircularProgressIndicator());\n      },\n    );\n  }\n\n  Widget _buildCameraError() {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          const Icon(Icons.camera_alt, size: 64, color: Colors.red),\n          const SizedBox(height: 16),\n          const Text(\n            'Camera not available',\n            style: TextStyle(fontSize: 18, color: Colors.red),\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: () async {\n              if (await Permission.camera.isPermanentlyDenied) {\n                openAppSettings();\n              } else {\n                _initializeCamera();\n              }\n            },\n            child: const Text('Retry / Settings'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _disposed = true;\n    _controller?.dispose();\n    _confettiController.dispose();\n    _scanAnimationController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "family_screen.dart": {
          "_text": "// lib/user/family/family_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:logger/logger.dart';\nimport 'package:url_launcher/url_launcher.dart';\nimport 'family_add_screen.dart';\nimport 'family_edit_screen.dart';\nimport 'family_scanner_screen.dart';\n\nfinal logger = Logger();\n\nclass FamilyScreen extends StatefulWidget {\n  const FamilyScreen({super.key});\n\n  @override\n  State<FamilyScreen> createState() => _FamilyScreenState();\n}\n\nclass _FamilyScreenState extends State<FamilyScreen> {\n  final _searchController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  String _search = '';\n  bool _isAdding = false;\n  bool _isScanning = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _searchController.addListener(\n      () => setState(() => _search = _searchController.text.toLowerCase()),\n    );\n  }\n\n  Stream<QuerySnapshot> _getFamilyMembersStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore\n        .collection('user')\n        .doc(uid)\n        .collection('family_members')\n        .orderBy('name')\n        .snapshots();\n  }\n\n  Future<void> _callNumber(String number) async {\n    final uri = Uri(scheme: 'tel', path: number);\n    if (await canLaunchUrl(uri)) {\n      await launchUrl(uri);\n    } else if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Could not launch dialer for $number')),\n      );\n    }\n  }\n\n  Widget _buildMemberImage(String? imageUrl) {\n    if (imageUrl == null || imageUrl.isEmpty) {\n      return const Icon(Icons.person, color: Colors.blueAccent);\n    }\n\n    return ClipOval(\n      child: Image.network(\n        imageUrl,\n        width: 40,\n        height: 40,\n        fit: BoxFit.cover,\n        errorBuilder: (context, error, stackTrace) {\n          return const Icon(Icons.person, color: Colors.blueAccent);\n        },\n        loadingBuilder: (context, child, loadingProgress) {\n          if (loadingProgress == null) return child;\n          return const SizedBox(\n            width: 40,\n            height: 40,\n            child: Center(\n              child: CircularProgressIndicator(\n                strokeWidth: 2,\n                color: Colors.blueAccent,\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Family'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: Column(\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: TextField(\n                controller: _searchController,\n                decoration: InputDecoration(\n                  hintText: 'Search family members...',\n                  filled: true,\n                  fillColor: Colors.white,\n                  border: OutlineInputBorder(\n                    borderRadius: BorderRadius.circular(12),\n                    borderSide: BorderSide.none,\n                  ),\n                  prefixIcon: const Icon(Icons.search, color: Colors.blueAccent),\n                ),\n              ),\n            ),\n            Expanded(\n              child: StreamBuilder<QuerySnapshot>(\n                stream: _getFamilyMembersStream(),\n                builder: (context, snapshot) {\n                  if (snapshot.connectionState == ConnectionState.waiting) {\n                    return const Center(\n                        child: CircularProgressIndicator(color: Colors.blueAccent));\n                  }\n\n                  if (snapshot.hasError) {\n                    logger.e('Error loading family members: ${snapshot.error}');\n                    return Center(\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          const Text(\n                            'Error loading family members',\n                            style: TextStyle(fontSize: 18, color: Colors.red),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton(\n                            onPressed: () => setState(() {}),\n                            style:\n                                ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                            child: const Text('Retry', style: TextStyle(color: Colors.white)),\n                          ),\n                        ],\n                      ),\n                    );\n                  }\n\n                  final docs = snapshot.data?.docs ?? [];\n                  final filteredDocs = docs.where((doc) {\n                    final data = doc.data() as Map<String, dynamic>;\n                    final name = (data['name'] ?? '').toString().toLowerCase();\n                    final relation = (data['relation'] ?? '').toString().toLowerCase();\n                    return name.contains(_search) || relation.contains(_search);\n                  }).toList();\n\n                  return Column(\n                    children: [\n                      Expanded(\n                        child: filteredDocs.isEmpty\n                            ? const Center(\n                                child: Column(\n                                  mainAxisAlignment: MainAxisAlignment.center,\n                                  children: [\n                                    Icon(\n                                      Icons.family_restroom,\n                                      size: 64,\n                                      color: Colors.grey,\n                                    ),\n                                    SizedBox(height: 16),\n                                    Text(\n                                      'No family members yet',\n                                      style: TextStyle(fontSize: 18, color: Colors.grey),\n                                    ),\n                                    SizedBox(height: 8),\n                                    Text(\n                                      'Add your first family member',\n                                      style: TextStyle(fontSize: 14, color: Colors.grey),\n                                    ),\n                                  ],\n                                ),\n                              )\n                            : RefreshIndicator(\n                                onRefresh: () async => setState(() {}),\n                                color: Colors.blueAccent,\n                                child: ListView.builder(\n                                  itemCount: filteredDocs.length,\n                                  itemBuilder: (context, index) {\n                                    final doc = filteredDocs[index];\n                                    final member = doc.data() as Map<String, dynamic>;\n                                    return Card(\n                                      elevation: 3,\n                                      shape: RoundedRectangleBorder(\n                                          borderRadius: BorderRadius.circular(12)),\n                                      child: ListTile(\n                                        leading: CircleAvatar(\n                                          backgroundColor: Colors.grey[300],\n                                          child: _buildMemberImage(member['imageUrl']),\n                                        ),\n                                        title: Text(member['name'] ?? 'Unnamed'),\n                                        subtitle: Column(\n                                          crossAxisAlignment: CrossAxisAlignment.start,\n                                          children: [\n                                            Text('Relation: ${member['relation'] ?? ''}'),\n                                            Text('Phone: ${member['phone'] ?? ''}'),\n                                          ],\n                                        ),\n                                        trailing: Row(\n                                          mainAxisSize: MainAxisSize.min,\n                                          children: [\n                                            IconButton(\n                                              icon: const Icon(Icons.edit, color: Colors.blue),\n                                              onPressed: () async {\n                                                final editContext = context; // Capture context\n                                                try {\n                                                  await Navigator.push(\n                                                    editContext,\n                                                    MaterialPageRoute(\n                                                      builder: (context) => EditScreen(\n                                                        memberId: doc.id, // Pass the document ID\n                                                        memberData: doc.data() as Map<String, dynamic>, // Pass the member data\n                                                      ),\n                                                    ),\n                                                  );\n                                                } catch (e) {\n                                                  logger.e('Error navigating to edit screen: $e');\n                                                  if (editContext.mounted) {\n                                                    ScaffoldMessenger.of(editContext).showSnackBar(\n                                                      SnackBar(content: Text('Error opening edit screen: $e')),\n                                                    );\n                                                  }\n                                                }\n                                              },\n                                            ),\n                                            IconButton(\n                                              icon: const Icon(Icons.delete, color: Colors.red),\n                                              onPressed: () async {\n                                                final deleteContext = context; // Capture context\n                                                final confirm = await showDialog<bool>(\n                                                  context: deleteContext,\n                                                  builder: (context) => AlertDialog(\n                                                    title: const Text('Delete Family Member'),\n                                                    content: const Text('Are you sure?'),\n                                                    actions: [\n                                                      TextButton(\n                                                        onPressed: () =>\n                                                            Navigator.pop(context, false),\n                                                        child: const Text('Cancel'),\n                                                      ),\n                                                      ElevatedButton(\n                                                        style: ElevatedButton.styleFrom(\n                                                            backgroundColor: Colors.red),\n                                                        onPressed: () => Navigator.pop(context, true),\n                                                        child: const Text(\n                                                          'Delete',\n                                                          style: TextStyle(color: Colors.white)),\n                                                      ),\n                                                    ],\n                                                  ),\n                                                );\n                                                if (confirm == true && deleteContext.mounted) {\n                                                  try {\n                                                    await doc.reference.delete();\n                                                  } catch (e) {\n                                                    logger.e('Error deleting member: $e');\n                                                    if (deleteContext.mounted) {\n                                                      ScaffoldMessenger.of(deleteContext)\n                                                          .showSnackBar(\n                                                        SnackBar(content: Text('Error deleting: $e')),\n                                                      );\n                                                    }\n                                                  }\n                                                }\n                                              },\n                                            ),\n                                            IconButton(\n                                              icon: const Icon(Icons.phone, color: Colors.green),\n                                              onPressed: () {\n                                                final phone = member['phone'];\n                                                if (phone != null && phone.isNotEmpty) {\n                                                  _callNumber(phone);\n                                                }\n                                              },\n                                            ),\n                                          ],\n                                        ),\n                                      ),\n                                    );\n                                  },\n                                ),\n                              ),\n                      ),\n                      // Move buttons inside StreamBuilder to access snapshot\n                      Padding(\n                        padding: const EdgeInsets.all(16.0),\n                        child: Row(\n                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                          children: [\n                            _isAdding\n                                ? const CircularProgressIndicator(color: Colors.orange)\n                                : FloatingActionButton.extended(\n                                    backgroundColor: Colors.orange,\n                                    icon: const Icon(Icons.add, color: Colors.white),\n                                    label: const Text('Add Member',\n                                        style: TextStyle(color: Colors.white)),\n                                    onPressed: () async {\n                                      final addContext = context; // Capture context\n                                      setState(() => _isAdding = true);\n                                      try {\n                                        await Navigator.push(\n                                          addContext,\n                                          MaterialPageRoute(\n                                            builder: (context) => const AddScreen(),\n                                          ),\n                                        );\n                                      } catch (e) {\n                                        logger.e('Error navigating to add screen: $e');\n                                        if (addContext.mounted) {\n                                          ScaffoldMessenger.of(addContext).showSnackBar(\n                                            SnackBar(\n                                                content: Text('Error opening add screen: $e')),\n                                          );\n                                        }\n                                      } finally {\n                                        if (mounted) setState(() => _isAdding = false);\n                                      }\n                                    },\n                                  ),\n                            _isScanning\n                                ? const CircularProgressIndicator(color: Colors.orange)\n                                : FloatingActionButton.extended(\n                                    backgroundColor: Colors.orange,\n                                    icon: const Icon(Icons.camera_alt, color: Colors.white),\n                                    label:\n                                        const Text('Scan', style: TextStyle(color: Colors.white)),\n                                    onPressed: () async {\n                                      final scanContext = context; // Capture context\n                                      setState(() => _isScanning = true);\n                                      try {\n                                        final result = await Navigator.push(\n                                          scanContext,\n                                          MaterialPageRoute(\n                                            builder: (context) => ScannerScreen(\n                                              members: snapshot.data?.docs.map((doc) {\n                                                    final data = doc.data() as Map<String, dynamic>;\n                                                    return data\n                                                        .map((key, value) => MapEntry(key, value?.toString() ?? ''));\n                                                  }).toList() ?? [],\n                                            ),\n                                          ),\n                                        );\n                                        if (result != null && result['matchFound'] && scanContext.mounted) {\n                                          ScaffoldMessenger.of(scanContext).showSnackBar(\n                                            SnackBar(\n                                              content: Text('Match found: ${result['memberName']}'),\n                                            ),\n                                          );\n                                        }\n                                      } catch (e) {\n                                        logger.e('Error navigating to ScannerScreen: $e');\n                                        if (scanContext.mounted) {\n                                          ScaffoldMessenger.of(scanContext).showSnackBar(\n                                            SnackBar(content: Text('Error opening scanner: $e')),\n                                          );\n                                        }\n                                      } finally {\n                                        if (mounted) setState(() => _isScanning = false);\n                                      }\n                                    },\n                                  ),\n                          ],\n                        ),\n                      ),\n                    ],\n                  );\n                },\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _searchController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "home": {
        "add_task_page.dart": {
          "_text": "// lib/user/home/add_task_page.dart\n// lib/user/home/add_task_page.dart\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass AddTaskPage extends StatefulWidget {\n  final bool isTemplate;\n  const AddTaskPage({super.key, this.isTemplate = false});\n\n  @override\n  State<AddTaskPage> createState() => _AddTaskPageState();\n}\n\nclass _AddTaskPageState extends State<AddTaskPage> {\n  final TextEditingController _taskController = TextEditingController();\n  final TextEditingController _descController = TextEditingController();\n  String _recurring = 'None';\n  DateTime? _dueDate;\n  DateTime? _reminderTime;\n  TimeOfDay? _dailyDueTime;\n  TimeOfDay? _dailyReminderTime;\n\n  Future<void> _pickDueDate() async {\n    final picked = await showDatePicker(\n      context: context,\n      initialDate: DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (picked != null && mounted) {\n      final time = await showTimePicker(\n        context: context,\n        initialTime: TimeOfDay.now(),\n      );\n      if (time != null && mounted) {\n        setState(() {\n          _dueDate = DateTime(\n            picked.year,\n            picked.month,\n            picked.day,\n            time.hour,\n            time.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickReminderTime() async {\n    final pickedDate = await showDatePicker(\n      context: context,\n      initialDate: DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (pickedDate != null && mounted) {\n      final pickedTime = await showTimePicker(\n        context: context,\n        initialTime: TimeOfDay.now(),\n      );\n      if (pickedTime != null && mounted) {\n        setState(() {\n          _reminderTime = DateTime(\n            pickedDate.year,\n            pickedDate.month,\n            pickedDate.day,\n            pickedTime.hour,\n            pickedTime.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickDailyDueTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyDueTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyDueTime = picked);\n  }\n\n  Future<void> _pickDailyReminderTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyReminderTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyReminderTime = picked);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    if (widget.isTemplate) {\n      _recurring = 'Daily';\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isDaily = _recurring == 'Daily';\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(isDaily || widget.isTemplate ? 'Add Daily Template' : 'Add Task'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Task Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: _taskController,\n                decoration: InputDecoration(\n                  labelText: 'Task Name',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.task),\n                ),\n              ),\n              const SizedBox(height: 16),\n              TextField(\n                controller: _descController,\n                decoration: InputDecoration(\n                  labelText: 'Description (optional)',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.description),\n                ),\n                maxLines: 3,\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Recurrence',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),\n              ),\n              const SizedBox(height: 8),\n              DropdownButtonFormField<String>(\n                value: _recurring,\n                decoration: InputDecoration(\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                ),\n                items: ['None', 'Daily'].map((e) => DropdownMenuItem(value: e, child: Text(e))).toList(),\n                onChanged: (val) => setState(() => _recurring = val!),\n              ),\n              const SizedBox(height: 24),\n              if (!isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dueDate == null ? 'Set Due Date & Time' : DateFormat('MMM dd, yyyy hh:mm a').format(_dueDate!)),\n                    trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                    onTap: _pickDueDate,\n                  ),\n                ),\n              if (!isDaily) const SizedBox(height: 8),\n              if (!isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_reminderTime == null ? 'Set Reminder (optional)' : DateFormat('MMM dd, yyyy hh:mm a').format(_reminderTime!)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickReminderTime,\n                  ),\n                ),\n              if (isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyDueTime == null ? 'Set Daily Due Time' : _dailyDueTime!.format(context)),\n                    trailing: const Icon(Icons.access_time, color: Colors.blueAccent),\n                    onTap: _pickDailyDueTime,\n                  ),\n                ),\n              if (isDaily) const SizedBox(height: 8),\n              if (isDaily)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyReminderTime == null ? 'Set Daily Reminder (optional)' : _dailyReminderTime!.format(context)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickDailyReminderTime,\n                  ),\n                ),\n              const SizedBox(height: 32),\n              ElevatedButton(\n                onPressed: () {\n                  if (_taskController.text.trim().isEmpty) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Task name cannot be empty')),\n                    );\n                    return;\n                  }\n                  if (isDaily && _dailyDueTime == null) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Daily due time required')),\n                    );\n                    return;\n                  }\n                  final map = <String, dynamic>{\n                    'task': _taskController.text.trim(),\n                    'description': _descController.text.trim(),\n                    'recurring': _recurring,\n                  };\n                  if (isDaily) {\n                    map['dailyDueTime'] = _dailyDueTime != null \n                      ? {'hour': _dailyDueTime!.hour, 'min': _dailyDueTime!.minute} \n                      : null;\n                    map['dailyReminderTime'] = _dailyReminderTime != null \n                      ? {'hour': _dailyReminderTime!.hour, 'min': _dailyReminderTime!.minute} \n                      : null;\n                  } else {\n                    map['dueDate'] = _dueDate;\n                    map['reminderTime'] = _reminderTime;\n                  }\n                  Navigator.pop(context, map);\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.blueAccent,\n                  padding: const EdgeInsets.symmetric(vertical: 16),\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  minimumSize: const Size(double.infinity, 50),\n                ),\n                child: const Text('Save', style: TextStyle(fontSize: 18, color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "ai_chat_page.dart": {
          "_text": "// lib/user/home/ai_chat_page.dart\nimport 'dart:convert';\nimport 'dart:developer';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'package:flutter_gemini/flutter_gemini.dart';\nimport 'package:intl/intl.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nclass AIChatPage extends StatefulWidget {\n  const AIChatPage({super.key});\n\n  @override\n  State<AIChatPage> createState() => _AIChatPageState();\n}\n\nclass _AIChatPageState extends State<AIChatPage> {\n  final TextEditingController _controller = TextEditingController();\n  final String currentUserId = FirebaseAuth.instance.currentUser!.uid;\n  final String _chatStorageKey = 'dementia_ai_chat_history';\n  final List<String> _userInputHistory = [];\n  final _firestore = FirebaseFirestore.instance;\n  final _gemini = Gemini.instance;\n  late SharedPreferences _prefs;\n\n  List<Map<String, String>> _chatHistory = [];\n  Map<String, dynamic>? _userData;\n  int _remainingTasks = 0;\n  int _completedTasks = 0;\n  String _systemPrompt = '';\n  bool _isLoading = false;\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeStorage();\n    _fetchUserData();\n  }\n\n  Future<void> _initializeStorage() async {\n    _prefs = await SharedPreferences.getInstance();\n    _loadChatHistory();\n  }\n\n  Future<void> _loadChatHistory() async {\n    try {\n      final String? chatHistoryJson = _prefs.getString(_chatStorageKey);\n      if (chatHistoryJson != null) {\n        final List<dynamic> decodedList = json.decode(chatHistoryJson);\n        if (mounted) {\n          setState(() {\n            _chatHistory = decodedList\n                .map((item) => Map<String, String>.from(item))\n                .toList();\n          });\n        }\n      }\n    } catch (e) {\n      log('Error loading chat history: $e');\n    }\n  }\n\n  Future<void> _saveChatHistory() async {\n    try {\n      final String chatHistoryJson = json.encode(_chatHistory);\n      await _prefs.setString(_chatStorageKey, chatHistoryJson);\n    } catch (e) {\n      log('Error saving chat history: $e');\n    }\n  }\n\n  void _addMessageToHistory(Map<String, String> message) {\n    if (message['role'] != 'error') {\n      if (mounted) {\n        setState(() {\n          _chatHistory.add(message);\n        });\n      }\n      _saveChatHistory();\n    } else {\n      if (mounted) {\n        setState(() {\n          _chatHistory.add(message);\n        });\n        Future.delayed(const Duration(seconds: 5), () {\n          if (mounted) {\n            setState(() {\n              _chatHistory.removeWhere((msg) =>\n                  msg['role'] == 'error' &&\n                  msg['message'] == message['message']);\n            });\n          }\n        });\n      }\n    }\n  }\n\n  Future<void> _fetchUserData() async {\n  try {\n    if (mounted) setState(() => _isLoading = true);\n\n    final uid = currentUserId;\n\n    // Load user data\n    final userDoc = await _firestore.collection('user').doc(uid).get();\n    if (userDoc.exists && mounted) {\n      setState(() {\n        _userData = userDoc.data();\n      });\n    }\n\n    // Load today's tasks\n    final today = DateTime.now();\n    final todayStart = Timestamp.fromDate(\n      DateTime(today.year, today.month, today.day),\n    );\n    final todayEnd = Timestamp.fromDate(\n      DateTime(today.year, today.month, today.day, 23, 59, 59),\n    );\n\n    final tasksSnap = await _firestore\n        .collection('user')\n        .doc(uid)\n        .collection('to_dos')\n        .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n        .where('dueDate', isLessThanOrEqualTo: todayEnd)\n        .get();\n\n    final incompleteTasks = tasksSnap.docs\n        .where((doc) => doc.data()['completed'] == false)\n        .map((doc) {\n      final data = doc.data();\n      final dueTime = data['dueDate'] != null\n          ? DateFormat('hh:mm a').format((data['dueDate'] as Timestamp).toDate())\n          : 'Unknown time';\n      return '- ${data['task']} (Due: $dueTime)';\n    }).toList();\n\n    if (mounted) {\n      setState(() {\n        _remainingTasks = incompleteTasks.length;\n        _completedTasks = tasksSnap.docs.length - incompleteTasks.length;\n\n        // Build system prompt\n        _systemPrompt = '''\nYou are a compassionate AI assistant named \"Dementia Helper\" for a person with dementia.\n- Provide gentle reminders about tasks.\n- Remind about incomplete tasks with names and due times.\n- Offer emotional support and guidance.\n- Keep responses concise, calm, and positive.\n\nUser Info:\n- Name: ${_userData?['fullName'] ?? 'User'}\n- Age: ${_calculateAge(_userData?['dob']) ?? 'Unknown'}\n- Today's date: ${DateFormat('MMMM dd, yyyy').format(DateTime.now())}\n\nToday's incomplete tasks:\n${incompleteTasks.isEmpty ? 'No pending tasks' : incompleteTasks.join('\\n')}\n\nSummary:\n- Remaining tasks: $_remainingTasks\n- Completed tasks: $_completedTasks\n\nAlways start conversations with a warm greeting and address the user by name if important. If the user mentions tasks, reference the summary above. Encourage completion of remaining tasks gently. If asked about past events, suggest checking the diary. Never overwhelm with too much information.\n''';\n\n        // Initial AI greeting\n        if (_chatHistory.isEmpty) {\n          _addMessageToHistory({\n            'role': 'model',\n            'message':\n                'Hello ${_userData?['fullName'] ?? 'there'}! You have $_remainingTasks tasks left for today. I\\'m your Dementia Helper. How can I assist you?',\n          });\n        }\n      });\n    }\n  } catch (e) {\n    log('Error fetching user data: $e');\n    if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Error loading data: $e')),\n      );\n    }\n  } finally {\n    if (mounted) setState(() => _isLoading = false);\n  }\n}\n\n\n  int? _calculateAge(Timestamp? dob) {\n    if (dob == null) return null;\n    final birthDate = dob.toDate();\n    final today = DateTime.now();\n    int age = today.year - birthDate.year;\n    if (today.month < birthDate.month ||\n        (today.month == birthDate.month && today.day < birthDate.day)) {\n      age--;\n    }\n    return age;\n  }\n\n  Future<void> clearChatHistory() async {\n    try {\n      await _prefs.remove(_chatStorageKey);\n      if (mounted) {\n        setState(() {\n          _chatHistory = [];\n          _addMessageToHistory({\n            'role': 'model',\n            'message':\n                'Hello ${_userData?['fullName'] ?? 'there'}! I\\'m your Dementia Helper. How can I assist you today? You have $_remainingTasks tasks left for today.',\n          });\n        });\n      }\n    } catch (e) {\n      log('Error clearing chat history: $e');\n    }\n  }\n\n  Future<void> _showClearChatDialog() async {\n    return showDialog<void>(\n      context: context,\n      builder: (BuildContext context) {\n        return AlertDialog(\n          backgroundColor: Colors.white,\n          title: const Text('Clear Chat History'),\n          content: const Text(\n            'Are you sure you want to clear all chat history? This action cannot be undone.',\n          ),\n          actions: <Widget>[\n            TextButton(\n              child: const Text('Cancel'),\n              onPressed: () {\n                Navigator.of(context).pop();\n              },\n            ),\n            TextButton(\n              child: const Text(\n                'Clear',\n                style: TextStyle(color: Colors.red),\n              ),\n              onPressed: () {\n                clearChatHistory();\n                Navigator.of(context).pop();\n                ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(\n                    content: Text('Chat history cleared'),\n                    duration: Duration(seconds: 2),\n                  ),\n                );\n              },\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  void _sendMessage(String userMessage) async {\n    if (userMessage.trim().isEmpty) return;\n\n    _userInputHistory.add(userMessage);\n    if (_userInputHistory.length > 5) {\n      _userInputHistory.removeAt(0);\n    }\n\n    _addMessageToHistory({'role': 'user', 'message': userMessage});\n\n    if (mounted) {\n      setState(() {\n        _isLoading = true;\n      });\n    }\n\n    try {\n      final conversation = [\n        Content(parts: [Part.text(_systemPrompt)], role: 'user'),\n        ..._chatHistory.map(\n          (msg) => Content(\n            parts: [Part.text(msg['message']!)],\n            role: msg['role'],\n          ),\n        ),\n        Content(parts: [Part.text(userMessage)], role: 'user'),\n      ];\n      final response = await _gemini.chat(conversation);\n      if (mounted) {\n        setState(() {\n          _addMessageToHistory({\n            'role': 'model',\n            'message': response?.output ?? 'No response received',\n          });\n        });\n      }\n    } catch (e) {\n      log('Error in chat: $e');\n      if (mounted) {\n        setState(() {\n          _addMessageToHistory({\n            'role': 'error',\n            'message':\n                'Response not loading. Please try again or check your internet connection.',\n          });\n        });\n      }\n    } finally {\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n        });\n      }\n    }\n  }\n\n  Widget _buildMessageBubble(String message, String role,\n      {bool isLoading = false}) {\n    bool isUser = role == 'user';\n    return Align(\n      alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 12.0),\n        padding: const EdgeInsets.symmetric(vertical: 15.0, horizontal: 18.0),\n        decoration: BoxDecoration(\n          color: isUser ? Colors.blueAccent : Colors.grey[200],\n          borderRadius: BorderRadius.only(\n            topLeft: const Radius.circular(20.0),\n            topRight: const Radius.circular(20.0),\n            bottomLeft: isUser ? const Radius.circular(20.0) : Radius.zero,\n            bottomRight: isUser ? Radius.zero : const Radius.circular(20.0),\n          ),\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(0.1),\n              offset: const Offset(0, 2),\n              blurRadius: 4.0,\n            ),\n          ],\n        ),\n        child: isLoading\n            ? const LoadingAnimation()\n            : Text(\n                message,\n                style: TextStyle(\n                  fontSize: 16.0,\n                  color: isUser ? Colors.white : Colors.black87,\n                  fontWeight: FontWeight.w400,\n                  height: 1.4,\n                ),\n              ),\n      ),\n    );\n  }\n\n  Widget _buildChatList() {\n    return ListView.builder(\n      itemCount: _chatHistory.length + (_isLoading ? 1 : 0),\n      padding: const EdgeInsets.symmetric(vertical: 8.0),\n      itemBuilder: (context, index) {\n        if (index == _chatHistory.length && _isLoading) {\n          return _buildMessageBubble('', 'model', isLoading: true);\n        }\n        final message = _chatHistory[index];\n        return _buildMessageBubble(message['message']!, message['role']!)\n            .animate()\n            .fadeIn(duration: 300.ms)\n            .slideX(begin: message['role'] == 'user' ? 0.2 : -0.2);\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: AppBar(\n        backgroundColor: Colors.blueAccent,\n        iconTheme: const IconThemeData(color: Colors.white),\n        title: Row(\n          children: [\n            const CircleAvatar(\n              backgroundImage: AssetImage('assets/aiIcon.png'),\n              backgroundColor: Colors.blueAccent,\n              radius: 30,\n            ),\n            const SizedBox(width: 10),\n            const Text(\n              'Dementia Helper',\n              style: TextStyle(fontSize: 18, color: Colors.white),\n            ),\n          ],\n        ),\n        actions: [\n          if (_chatHistory.isNotEmpty)\n            IconButton(\n              icon: const Icon(Icons.delete_outline),\n              onPressed: _showClearChatDialog,\n              tooltip: 'Clear chat history',\n            ),\n        ],\n      ),\n      body: SafeArea(\n        child: Column(\n          children: [\n            Expanded(\n              child: _isLoading && _chatHistory.isEmpty\n                  ? const Center(child: LoadingAnimation())\n                  : _chatHistory.isEmpty\n                      ? const Center(\n                          child: Text(\n                            'Start a conversation with Dementia Helper',\n                            style:\n                                TextStyle(fontSize: 16, color: Colors.black54),\n                          ),\n                        )\n                      : _buildChatList(),\n            ),\n            const Divider(height: 1),\n            Container(\n              color: Colors.grey[200],\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Row(\n                  children: [\n                    Expanded(\n                      child: Padding(\n                        padding: const EdgeInsets.symmetric(horizontal: 10),\n                        child: TextField(\n                          controller: _controller,\n                          decoration: InputDecoration(\n                            hintText: 'Type a message...',\n                            hintStyle: const TextStyle(\n                                color: Colors.black54, fontSize: 16),\n                            filled: true,\n                            fillColor: Colors.white,\n                            contentPadding: const EdgeInsets.symmetric(\n                                vertical: 16, horizontal: 16),\n                            border: OutlineInputBorder(\n                              borderRadius: BorderRadius.circular(30),\n                              borderSide: BorderSide.none,\n                            ),\n                            focusedBorder: OutlineInputBorder(\n                              borderRadius: BorderRadius.circular(30),\n                              borderSide: BorderSide.none,\n                            ),\n                            enabledBorder: OutlineInputBorder(\n                              borderRadius: BorderRadius.circular(30),\n                              borderSide: BorderSide.none,\n                            ),\n                          ),\n                          minLines: 1,\n                          maxLines: 5,\n                          onSubmitted: (_) {\n                            final message = _controller.text;\n                            _controller.clear();\n                            _sendMessage(message);\n                          },\n                          style: const TextStyle(color: Colors.black87),\n                        ),\n                      ),\n                    ),\n                    Padding(\n                      padding: const EdgeInsets.only(left: 4),\n                      child: IconButton(\n                        icon: const Icon(\n                          Icons.send,\n                          color: Colors.blueAccent,\n                        ),\n                        onPressed: () {\n                          final message = _controller.text;\n                          _controller.clear();\n                          _sendMessage(message);\n                        },\n                        splashColor: Colors.blueAccent.withOpacity(0.3),\n                        splashRadius: 25,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass LoadingAnimation extends StatelessWidget {\n  const LoadingAnimation({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox(\n      width: 20,\n      height: 20,\n      child: CircularProgressIndicator(\n        strokeWidth: 2.0,\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        },
        "edit_task_page.dart": {
          "_text": "// lib/user/home/edit_task_page.dart\n// lib/user/home/edit_task_page.dart\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass EditTaskPage extends StatefulWidget {\n  final String taskName;\n  final String description;\n  final DateTime? dueDate;\n  final DateTime? reminderTime;\n  final bool isTemplate;\n  final Map<String, dynamic>? dailyDueTime;\n  final Map<String, dynamic>? dailyReminderTime;\n\n  const EditTaskPage({\n    super.key,\n    required this.taskName,\n    required this.description,\n    this.dueDate,\n    this.reminderTime,\n    this.isTemplate = false,\n    this.dailyDueTime,\n    this.dailyReminderTime,\n  });\n\n  @override\n  State<EditTaskPage> createState() => _EditTaskPageState();\n}\n\nclass _EditTaskPageState extends State<EditTaskPage> {\n  late TextEditingController _taskController;\n  late TextEditingController _descController;\n  DateTime? _dueDate;\n  DateTime? _reminderTime;\n  TimeOfDay? _dailyDueTime;\n  TimeOfDay? _dailyReminderTime;\n\n  @override\n  void initState() {\n    super.initState();\n    _taskController = TextEditingController(text: widget.taskName);\n    _descController = TextEditingController(text: widget.description);\n    _dueDate = widget.dueDate;\n    _reminderTime = widget.reminderTime;\n    if (widget.dailyDueTime != null) {\n      _dailyDueTime = TimeOfDay(hour: widget.dailyDueTime!['hour'], minute: widget.dailyDueTime!['min']);\n    }\n    if (widget.dailyReminderTime != null) {\n      _dailyReminderTime = TimeOfDay(hour: widget.dailyReminderTime!['hour'], minute: widget.dailyReminderTime!['min']);\n    }\n  }\n\n  Future<void> _pickDueDate() async {\n    final picked = await showDatePicker(\n      context: context,\n      initialDate: _dueDate ?? DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (picked != null && mounted) {\n      final time = await showTimePicker(\n        context: context,\n        initialTime: _dueDate != null ? TimeOfDay.fromDateTime(_dueDate!) : TimeOfDay.now(),\n      );\n      if (time != null && mounted) {\n        setState(() {\n          _dueDate = DateTime(\n            picked.year,\n            picked.month,\n            picked.day,\n            time.hour,\n            time.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickReminderTime() async {\n    final pickedDate = await showDatePicker(\n      context: context,\n      initialDate: _reminderTime ?? DateTime.now(),\n      firstDate: DateTime.now(),\n      lastDate: DateTime(2100),\n    );\n    if (pickedDate != null && mounted) {\n      final pickedTime = await showTimePicker(\n        context: context,\n        initialTime: _reminderTime != null ? TimeOfDay.fromDateTime(_reminderTime!) : TimeOfDay.now(),\n      );\n      if (pickedTime != null && mounted) {\n        setState(() {\n          _reminderTime = DateTime(\n            pickedDate.year,\n            pickedDate.month,\n            pickedDate.day,\n            pickedTime.hour,\n            pickedTime.minute,\n          );\n        });\n      }\n    }\n  }\n\n  Future<void> _pickDailyDueTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyDueTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyDueTime = picked);\n  }\n\n  Future<void> _pickDailyReminderTime() async {\n    final picked = await showTimePicker(\n      context: context,\n      initialTime: _dailyReminderTime ?? TimeOfDay.now(),\n    );\n    if (picked != null && mounted) setState(() => _dailyReminderTime = picked);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isTemplate = widget.isTemplate;\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(isTemplate ? 'Edit Template' : 'Edit Task'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Edit Task Details',\n                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: _taskController,\n                decoration: InputDecoration(\n                  labelText: 'Task Name',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.task),\n                ),\n              ),\n              const SizedBox(height: 16),\n              TextField(\n                controller: _descController,\n                decoration: InputDecoration(\n                  labelText: 'Description (optional)',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.description),\n                ),\n                maxLines: 3,\n              ),\n              const SizedBox(height: 24),\n              if (!isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dueDate == null ? 'Set Due Date & Time' : DateFormat('MMM dd, yyyy hh:mm a').format(_dueDate!)),\n                    trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                    onTap: _pickDueDate,\n                  ),\n                ),\n              if (!isTemplate) const SizedBox(height: 8),\n              if (!isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_reminderTime == null ? 'Set Reminder (optional)' : DateFormat('MMM dd, yyyy hh:mm a').format(_reminderTime!)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickReminderTime,\n                  ),\n                ),\n              if (isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyDueTime == null ? 'Set Daily Due Time' : _dailyDueTime!.format(context)),\n                    trailing: const Icon(Icons.access_time, color: Colors.blueAccent),\n                    onTap: _pickDailyDueTime,\n                  ),\n                ),\n              if (isTemplate) const SizedBox(height: 8),\n              if (isTemplate)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: ListTile(\n                    title: Text(_dailyReminderTime == null ? 'Set Daily Reminder (optional)' : _dailyReminderTime!.format(context)),\n                    trailing: const Icon(Icons.alarm, color: Colors.orange),\n                    onTap: _pickDailyReminderTime,\n                  ),\n                ),\n              const SizedBox(height: 32),\n              ElevatedButton(\n                onPressed: () {\n                  if (_taskController.text.trim().isEmpty) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Task name cannot be empty')),\n                    );\n                    return;\n                  }\n                  if (isTemplate && _dailyDueTime == null) {\n                    ScaffoldMessenger.of(context).showSnackBar(\n                      const SnackBar(content: Text('Daily due time required')),\n                    );\n                    return;\n                  }\n                  final map = <String, dynamic>{\n                    'task': _taskController.text.trim(),\n                    'description': _descController.text.trim(),\n                  };\n                  if (isTemplate) {\n                    map['dailyDueTime'] = _dailyDueTime != null \n                      ? {'hour': _dailyDueTime!.hour, 'min': _dailyDueTime!.minute} \n                      : null;\n                    map['dailyReminderTime'] = _dailyReminderTime != null \n                      ? {'hour': _dailyReminderTime!.hour, 'min': _dailyReminderTime!.minute} \n                      : null;\n                  } else {\n                    map['dueDate'] = _dueDate;\n                    map['reminderTime'] = _reminderTime;\n                  }\n                  Navigator.pop(context, map);\n                },\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.blueAccent,\n                  padding: const EdgeInsets.symmetric(vertical: 16),\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  minimumSize: const Size(double.infinity, 50),\n                ),\n                child: const Text('Save Changes', style: TextStyle(fontSize: 18, color: Colors.white)),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _taskController.dispose();\n    _descController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "home_screen.dart": {
          "_text": "// lib/user/home/home_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:logger/logger.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport '../notifications/notifications_screen.dart';\nimport '../../utils/notification_helper.dart';\nimport 'add_task_page.dart';\nimport 'ai_chat_page.dart';\nimport 'edit_task_page.dart';\n\nfinal logger = Logger();\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({super.key});\n\n  @override\n  State<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  String _selectedTab = 'Today';\n\n  @override\n  void initState() {\n    super.initState();\n    _checkBanned();\n    _generateDailyTasks();\n  }\n\n  Future<void> _checkBanned() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    try {\n      final doc = await _firestore.collection('user').doc(uid).get();\n      if (doc.data()?['isBanned'] == true) {\n        await _auth.signOut();\n        if (mounted) {\n          Navigator.pushReplacementNamed(context, '/welcome');\n        }\n      }\n    } catch (e) {\n      logger.e('Error checking banned status: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error checking user status: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _generateDailyTasks() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n\n    final prefs = await SharedPreferences.getInstance();\n    final todayStr = DateFormat('yyyy-MM-dd').format(DateTime.now());\n    final lastGenerate = prefs.getString('last_generate_date');\n    if (lastGenerate == todayStr) return;\n\n    try {\n      final recurringSnap = await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('recurring_tasks')\n          .get();\n      for (var rec in recurringSnap.docs) {\n        final data = rec.data();\n        final dailyDue = data['dailyDueTime'];\n        if (dailyDue == null) continue;\n\n        final today = DateTime.now();\n        final dueDate = DateTime(\n            today.year, today.month, today.day, dailyDue['hour'], dailyDue['min']);\n        final dueTs = Timestamp.fromDate(dueDate);\n\n        final reminder = data['dailyReminderTime'];\n        Timestamp? reminderTs;\n        if (reminder != null) {\n          final remDate = DateTime(today.year, today.month, today.day,\n              reminder['hour'], reminder['min']);\n          reminderTs = Timestamp.fromDate(remDate);\n        }\n\n        final existing = await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection('to_dos')\n            .where('recurringId', isEqualTo: rec.id)\n            .where('dueDate', isEqualTo: dueTs)\n            .get();\n\n        if (existing.docs.isEmpty) {\n          await _firestore.collection('user').doc(uid).collection('to_dos').add({\n            'task': data['task'],\n            'description': data['description'],\n            'completed': false,\n            'createdAt': Timestamp.now(),\n            'dueDate': dueTs,\n            'reminderTime': reminderTs,\n            'recurringId': rec.id,\n            'createdBy': 'system',\n          });\n\n          if (reminderTs != null && reminderTs.toDate().isAfter(DateTime.now())) {\n            final userPlayerIds = await _getUserPlayerIds();\n            final caretakerPlayerIds = await _getCaretakerPlayerIds();\n            final all = [...userPlayerIds, ...caretakerPlayerIds];\n            await scheduleNotification(\n                all, 'Daily Task Reminder: ${data['task']}', reminderTs.toDate());\n          }\n        }\n      }\n      await prefs.setString('last_generate_date', todayStr);\n    } catch (e) {\n      logger.e('Error generating daily tasks: $e');\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error generating tasks: $e')),\n        );\n      }\n    }\n  }\n\n  Stream<QuerySnapshot<Map<String, dynamic>>> _getTasksStream() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n\n    final todayStart = Timestamp.fromDate(\n        DateTime.now().subtract(const Duration(days: 1)).add(const Duration(hours: 24)));\n    final todayEnd = Timestamp.fromDate(DateTime.now().add(const Duration(days: 1)));\n\n    if (_selectedTab == 'Recurring') {\n      return _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('recurring_tasks')\n          .orderBy('createdAt', descending: true)\n          .snapshots();\n    } else if (_selectedTab == 'Today') {\n      return coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n          .where('dueDate', isLessThan: todayEnd)\n          .orderBy('dueDate')\n          .limit(50)\n          .snapshots();\n    } else if (_selectedTab == 'Upcoming') {\n      return coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayEnd)\n          .orderBy('dueDate')\n          .limit(50)\n          .snapshots();\n    } else if (_selectedTab == 'Completed') {\n      return coll.where('completed', isEqualTo: true).snapshots();\n    } else if (_selectedTab == 'All') {\n      return coll.orderBy('dueDate', descending: true).limit(50).snapshots();\n    } else {\n      return Stream.empty();\n    }\n  }\n\n  Future<int> _getRemainingToday() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return 0;\n\n    final coll = _firestore.collection('user').doc(uid).collection('to_dos');\n    final todayStart = Timestamp.fromDate(\n        DateTime.now().subtract(const Duration(days: 1)).add(const Duration(hours: 24)));\n    final todayEnd = Timestamp.fromDate(DateTime.now().add(const Duration(days: 1)));\n\n    try {\n      // Workaround: Simplified query to avoid composite index requirement\n      final snap = await coll\n          .where('dueDate', isGreaterThanOrEqualTo: todayStart)\n          .where('dueDate', isLessThan: todayEnd)\n          .get();\n      // Filter completed tasks in code\n      final incompleteTasks = snap.docs\n          .where((doc) => doc.data()['completed'] == false)\n          .length;\n      return incompleteTasks;\n    } catch (e) {\n      logger.e('Error getting remaining today: $e');\n      if (e.toString().contains('requires an index') && mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: const Text(\n              'Database setup in progress. Please try again in a few minutes or contact support.',\n            ),\n            duration: const Duration(seconds: 5),\n            action: SnackBarAction(\n              label: 'Retry',\n              onPressed: () {\n                if (mounted) setState(() {});\n              },\n            ),\n          ),\n        );\n      } else if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error fetching tasks: $e')),\n        );\n      }\n      return 0;\n    }\n  }\n\n  Future<void> _deleteTask(String id, bool isTemplate) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    final confirm = await showDialog<bool>(\n      context: context,\n      builder: (_) => AlertDialog(\n        title: const Text('Delete Task'),\n        content: const Text('Are you sure you want to delete this task?'),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context, false),\n            child: const Text('Cancel'),\n          ),\n          ElevatedButton(\n            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n            onPressed: () => Navigator.pop(context, true),\n            child: const Text('Delete'),\n          ),\n        ],\n      ),\n    );\n    if (confirm == true && mounted) {\n      try {\n        final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n        await _firestore\n            .collection('user')\n            .doc(uid)\n            .collection(coll)\n            .doc(id)\n            .delete();\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context)\n              .showSnackBar(SnackBar(content: Text('Error deleting: $e')));\n        }\n      }\n    }\n  }\n\n  Future<void> _toggleTaskStatus(String id, bool current) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null || !mounted) return;\n    try {\n      await _firestore\n          .collection('user')\n          .doc(uid)\n          .collection('to_dos')\n          .doc(id)\n          .update({'completed': !current});\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context)\n            .showSnackBar(SnackBar(content: Text('Error updating task: $e')));\n      }\n    }\n  }\n\n  Future<List<String>> _getCaretakerPlayerIds() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return [];\n\n    final userDoc = await _firestore.collection('user').doc(uid).get();\n    final connectionId = userDoc.data()?['currentConnectionId'];\n    if (connectionId == null) return [];\n\n    final connectionDoc =\n        await _firestore.collection('connections').doc(connectionId).get();\n    final caretakerUid = connectionDoc.data()?['caretaker_uid'];\n    if (caretakerUid == null) return [];\n\n    final caretakerDoc =\n        await _firestore.collection('caretaker').doc(caretakerUid).get();\n    return List<String>.from(caretakerDoc.data()?['playerIds'] ?? []);\n  }\n\n  Future<List<String>> _getUserPlayerIds() async {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return [];\n    final userDoc = await _firestore.collection('user').doc(uid).get();\n    return List<String>.from(userDoc.data()?['playerIds'] ?? []);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: [\n          Container(\n            decoration: const BoxDecoration(\n              gradient: LinearGradient(\n                colors: [Colors.blueAccent, Colors.blue],\n                begin: Alignment.topLeft,\n                end: Alignment.bottomRight,\n              ),\n              borderRadius: BorderRadius.vertical(bottom: Radius.circular(20)),\n            ),\n            padding: EdgeInsets.only(\n              top: MediaQuery.of(context).padding.top + 16,\n              bottom: 16,\n              left: 16,\n              right: 16,\n            ),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: [\n                const Text(\n                  'Dementia Tasks',\n                  style: TextStyle(\n                    fontSize: 24,\n                    fontWeight: FontWeight.bold,\n                    color: Colors.white,\n                  ),\n                ),\n                IconButton(\n                  icon: const Icon(Icons.notifications, color: Colors.white),\n                  onPressed: () {\n                    if (mounted) {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (_) => const NotificationsScreen(),\n                        ),\n                      );\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n          FutureBuilder<int>(\n            future: _getRemainingToday(),\n            builder: (context, snap) {\n              return Card(\n                margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n                elevation: 4,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n                child: Container(\n                  decoration: BoxDecoration(\n                    gradient: const LinearGradient(\n                      colors: [Colors.greenAccent, Colors.green],\n                      begin: Alignment.topLeft,\n                      end: Alignment.bottomRight,\n                    ),\n                    borderRadius: BorderRadius.circular(16),\n                  ),\n                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),\n                  child: Row(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Text(\n                        snap.connectionState == ConnectionState.waiting\n                            ? '0'\n                            : (snap.data ?? 0).toString().padLeft(3, '0'),\n                        style: const TextStyle(\n                          fontSize: 36,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.white,\n                        ),\n                      ),\n                      const SizedBox(width: 8),\n                      const Text(\n                        'Remaining Today',\n                        style: TextStyle(\n                          fontSize: 16,\n                          color: Colors.white,\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              );\n            },\n          ),\n          SingleChildScrollView(\n            scrollDirection: Axis.horizontal,\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n            child: Row(\n              children: [\n                _filterChip('Today'),\n                const SizedBox(width: 8),\n                _filterChip('Upcoming'),\n                const SizedBox(width: 8),\n                _filterChip('Completed'),\n                const SizedBox(width: 8),\n                _filterChip('All'),\n                const SizedBox(width: 8),\n                _filterChip('Recurring'),\n              ],\n            ),\n          ),\n          Expanded(\n            child: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(\n              stream: _getTasksStream(),\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n\n                if (snapshot.hasError) {\n                  logger.e('Task stream error: ${snapshot.error}');\n                  return Center(\n                    child: Padding(\n                      padding: const EdgeInsets.all(24),\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          const Icon(Icons.error, size: 64, color: Colors.red),\n                          const SizedBox(height: 16),\n                          Text(\n                            snapshot.error.toString().contains('requires an index')\n                                ? 'Database setup in progress. Please try again in a few minutes or contact support.'\n                                : 'Failed to load tasks: ${snapshot.error}',\n                            textAlign: TextAlign.center,\n                            style: const TextStyle(fontSize: 16),\n                          ),\n                          const SizedBox(height: 16),\n                          ElevatedButton.icon(\n                            icon: const Icon(Icons.refresh),\n                            label: const Text('Retry'),\n                            onPressed: () {\n                              if (mounted) setState(() {});\n                            },\n                          ),\n                        ],\n                      ),\n                    ),\n                  );\n                }\n\n                var docs = snapshot.data?.docs ?? [];\n                if (_selectedTab == 'Completed') {\n                  docs.sort((a, b) {\n                    final aDate = (a.data()['dueDate'] as Timestamp?) ?? Timestamp(0, 0);\n                    final bDate = (b.data()['dueDate'] as Timestamp?) ?? Timestamp(0, 0);\n                    int cmp = bDate.compareTo(aDate);\n                    if (cmp == 0) {\n                      return b.id.compareTo(a.id);\n                    }\n                    return cmp;\n                  });\n                  docs = docs.take(50).toList();\n                }\n\n                if (docs.isEmpty) {\n                  return _emptyState();\n                }\n\n                return RefreshIndicator(\n                  onRefresh: () async {\n                    if (mounted) setState(() {});\n                  },\n                  child: ListView.builder(\n                    padding: const EdgeInsets.all(16),\n                    itemCount: docs.length,\n                    itemBuilder: (context, index) {\n                      final doc = docs[index];\n                      final task = doc.data();\n                      final id = doc.id;\n                      final isTemplate = _selectedTab == 'Recurring';\n                      final completed = isTemplate ? false : (task['completed'] as bool? ?? false);\n                      final description = task['description'] as String? ?? '';\n                      final dueDate = task['dueDate'] as Timestamp?;\n                      final reminderTime = task['reminderTime'] as Timestamp?;\n                      final Map<String, dynamic>? dailyDueTime = isTemplate ? task['dailyDueTime'] as Map<String, dynamic>? : null;\n                      final Map<String, dynamic>? dailyReminderTime = isTemplate ? task['dailyReminderTime'] as Map<String, dynamic>? : null;\n\n                      return Card(\n                        elevation: 4,\n                        margin: const EdgeInsets.only(bottom: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\n                        color: completed ? Colors.grey[200] : Colors.white,\n                        child: ListTile(\n                          contentPadding: const EdgeInsets.all(16),\n                          leading: isTemplate\n                              ? const Icon(Icons.repeat, color: Colors.blue, size: 32)\n                              : Icon(\n                                  completed\n                                      ? Icons.check_circle\n                                      : Icons.radio_button_unchecked,\n                                  color: completed ? Colors.green : Colors.red,\n                                  size: 32,\n                                ),\n                          title: Text(\n                            task['task'] as String? ?? 'Untitled',\n                            style: TextStyle(\n                              fontSize: 18,\n                              fontWeight: FontWeight.bold,\n                              decoration:\n                                  completed ? TextDecoration.lineThrough : null,\n                            ),\n                          ),\n                          subtitle: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              if (description.isNotEmpty)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    description,\n                                    style: const TextStyle(color: Colors.black54),\n                                  ),\n                                ),\n                              if (!isTemplate && dueDate != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Due: ${DateFormat('MMM dd, yyyy hh:mm a').format(dueDate.toDate())}',\n                                    style: const TextStyle(color: Colors.blueGrey),\n                                  ),\n                                ),\n                              if (!isTemplate && reminderTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Reminder: ${DateFormat('MMM dd, yyyy hh:mm a').format(reminderTime.toDate())}',\n                                    style: const TextStyle(color: Colors.orange),\n                                  ),\n                                ),\n                              if (isTemplate && dailyDueTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Daily Due: ${dailyDueTime['hour'].toString().padLeft(2, '0')}:${dailyDueTime['min'].toString().padLeft(2, '0')}',\n                                    style: const TextStyle(color: Colors.blueGrey),\n                                  ),\n                                ),\n                              if (isTemplate && dailyReminderTime != null)\n                                Padding(\n                                  padding: const EdgeInsets.only(top: 4),\n                                  child: Text(\n                                    'Daily Reminder: ${dailyReminderTime['hour'].toString().padLeft(2, '0')}:${dailyReminderTime['min'].toString().padLeft(2, '0')}',\n                                    style: const TextStyle(color: Colors.orange),\n                                  ),\n                                ),\n                            ],\n                          ),\n                          trailing: Row(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              IconButton(\n                                icon: const Icon(Icons.edit, color: Colors.blue),\n                                onPressed: () async {\n                                  if (!mounted) return;\n                                  final Map<String, dynamic>? updated = await Navigator.push<Map<String, dynamic>>(\n                                    context,\n                                    MaterialPageRoute(\n                                      builder: (_) => EditTaskPage(\n                                        taskName: task['task'] as String? ?? '',\n                                        description: description,\n                                        dueDate: dueDate?.toDate(),\n                                        reminderTime: reminderTime?.toDate(),\n                                        isTemplate: isTemplate,\n                                        dailyDueTime: dailyDueTime,\n                                        dailyReminderTime: dailyReminderTime,\n                                      ),\n                                    ),\n                                  );\n                                  if (updated != null && mounted) {\n                                    final uid = _auth.currentUser?.uid;\n                                    if (uid != null) {\n                                      try {\n                                        final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n                                        await _firestore\n                                            .collection('user')\n                                            .doc(uid)\n                                            .collection(coll)\n                                            .doc(id)\n                                            .update({\n                                              'task': updated['task'],\n                                              'description': updated['description'],\n                                              if (isTemplate)\n                                                'dailyDueTime': updated['dailyDueTime'],\n                                              if (isTemplate)\n                                                'dailyReminderTime': updated['dailyReminderTime'],\n                                              if (!isTemplate)\n                                                'dueDate': updated['dueDate'] != null\n                                                    ? Timestamp.fromDate(updated['dueDate'] as DateTime)\n                                                    : null,\n                                              if (!isTemplate)\n                                                'reminderTime': updated['reminderTime'] != null\n                                                    ? Timestamp.fromDate(updated['reminderTime'] as DateTime)\n                                                    : null,\n                                            });\n\n                                        if (!isTemplate && updated['reminderTime'] != null) {\n                                          final userPlayerIds = await _getUserPlayerIds();\n                                          final caretakerPlayerIds = await _getCaretakerPlayerIds();\n                                          final allPlayerIds = [...userPlayerIds, ...caretakerPlayerIds];\n\n                                          await scheduleNotification(\n                                            allPlayerIds,\n                                            'Task Reminder: ${updated['task']}',\n                                            updated['reminderTime'] as DateTime,\n                                          );\n                                        }\n                                      } catch (e) {\n                                        if (mounted) {\n                                          ScaffoldMessenger.of(context).showSnackBar(\n                                            SnackBar(content: Text('Error updating: $e')),\n                                          );\n                                        }\n                                      }\n                                    }\n                                  }\n                                },\n                              ),\n                              IconButton(\n                                icon: const Icon(Icons.delete, color: Colors.red),\n                                onPressed: () => _deleteTask(id, isTemplate),\n                              ),\n                            ],\n                          ),\n                          onTap: isTemplate ? null : () => _toggleTaskStatus(id, completed),\n                        ),\n                      );\n                    },\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n      floatingActionButton: Column(\n        mainAxisAlignment: MainAxisAlignment.end,\n        children: [\n          FloatingActionButton(\n            onPressed: () {\n              Navigator.push(\n                context,\n                MaterialPageRoute(builder: (context) => const AIChatPage()),\n              );\n            },\n            backgroundColor: Colors.blue, // Blue background\n            heroTag: 'ai_chat',\n            child: ClipOval(\n              child: Image.asset(\n                'assets/aiIcon.png',\n                width: 50,\n                height: 50,\n                fit: BoxFit.cover,\n              ),\n            ),\n          ),\n          const SizedBox(height: 16),\n          FloatingActionButton.extended(\n            onPressed: () async {\n              if (!mounted) return;\n              final newTask = await Navigator.push(\n                context,\n                MaterialPageRoute(builder: (_) => AddTaskPage(isTemplate: _selectedTab == 'Recurring')),\n              );\n              if (newTask != null && mounted) {\n                final uid = _auth.currentUser?.uid;\n                if (uid != null) {\n                  try {\n                    final isTemplate = newTask['recurring'] == 'Daily';\n                    final coll = isTemplate ? 'recurring_tasks' : 'to_dos';\n                    await _firestore.collection('user').doc(uid).collection(coll).add({\n                      'task': newTask['task'],\n                      'description': newTask['description'],\n                      if (!isTemplate) 'completed': false,\n                      'createdAt': Timestamp.now(),\n                      if (!isTemplate)\n                        'dueDate': newTask['dueDate'] != null\n                            ? Timestamp.fromDate(newTask['dueDate'] as DateTime)\n                            : null,\n                      if (!isTemplate)\n                        'reminderTime': newTask['reminderTime'] != null\n                            ? Timestamp.fromDate(newTask['reminderTime'] as DateTime)\n                            : null,\n                      if (isTemplate) 'dailyDueTime': newTask['dailyDueTime'],\n                      if (isTemplate) 'dailyReminderTime': newTask['dailyReminderTime'],\n                      'createdBy': 'user',\n                    });\n\n                    if (!isTemplate && newTask['reminderTime'] != null) {\n                      final userPlayerIds = await _getUserPlayerIds();\n                      final caretakerPlayerIds = await _getCaretakerPlayerIds();\n                      final allPlayerIds = [...userPlayerIds, ...caretakerPlayerIds];\n\n                      await scheduleNotification(\n                        allPlayerIds,\n                        'New Task Reminder: ${newTask['task']}',\n                        newTask['reminderTime'] as DateTime,\n                      );\n                    }\n\n                    if (isTemplate) {\n                      await _generateDailyTasks();\n                    }\n                  } catch (e) {\n                    if (mounted) {\n                      ScaffoldMessenger.of(context).showSnackBar(\n                        SnackBar(content: Text('Error adding: $e')),\n                      );\n                    }\n                  }\n                }\n              }\n            },\n            backgroundColor: Colors.orange,\n            icon: const Icon(Icons.add, color: Colors.white),\n            label: const Text('Add', style: TextStyle(color: Colors.white)),\n            heroTag: 'add_task',\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _filterChip(String label) {\n    return ChoiceChip(\n      label: Text(label, style: const TextStyle(fontSize: 14)),\n      selected: _selectedTab == label,\n      onSelected: (selected) {\n        if (selected && mounted) {\n          setState(() => _selectedTab = label);\n        }\n      },\n      selectedColor: Colors.blueAccent,\n      backgroundColor: Colors.grey[300],\n      labelStyle: TextStyle(\n          color: _selectedTab == label ? Colors.white : Colors.black),\n    );\n  }\n\n  Widget _emptyState() {\n    return const Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(Icons.inbox, size: 64, color: Colors.grey),\n          SizedBox(height: 16),\n          Text(\n            'No items yet. Add one!',\n            style: TextStyle(fontSize: 18, color: Colors.grey),\n          ),\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "notifications": {
        "notifications_screen.dart": {
          "_text": "// lib/user/notifications/notifications_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nclass NotificationsScreen extends StatefulWidget {\n  const NotificationsScreen({super.key});\n\n  @override\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\n}\n\nclass _NotificationsScreenState extends State<NotificationsScreen> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n\n  Stream<QuerySnapshot> _getNotifications() {\n    final uid = _auth.currentUser?.uid;\n    if (uid == null) return Stream.empty();\n    return _firestore.collection('user').doc(uid).collection('notifications').orderBy('createdAt', descending: true).snapshots();\n  }\n\n  Future<void> _markRead(String id) async {\n    final uid = _auth.currentUser?.uid;\n    if (uid != null) {\n      await _firestore.collection('user').doc(uid).collection('notifications').doc(id).update({'isRead': true});\n    }\n  }\n\n  Future<String> _fetchCaretakerName(String caretakerUid) async {\n    try {\n      final doc = await _firestore.collection('caretaker').doc(caretakerUid).get();\n      return doc.data()?['fullName'] as String? ?? 'Caretaker Not Found';\n    } catch (e) {\n      return 'Error fetching name';\n    }\n  }\n\n  Future<void> _handleCall(String caretakerUid) async {\n    try {\n      final caretakerDoc = await _firestore.collection('caretaker').doc(caretakerUid).get();\n      final phone = caretakerDoc.data()?['phoneNo'] as String?;\n\n      if (phone != null && phone.isNotEmpty) {\n        final url = Uri.parse('tel:$phone');\n        if (await canLaunchUrl(url)) {\n          await launchUrl(url);\n        } else {\n          if (mounted) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(content: Text('Could not launch phone app.')),\n            );\n          }\n        }\n      } else {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Caretaker phone number not available.')),\n          );\n        }\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error getting phone number: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleUnbindAccept(String notificationId, String caretakerUid, String connectionId) async {\n    final userUid = _auth.currentUser?.uid;\n    if (userUid == null) return;\n\n    try {\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'unbound',\n      });\n\n      // Update both profiles\n      await _firestore.collection('user').doc(userUid).update({\n        'isConnected': false,\n        'currentConnectionId': null,\n      });\n\n      await _firestore.collection('caretaker').doc(caretakerUid).update({\n        'isConnected': false,\n        'currentConnectionId': null,\n      });\n\n      // Delete the notification\n      await _firestore\n          .collection('user')\n          .doc(userUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Connection unbound successfully')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to unbind connection: $e')),\n        );\n      }\n    }\n  }\n\n  Future<void> _handleUnbindDecline(String notificationId, String connectionId) async {\n    final userUid = _auth.currentUser?.uid;\n    if (userUid == null) return;\n\n    try {\n      // Revert unbind request\n      await _firestore.collection('connections').doc(connectionId).update({\n        'status': 'accepted',\n        'requestedBy': null,\n      });\n\n      // Delete the notification\n      await _firestore\n          .collection('user')\n          .doc(userUid)\n          .collection('notifications')\n          .doc(notificationId)\n          .delete();\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(content: Text('Unbind request declined')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Failed to decline unbind: $e')),\n        );\n      }\n    }\n  }\n\n  Widget _buildNotificationCard(DocumentSnapshot doc) {\n    final data = doc.data() as Map<String, dynamic>;\n    final type = data['type'] as String? ?? 'general';\n    final isRead = data['isRead'] as bool? ?? false;\n    final senderUid = data['from'] as String?;\n    final notificationMessage = data['message'] as String? ?? 'No message.';\n    final connectionId = data['connectionId'] as String?;\n\n    TextStyle textStyle = const TextStyle(fontWeight: FontWeight.normal);\n    Color cardColor = Colors.white;\n    IconData icon = Icons.info;\n\n    if (type == 'unbind_request') {\n      textStyle = const TextStyle(\n        fontWeight: FontWeight.bold,\n        color: Colors.orange,\n      );\n      cardColor = Colors.orange.shade50;\n      icon = Icons.link_off;\n    } else if (!isRead) {\n      cardColor = Colors.yellow.shade100;\n    }\n\n    return Card(\n      elevation: 3,\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\n      color: cardColor,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: Padding(\n        padding: const EdgeInsets.all(12.0),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            ListTile(\n              leading: Icon(icon, color: Colors.blueAccent),\n              title: (type == 'unbind_request' && senderUid != null)\n                  ? FutureBuilder<String>(\n                      future: _fetchCaretakerName(senderUid),\n                      builder: (context, snapshot) {\n                        String caretakerName = snapshot.data ?? 'Loading Caretaker...';\n                        String displayMessage = 'Unbind request from $caretakerName.';\n                        return Text(displayMessage, style: textStyle);\n                      },\n                    )\n                  : Text(notificationMessage, style: textStyle),\n              subtitle: Text(\n                'Received: ${DateFormat('MMM dd, hh:mm a').format((data['createdAt'] as Timestamp).toDate())}',\n                style: const TextStyle(fontSize: 12, color: Colors.grey),\n              ),\n              contentPadding: EdgeInsets.zero,\n              onTap: () => _markRead(doc.id),\n            ),\n\n            if (type == 'unbind_request' && senderUid != null && connectionId != null)\n              Padding(\n                padding: const EdgeInsets.only(top: 8.0),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  children: [\n                    Expanded(\n                      flex: 1,\n                      child: OutlinedButton.icon(\n                        icon: const Icon(Icons.phone, size: 18, color: Colors.green),\n                        label: const Text('Call', style: TextStyle(fontSize: 13, color: Colors.green)),\n                        onPressed: () => _handleCall(senderUid),\n                        style: OutlinedButton.styleFrom(\n                          padding: const EdgeInsets.symmetric(horizontal: 0),\n                          side: const BorderSide(color: Colors.green),\n                        ),\n                      ),\n                    ),\n                    const SizedBox(width: 8),\n                    Expanded(\n                      flex: 2,\n                      child: ElevatedButton.icon(\n                        icon: const Icon(Icons.check, size: 18, color: Colors.white),\n                        label: const Text('Accept', style: TextStyle(fontSize: 13, color: Colors.white)),\n                        onPressed: () => _handleUnbindAccept(doc.id, senderUid, connectionId),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: Colors.orange,\n                          padding: const EdgeInsets.symmetric(horizontal: 0),\n                        ),\n                      ),\n                    ),\n                    const SizedBox(width: 8),\n                    Expanded(\n                      flex: 2,\n                      child: ElevatedButton.icon(\n                        icon: const Icon(Icons.close, size: 18, color: Colors.white),\n                        label: const Text('Decline', style: TextStyle(fontSize: 13, color: Colors.white)),\n                        onPressed: () => _handleUnbindDecline(doc.id, connectionId),\n                        style: ElevatedButton.styleFrom(\n                          backgroundColor: Colors.red,\n                          padding: const EdgeInsets.symmetric(horizontal: 0),\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Notifications'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: StreamBuilder<QuerySnapshot>(\n          stream: _getNotifications(),\n          builder: (context, snapshot) {\n            if (snapshot.hasError) {\n              return Center(\n                child: Text('Error: ${snapshot.error}', style: const TextStyle(color: Colors.red)),\n              );\n            }\n            if (!snapshot.hasData) {\n              return const Center(child: CircularProgressIndicator(color: Colors.blueAccent));\n            }\n            final notifs = snapshot.data!.docs;\n            if (notifs.isEmpty) {\n              return const Center(\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    Icon(Icons.notifications_off, size: 64, color: Colors.grey),\n                    SizedBox(height: 16),\n                    Text(\n                      'No notifications yet',\n                      style: TextStyle(fontSize: 18, color: Colors.grey),\n                    ),\n                  ],\n                ),\n              );\n            }\n            return ListView.builder(\n              padding: const EdgeInsets.all(16.0),\n              itemCount: notifs.length,\n              itemBuilder: (context, index) {\n                return _buildNotificationCard(notifs[index]);\n              },\n            );\n          },\n        ),\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "profile": {
        "edit_profile_screen.dart": {
          "_text": "// lib/user/profile/edit_profile_screen.dart\nimport 'dart:io';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:cloudinary_public/cloudinary_public.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:intl/intl.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass EditProfileScreen extends StatefulWidget {\n  final Map<String, dynamic> userData;\n  const EditProfileScreen({super.key, required this.userData});\n\n  @override\n  State<EditProfileScreen> createState() => _EditProfileScreenState();\n}\n\nclass _EditProfileScreenState extends State<EditProfileScreen> {\n  late TextEditingController _fullNameController;\n  late TextEditingController _usernameController;\n  late TextEditingController _bioController;\n  late TextEditingController _phoneController;\n  late TextEditingController _localityController;\n  late TextEditingController _cityController;\n  late TextEditingController _stateController;\n  DateTime? _dob;\n  String? _gender;\n  String _profileImageUrl = '';\n  File? _newProfileImage;\n  final _picker = ImagePicker();\n  final cloudinary = CloudinaryPublic('dts8hgf4f', 'user_image');\n  bool _isSaving = false;\n  List<Map<String, dynamic>> _emergencyContacts = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _fullNameController = TextEditingController(text: widget.userData['fullName']);\n    _usernameController = TextEditingController(text: widget.userData['username']);\n    _bioController = TextEditingController(text: widget.userData['bio']);\n    _phoneController = TextEditingController(text: widget.userData['phoneNo']);\n    _localityController = TextEditingController(text: widget.userData['locality']);\n    _cityController = TextEditingController(text: widget.userData['city']);\n    _stateController = TextEditingController(text: widget.userData['state']);\n    _dob = widget.userData['dob']?.toDate();\n    \n    // Handle gender case conversion\n    final genderFromData = widget.userData['gender'];\n    if (genderFromData is String) {\n      _gender = genderFromData.toLowerCase();\n    } else {\n      _gender = 'male'; // default\n    }\n    \n    _profileImageUrl = widget.userData['profileImageUrl'] ?? '';\n    _emergencyContacts = List<Map<String, dynamic>>.from(widget.userData['emergencyContacts'] ?? []);\n  }\n\n  Future<void> _pickImage() async {\n    if (await Permission.photos.request().isGranted) {\n      final picked = await _picker.pickImage(source: ImageSource.gallery);\n      if (picked != null && mounted) {\n        setState(() => _newProfileImage = File(picked.path));\n      }\n    }\n  }\n\n  Future<String?> _uploadImage() async {\n    if (_newProfileImage == null) return _profileImageUrl;\n    try {\n      final response = await cloudinary.uploadFile(CloudinaryFile.fromFile(_newProfileImage!.path));\n      return response.secureUrl;\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Upload failed: $e')));\n      }\n      return _profileImageUrl;\n    }\n  }\n\n  Future<void> _saveChanges() async {\n    if (_isSaving || !mounted) return;\n    setState(() => _isSaving = true);\n    final url = await _uploadImage();\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null && mounted) {\n      try {\n        await FirebaseFirestore.instance.collection('user').doc(uid).update({\n          'fullName': _fullNameController.text.trim(),\n          'username': _usernameController.text.trim(),\n          'bio': _bioController.text.trim(),\n          'phoneNo': _phoneController.text.trim(),\n          'profileImageUrl': url,\n          'locality': _localityController.text.trim(),\n          'city': _cityController.text.trim(),\n          'state': _stateController.text.trim(),\n          'dob': _dob != null ? Timestamp.fromDate(_dob!) : null,\n          'gender': _gender?.toLowerCase(), // Ensure lowercase when saving\n          'emergencyContacts': _emergencyContacts,\n        });\n        if (mounted) Navigator.pop(context, true);\n      } catch (e) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Save failed: $e')));\n        }\n      }\n    }\n    if (mounted) setState(() => _isSaving = false);\n  }\n\n  Future<void> _pickDob() async {\n    final DateTime? picked = await showDatePicker(\n      context: context,\n      initialDate: _dob ?? DateTime(2000),\n      firstDate: DateTime(1900),\n      lastDate: DateTime.now(),\n      builder: (context, child) {\n        return Theme(\n          data: ThemeData.light().copyWith(\n            colorScheme: const ColorScheme.light(\n              primary: Colors.blueAccent,\n              onPrimary: Colors.white,\n              onSurface: Colors.black,\n            ),\n          ),\n          child: child!,\n        );\n      },\n    );\n    if (picked != null && picked != _dob) {\n      setState(() {\n        _dob = picked;\n      });\n    }\n  }\n\n  void _addEmergencyContact() {\n    _showContactDialog();\n  }\n\n  void _editEmergencyContact(int index) {\n    _showContactDialog(index: index);\n  }\n\n  void _deleteEmergencyContact(int index) {\n    setState(() {\n      _emergencyContacts.removeAt(index);\n    });\n  }\n\n  void _showContactDialog({int? index}) {\n    final isEdit = index != null;\n    final nameController = TextEditingController(text: isEdit ? _emergencyContacts[index]['name'] : '');\n    final relationController = TextEditingController(text: isEdit ? _emergencyContacts[index]['relation'] : '');\n    final phoneController = TextEditingController(text: isEdit ? _emergencyContacts[index]['number'] : '');\n\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          title: Text(isEdit ? 'Edit Contact' : 'Add Contact'),\n          content: SingleChildScrollView(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                TextField(controller: nameController, decoration: const InputDecoration(labelText: 'Name')),\n                TextField(controller: relationController, decoration: const InputDecoration(labelText: 'Relation')),\n                TextField(controller: phoneController, decoration: const InputDecoration(labelText: 'Phone')),\n              ],\n            ),\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: const Text('Cancel'),\n            ),\n            ElevatedButton(\n              onPressed: () {\n                final name = nameController.text.trim();\n                final relation = relationController.text.trim();\n                final phone = phoneController.text.trim();\n                if (name.isNotEmpty && relation.isNotEmpty && phone.isNotEmpty) {\n                  final contact = {'name': name, 'relation': relation, 'number': phone};\n                  setState(() {\n                    if (isEdit) {\n                      _emergencyContacts[index] = contact;\n                    } else {\n                      _emergencyContacts.add(contact);\n                    }\n                  });\n                  Navigator.pop(context);\n                }\n              },\n              child: Text(isEdit ? 'Update' : 'Add'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Edit Profile'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView(\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text(\n                'Profile Picture',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              Center(\n                child: GestureDetector(\n                  onTap: _pickImage,\n                  child: Stack(\n                    children: [\n                      CircleAvatar(\n                        radius: 60,\n                        backgroundImage: _newProfileImage != null\n                            ? FileImage(_newProfileImage!)\n                            : (_profileImageUrl.isNotEmpty ? NetworkImage(_profileImageUrl) : null),\n                        child: (_newProfileImage == null && _profileImageUrl.isEmpty)\n                            ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                            : null,\n                      ),\n                      Positioned(\n                        bottom: 0,\n                        right: 0,\n                        child: CircleAvatar(\n                          backgroundColor: Colors.blueAccent,\n                          radius: 20,\n                          child: const Icon(Icons.camera_alt, color: Colors.white, size: 20),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Personal Details',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              _buildTextField(_fullNameController, 'Full Name', Icons.person),\n              _buildTextField(_usernameController, 'Username', Icons.alternate_email),\n              _buildTextField(_bioController, 'Bio', Icons.info, maxLines: 3),\n              _buildTextField(_phoneController, 'Phone Number', Icons.phone, keyboardType: TextInputType.phone),\n              Card(\n                elevation: 2,\n                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                child: ListTile(\n                  title: Text(_dob == null ? 'Select DOB' : DateFormat('yyyy-MM-dd').format(_dob!)),\n                  trailing: const Icon(Icons.calendar_today, color: Colors.blueAccent),\n                  onTap: _pickDob,\n                ),\n              ),\n              const SizedBox(height: 8),\n              DropdownButtonFormField<String>(\n                value: _gender, // Now this will match exactly with lowercase values\n                hint: const Text('Select Gender'),\n                decoration: InputDecoration(\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                ),\n                items: [\n                  DropdownMenuItem(value: 'male', child: const Text('Male')),\n                  DropdownMenuItem(value: 'female', child: const Text('Female')),\n                  DropdownMenuItem(value: 'other', child: const Text('Other')),\n                ],\n                onChanged: (value) => setState(() => _gender = value),\n              ),\n              const SizedBox(height: 24),\n              const Text(\n                'Location',\n                style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n              ),\n              const SizedBox(height: 8),\n              _buildTextField(_localityController, 'Locality', Icons.location_on),\n              _buildTextField(_cityController, 'City', Icons.location_city),\n              _buildTextField(_stateController, 'State', Icons.map),\n              const SizedBox(height: 24),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  const Text(\n                    'Emergency Contacts',\n                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.w600, color: Colors.blueAccent),\n                  ),\n                  IconButton(\n                    icon: const Icon(Icons.add_circle, color: Colors.blueAccent),\n                    onPressed: _addEmergencyContact,\n                  ),\n                ],\n              ),\n              const SizedBox(height: 8),\n              if (_emergencyContacts.isEmpty)\n                Card(\n                  elevation: 2,\n                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                  child: const Padding(\n                    padding: EdgeInsets.all(16.0),\n                    child: Center(\n                      child: Text(\n                        'No emergency contacts added',\n                        style: TextStyle(color: Colors.grey),\n                      ),\n                    ),\n                  ),\n                )\n              else\n                Column(\n                  children: _emergencyContacts.asMap().entries.map((entry) {\n                    int idx = entry.key;\n                    Map<String, dynamic> contact = entry.value;\n                    return Card(\n                      elevation: 2,\n                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                      child: ListTile(\n                        leading: const Icon(Icons.emergency, color: Colors.red),\n                        title: Text(contact['name'] ?? ''),\n                        subtitle: Text(\n                          'Relation: ${contact['relation'] ?? ''}\\\\nPhone: ${contact['number'] ?? ''}',\n                        ),\n                        trailing: Row(\n                          mainAxisSize: MainAxisSize.min,\n                          children: [\n                            IconButton(\n                              icon: const Icon(Icons.edit, color: Colors.blue),\n                              onPressed: () => _editEmergencyContact(idx),\n                            ),\n                            IconButton(\n                              icon: const Icon(Icons.delete, color: Colors.red),\n                              onPressed: () => _deleteEmergencyContact(idx),\n                            ),\n                          ],\n                        ),\n                      ),\n                    );\n                  }).toList(),\n                ),\n              const SizedBox(height: 32),\n              _isSaving\n                  ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n                  : ElevatedButton(\n                      onPressed: _saveChanges,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Save Changes', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(TextEditingController controller, String label, IconData icon, {int maxLines = 1, TextInputType? keyboardType}) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        decoration: InputDecoration(\n          labelText: label,\n          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n          filled: true,\n          fillColor: Colors.white,\n          prefixIcon: Icon(icon, color: Colors.blueAccent),\n        ),\n        maxLines: maxLines,\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _fullNameController.dispose();\n    _usernameController.dispose();\n    _bioController.dispose();\n    _phoneController.dispose();\n    _localityController.dispose();\n    _cityController.dispose();\n    _stateController.dispose();\n    super.dispose();\n  }\n}",
          "_encoding": "utf-8"
        },
        "settings_screen.dart": {
          "_text": "// lib/user/profile/settings_screen.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport '../../report_page.dart';\nimport '../../welcome_page.dart';\n\nclass SettingsScreen extends StatelessWidget {\n  const SettingsScreen({super.key});\n\n  Future<void> _logout(BuildContext context) async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid != null) {\n      final playerId = OneSignal.User.pushSubscription.id;\n      if (playerId != null) {\n        await FirebaseFirestore.instance.collection('user').doc(uid).update({\n          'playerIds': FieldValue.arrayRemove([playerId]),\n        });\n      }\n    }\n    await FirebaseAuth.instance.signOut();\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.remove('lastRole'); // Clear role on logout\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(builder: (context) => const WelcomePage()),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Settings'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: ListView(\n          padding: const EdgeInsets.all(16.0),\n          children: [\n            const Text(\n              'Account',\n              style: TextStyle(\n                fontSize: 18,\n                fontWeight: FontWeight.w600,\n                color: Colors.blueAccent,\n              ),\n            ),\n            const SizedBox(height: 8),\n            Card(\n              elevation: 2,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n              child: ListTile(\n                leading: const Icon(Icons.logout, color: Colors.red),\n                title: const Text('Logout'),\n                onTap: () => _logout(context),\n              ),\n            ),\n            const SizedBox(height: 24),\n\n            const Text(\n              'Preferences',\n              style: TextStyle(\n                fontSize: 18,\n                fontWeight: FontWeight.w600,\n                color: Colors.blueAccent,\n              ),\n            ),\n            const SizedBox(height: 8),\n\n            /// 🔹 Added Report Option\n            Card(\n              elevation: 2,\n              shape: RoundedRectangleBorder(\n                borderRadius: BorderRadius.circular(12),\n              ),\n              child: ListTile(\n                leading: const Icon(Icons.report, color: Colors.orange),\n                title: const Text('Report'),\n                onTap: () => Navigator.push(\n                  context,\n                  MaterialPageRoute(\n                    builder: (context) =>\n                        const ReportPage(reporterRole: 'user'),\n                  ),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
          "_encoding": "utf-8"
        },
        "user_profile.dart": {
          "_text": "// lib/user/profile/user_profile.dart\n// lib/user/profile/user_profile.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:url_launcher/url_launcher.dart';\nimport 'edit_profile_screen.dart';\nimport 'settings_screen.dart';\n\nclass UserProfile extends StatefulWidget {\n  const UserProfile({super.key});\n\n  @override\n  State<UserProfile> createState() => _UserProfileState();\n}\n\nclass _UserProfileState extends State<UserProfile> {\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  Map<String, dynamic>? _userData;\n  bool _isLoading = true;\n  bool _hasError = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadUserData();\n  }\n\n  Future<void> _loadUserData() async {\n    if (!mounted) return;\n\n    setState(() {\n      _isLoading = true;\n      _hasError = false;\n    });\n\n    try {\n      final uid = _auth.currentUser?.uid;\n      if (uid != null) {\n        final doc = await _firestore.collection('user').doc(uid).get();\n        if (doc.exists && mounted) {\n          setState(() {\n            _userData = doc.data();\n            _isLoading = false;\n          });\n        } else if (mounted) {\n          setState(() {\n            _isLoading = false;\n            _hasError = true;\n          });\n        }\n      } else if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    } catch (e) {\n      print('Error loading user data: $e');\n      if (mounted) {\n        setState(() {\n          _isLoading = false;\n          _hasError = true;\n        });\n      }\n    }\n  }\n\n  Future<void> _callNumber(String number) async {\n    final uri = Uri(scheme: 'tel', path: number);\n    if (await canLaunchUrl(uri)) {\n      await launchUrl(uri);\n    } else if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Could not launch dialer for $number')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.grey[100],\n      appBar: AppBar(\n        title: const Text('Profile'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n        leading: IconButton(\n          icon: const Icon(Icons.menu, color: Colors.white),\n          onPressed: () {\n            if (mounted) {\n              Navigator.push(\n                context,\n                MaterialPageRoute(builder: (context) => const SettingsScreen()),\n              );\n            }\n          },\n        ),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.edit, color: Colors.white),\n            onPressed: () async {\n              if (_userData != null && mounted) {\n                final updated = await Navigator.push(\n                  context,\n                  MaterialPageRoute(\n                    builder: (context) => EditProfileScreen(userData: _userData ?? {}),\n                  ),\n                );\n                if (updated == true && mounted) {\n                  _loadUserData();\n                }\n              }\n            },\n          ),\n        ],\n      ),\n      body: _isLoading\n          ? const Center(child: CircularProgressIndicator(color: Colors.blueAccent))\n          : _hasError\n              ? Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      const Icon(Icons.error, size: 64, color: Colors.red),\n                      const SizedBox(height: 16),\n                      const Text(\n                        'Error loading profile data',\n                        style: TextStyle(fontSize: 18, color: Colors.red),\n                      ),\n                      const SizedBox(height: 16),\n                      ElevatedButton(\n                        onPressed: _loadUserData,\n                        style: ElevatedButton.styleFrom(backgroundColor: Colors.blueAccent),\n                        child: const Text('Retry', style: TextStyle(color: Colors.white)),\n                      ),\n                    ],\n                  ),\n                )\n              : _userData == null\n                  ? const Center(\n                      child: Text(\n                        'No user data available',\n                        style: TextStyle(fontSize: 18, color: Colors.grey),\n                      ),\n                    )\n                  : RefreshIndicator(\n                      onRefresh: _loadUserData,\n                      color: Colors.blueAccent,\n                      child: SingleChildScrollView(\n                        physics: const AlwaysScrollableScrollPhysics(),\n                        padding: const EdgeInsets.all(16.0),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            _buildHeader(),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Personal Information'),\n                            _buildCard(\n                              Column(\n                                crossAxisAlignment: CrossAxisAlignment.start,\n                                children: [\n                                  _buildInfoRow(Icons.info, 'Bio:', _userData!['bio']),\n                                  _buildInfoRow(Icons.email, 'Email:', _userData!['email']),\n                                  _buildInfoRow(Icons.phone, 'Phone:', _userData!['phoneNo']),\n                                  _buildInfoRow(\n                                      Icons.cake,\n                                      'DOB:',\n                                      _userData!['dob'] != null\n                                          ? DateFormat('yyyy-MM-dd').format(_userData!['dob'].toDate())\n                                          : ''),\n                                  _buildInfoRow(Icons.person, 'Gender:', _userData!['gender']),\n                                ],\n                              ),\n                            ),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Location'),\n                            _buildCard(\n                              Column(\n                                crossAxisAlignment: CrossAxisAlignment.start,\n                                children: [\n                                  _buildInfoRow(Icons.location_on, 'Locality:', _userData!['locality']),\n                                  _buildInfoRow(Icons.location_city, 'City:', _userData!['city']),\n                                  _buildInfoRow(Icons.map, 'State:', _userData!['state']),\n                                ],\n                              ),\n                            ),\n                            const SizedBox(height: 24),\n                            _buildSectionTitle('Emergency Contacts'),\n                            const SizedBox(height: 8),\n                            _buildEmergencyContacts(),\n                          ],\n                        ),\n                      ),\n                    ),\n    );\n  }\n\n  Widget _buildHeader() {\n    return Center(\n      child: Column(\n        children: [\n          CircleAvatar(\n            radius: 60,\n            backgroundColor: Colors.grey[300],\n            backgroundImage: (_userData!['profileImageUrl'] != null &&\n                    _userData!['profileImageUrl'].toString().isNotEmpty)\n                ? NetworkImage(_userData!['profileImageUrl'])\n                : null,\n            child: (_userData!['profileImageUrl'] == null ||\n                    _userData!['profileImageUrl'].toString().isEmpty)\n                ? const Icon(Icons.person, size: 60, color: Colors.blueAccent)\n                : null,\n          ),\n          const SizedBox(height: 16),\n          Text(\n            _userData!['fullName'] ?? 'No Name',\n            style: const TextStyle(\n              fontSize: 24,\n              fontWeight: FontWeight.bold,\n              color: Colors.blueAccent,\n            ),\n          ),\n          Text(\n            '@${_userData!['username'] ?? ''}',\n            style: const TextStyle(fontSize: 16, color: Colors.grey),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSectionTitle(String title) {\n    return Text(\n      title,\n      style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.blueAccent),\n    );\n  }\n\n  Widget _buildCard(Widget child) {\n    return Card(\n      elevation: 3,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      color: Colors.white,\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: child,\n      ),\n    );\n  }\n\n  Widget _buildEmergencyContacts() {\n    final contacts = _userData!['emergencyContacts'] as List?;\n    if (contacts == null || contacts.isEmpty) {\n      return _buildCard(\n        const Center(\n          child: Text(\n            'No emergency contacts added',\n            style: TextStyle(color: Colors.grey),\n          ),\n        ),\n      );\n    } else {\n      return Column(\n        children: contacts.map((e) {\n          return _buildCard(\n            ListTile(\n              leading: const Icon(Icons.emergency, color: Colors.red),\n              title: Text(e['name'] ?? ''),\n              subtitle: Text(\n                'Relation: ${e['relation'] ?? ''}\\nPhone: ${e['number'] ?? ''}',\n              ),\n              trailing: IconButton(\n                icon: const Icon(Icons.phone, color: Colors.green),\n                onPressed: () {\n                  if (e['number'] != null && e['number'].toString().isNotEmpty) {\n                    _callNumber(e['number']);\n                  }\n                },\n              ),\n            ),\n          );\n        }).toList(),\n      );\n    }\n  }\n\n  Widget _buildInfoRow(IconData icon, String label, String? value) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 6.0),\n      child: Row(\n        children: [\n          Icon(icon, color: Colors.blueAccent),\n          const SizedBox(width: 8),\n          Expanded(\n            child: Text(\n              '$label ${value ?? 'Not set'}',\n              style: const TextStyle(fontSize: 16),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}",
          "_encoding": "utf-8"
        }
      },
      "user_bottom_nav.dart": {
        "_text": "// lib/user/user_bottom_nav.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'diary/diary_screen.dart';\nimport 'family/family_screen.dart';\nimport 'home/home_screen.dart';\nimport 'caretaker/caretaker_screen.dart';\nimport 'profile/user_profile.dart';\n\nclass UserBottomNav extends StatefulWidget {\n  const UserBottomNav({super.key});\n\n  @override\n  State<UserBottomNav> createState() => _UserBottomNavState();\n}\n\nclass _UserBottomNavState extends State<UserBottomNav> {\n  int _selectedIndex = 0;\n\n  final List<Widget> _pages = [\n    const HomeScreen(),\n    const FamilyScreen(),\n    const CaretakerScreen(),\n    const UserProfile(),\n    const DiaryScreen(),\n  ];\n\n  Future<void> _checkBanned() async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid == null) return;\n\n    final doc = await FirebaseFirestore.instance\n        .collection('user')\n        .doc(uid)\n        .get();\n\n    if (doc.data()?['isBanned'] == true) {\n      if (!mounted) return; // ✅ Prevent error if widget disposed\n      showDialog(\n        context: context,\n        builder: (_) => AlertDialog(\n          title: const Text('Account Banned'),\n          content: const Text('Your account has been banned.'),\n          actions: [\n            TextButton(\n              onPressed: () async {\n                await FirebaseAuth.instance.signOut();\n                if (!mounted) return;\n                Navigator.pushReplacementNamed(context, '/welcome');\n              },\n              child: const Text('Logout'),\n            ),\n          ],\n        ),\n      );\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _checkBanned(); // ✅ Run when user opens the app\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: _pages[_selectedIndex],\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _selectedIndex,\n        onTap: (index) => setState(() => _selectedIndex = index),\n        type: BottomNavigationBarType.fixed,\n        selectedItemColor: Colors.blueAccent,\n        unselectedItemColor: Colors.grey,\n        items: const [\n          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),\n          BottomNavigationBarItem(icon: Icon(Icons.group), label: 'Family'),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.manage_accounts),\n            label: 'CareTaker',\n          ),\n          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),\n          BottomNavigationBarItem(icon: Icon(Icons.book), label: 'Diary'),\n        ],\n      ),\n    );\n  }\n}\n",
        "_encoding": "utf-8"
      }
    },
    "utils": {
      "notification_helper.dart": {
        "_text": "// lib/utils/notification_helper.dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\nimport 'package:intl/intl.dart';\n\nFuture<void> sendNotification(List<String> playerIds, String content) async {\n  if (playerIds.isEmpty) return;\n\n  const appId = '73673a14-2de9-44c4-a9c5-dd531da39b59';\n  const apiKey = 'os_v2_app_onttufbn5fcmjkof3vjr3i43lhrirnuaeujum3mksb5gtjrhjnq7fj2wbm4rjwmg3kyo4ikoqvmiyv5rm5pxgqjx46gd37w3fvc2yey';\n\n  try {\n    final response = await http.post(\n      Uri.parse('https://onesignal.com/api/v1/notifications'),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': 'Basic $apiKey',\n      },\n      body: jsonEncode({\n        'app_id': appId,\n        'include_player_ids': playerIds,\n        'contents': {'en': content},\n        'priority': 10,\n      }),\n    ).timeout(const Duration(seconds: 10));\n\n    if (response.statusCode != 200) {\n      print('Failed to send notification: ${response.statusCode} - ${response.body}');\n    }\n  } catch (e) {\n    print('Error sending notification: $e');\n  }\n}\n\nFuture<void> scheduleNotification(List<String> playerIds, String content, DateTime scheduledTime) async {\n  if (playerIds.isEmpty) return;\n\n  const appId = '73673a14-2de9-44c4-a9c5-dd531da39b59';\n  const apiKey = 'os_v2_app_onttufbn5fcmjkof3vjr3i43lhrirnuaeujum3mksb5gtjrhjnq7fj2wbm4rjwmg3kyo4ikoqvmiyv5rm5pxgqjx46gd37w3fvc2yey';\n\n  final formattedTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(scheduledTime.toUtc()) + ' UTC';\n\n  try {\n    final response = await http.post(\n      Uri.parse('https://onesignal.com/api/v1/notifications'),\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n        'Authorization': 'Basic $apiKey',\n      },\n      body: jsonEncode({\n        'app_id': appId,\n        'include_player_ids': playerIds,\n        'contents': {'en': content},\n        'send_after': formattedTime,\n        'priority': 10,\n      }),\n    ).timeout(const Duration(seconds: 10));\n\n    if (response.statusCode != 200) {\n      print('Failed to schedule notification: ${response.statusCode} - ${response.body}');\n    }\n  } catch (e) {\n    print('Error scheduling notification: $e');\n  }\n}",
        "_encoding": "utf-8"
      }
    },
    "firebase_options.dart": {
      "_text": "// File generated by FlutterFire CLI.\n// ignore_for_file: type=lint\nimport 'package:firebase_core/firebase_core.dart' show FirebaseOptions;\nimport 'package:flutter/foundation.dart'\n    show defaultTargetPlatform, kIsWeb, TargetPlatform;\n\n/// Default [FirebaseOptions] for use with your Firebase apps.\n///\n/// Example:\n/// ```dart\n/// import 'firebase_options.dart';\n/// // ...\n/// await Firebase.initializeApp(\n///   options: DefaultFirebaseOptions.currentPlatform,\n/// );\n/// ```\nclass DefaultFirebaseOptions {\n  static FirebaseOptions get currentPlatform {\n    if (kIsWeb) {\n      throw UnsupportedError(\n        'DefaultFirebaseOptions have not been configured for web - '\n        'you can reconfigure this by running the FlutterFire CLI again.',\n      );\n    }\n    switch (defaultTargetPlatform) {\n      case TargetPlatform.android:\n        return android;\n      case TargetPlatform.iOS:\n        return ios;\n      case TargetPlatform.macOS:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for macos - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.windows:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for windows - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      case TargetPlatform.linux:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions have not been configured for linux - '\n          'you can reconfigure this by running the FlutterFire CLI again.',\n        );\n      default:\n        throw UnsupportedError(\n          'DefaultFirebaseOptions are not supported for this platform.',\n        );\n    }\n  }\n\n  static const FirebaseOptions android = FirebaseOptions(\n    apiKey: 'AIzaSyD24yA69_RtcP-ad4cVST3ykwfEEpWScGw',\n    appId: '1:54955106735:android:ed95e1b17fba45b566cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n  );\n\n  static const FirebaseOptions ios = FirebaseOptions(\n    apiKey: 'AIzaSyAznFalyZJzZlofbHOIYUXbGiipNwL7PXU',\n    appId: '1:54955106735:ios:da277fbc63d770d366cf5a',\n    messagingSenderId: '54955106735',\n    projectId: 'dementia-app-2025',\n    storageBucket: 'dementia-app-2025.firebasestorage.app',\n    iosBundleId: 'com.example.dementiaVirtualMemory',\n  );\n}\n",
      "_encoding": "utf-8"
    },
    "forgot_password_page.dart": {
      "_text": "// lib/forgot_password_page.dart\n// lib/forgot_password_page.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass ForgotPasswordPage extends StatefulWidget {\n  const ForgotPasswordPage({super.key});\n\n  @override\n  State<ForgotPasswordPage> createState() => _ForgotPasswordPageState();\n}\n\nclass _ForgotPasswordPageState extends State<ForgotPasswordPage> {\n  final TextEditingController emailController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  bool _loading = false;\n\n  Future<void> _resetPassword() async {\n    setState(() => _loading = true);\n    try {\n      await _auth.sendPasswordResetEmail(email: emailController.text.trim());\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Password reset link sent to ${emailController.text}')));\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Failed: $e')));\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: true, // Ensure content resizes when keyboard appears\n      appBar: AppBar(\n        title: const Text('Forgot Password'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withValues(alpha: 0.1), Colors.white],\n          ),\n        ),\n        child: SingleChildScrollView( // Add SingleChildScrollView to handle keyboard overflow\n          padding: const EdgeInsets.all(24.0),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Text(\n                'Enter your email to reset your password',\n                style: TextStyle(fontSize: 18, color: Colors.blueAccent),\n                textAlign: TextAlign.center,\n              ),\n              const SizedBox(height: 24),\n              TextField(\n                controller: emailController,\n                decoration: InputDecoration(\n                  labelText: 'Email',\n                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n                  filled: true,\n                  fillColor: Colors.white,\n                  prefixIcon: const Icon(Icons.email, color: Colors.blueAccent),\n                ),\n              ),\n              const SizedBox(height: 32),\n              _loading\n                  ? const CircularProgressIndicator(color: Colors.blueAccent)\n                  : ElevatedButton(\n                      onPressed: _resetPassword,\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.blueAccent,\n                        padding: const EdgeInsets.symmetric(vertical: 16),\n                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n                        minimumSize: const Size(double.infinity, 50),\n                      ),\n                      child: const Text('Send Reset Link', style: TextStyle(fontSize: 18, color: Colors.white)),\n                    ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "login_page.dart": {
      "_text": "// lib/login_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'admin/admin_bottom_nav.dart';\nimport 'careTaker/caretaker_bottom_nav.dart';\nimport 'register_page.dart';\nimport 'forgot_password_page.dart';\nimport 'user/user_bottom_nav.dart';\n\nclass LoginPage extends StatefulWidget {\n  final String role;\n  const LoginPage({Key? key, required this.role}) : super(key: key);\n\n  @override\n  State<LoginPage> createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _loading = false;\n  bool _obscurePassword = true;\n\n  @override\n  void dispose() {\n    emailController.dispose();\n    passwordController.dispose();\n    super.dispose();\n  }\n\n  Future<void> _login() async {\n    setState(() => _loading = true);\n\n    try {\n      final credential = await _auth.signInWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n      final email = credential.user?.email;\n\n      if (uid == null) {\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Login failed: Missing user id.')),\n          );\n        }\n        return;\n      }\n\n      // Try getting document by UID first\n      DocumentSnapshot<Map<String, dynamic>> docByUid = await _firestore\n          .collection(widget.role)\n          .doc(uid)\n          .get();\n\n      Map<String, dynamic>? data;\n      DocumentReference<Map<String, dynamic>>? docRef;\n\n      if (docByUid.exists && docByUid.data() != null) {\n        data = docByUid.data();\n        docRef = _firestore.collection(widget.role).doc(uid);\n      } else {\n        // Fallback: try finding the document by email (useful for admin docs created manually)\n        if (email != null && email.isNotEmpty) {\n          final query = await _firestore\n              .collection(widget.role)\n              .where('email', isEqualTo: email)\n              .limit(1)\n              .get();\n\n          if (query.docs.isNotEmpty) {\n            final qdoc = query.docs.first;\n            data = qdoc.data();\n            docRef = qdoc.reference;\n\n            // Optional: store uid into that document to help future lookups\n            try {\n              await qdoc.reference.update({'uid': uid});\n            } catch (_) {\n              // ignore update errors\n            }\n          }\n        }\n      }\n\n      if (data == null || docRef == null) {\n        await _auth.signOut();\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Login failed: Invalid role for this account.')),\n          );\n        }\n        return;\n      }\n\n      // Ban check\n      if (data['isBanned'] == true) {\n        await _auth.signOut();\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            SnackBar(\n              content: Text('Login failed: Your ${widget.role} account has been banned by the Administrator.'),\n            ),\n          );\n        }\n        return;\n      }\n\n      // Add OneSignal player id to the found document\n      try {\n        final playerId = OneSignal.User.pushSubscription.id;\n        if (playerId != null && playerId.isNotEmpty) {\n          await docRef.update({\n            'playerIds': FieldValue.arrayUnion([playerId]),\n          });\n        }\n      } catch (_) {\n        // If OneSignal call fails, ignore - don't block login\n      }\n\n      // Save role for auto-login\n      final prefs = await SharedPreferences.getInstance();\n      await prefs.setString('lastRole', widget.role);\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Logged in as ${widget.role}')),\n        );\n      }\n\n      // Navigate to the appropriate home screen\n      if (widget.role == 'user') {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const UserBottomNav()),\n        );\n      } else if (widget.role == 'caretaker') {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const CareTaker()),\n        );\n      } else {\n        Navigator.pushReplacement(\n          context,\n          MaterialPageRoute(builder: (context) => const AdminBottomNav()),\n        );\n      }\n    } on FirebaseAuthException catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Login failed: ${e.message ?? e.code}')),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Login failed: $e')),\n        );\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  void _goToRegister() {\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(builder: (context) => RegisterPage(role: widget.role)),\n    );\n  }\n\n  void _forgotPassword() {\n    Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const ForgotPasswordPage()),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final isAdmin = widget.role == 'admin';\n    return Scaffold(\n      resizeToAvoidBottomInset: true,\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.blue.shade100, Colors.white],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SafeArea(\n          child: Center(\n            child: SingleChildScrollView(\n              padding: const EdgeInsets.all(24.0),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.center,\n                children: [\n                  Icon(Icons.lock_outline, size: 80, color: Colors.blueAccent),\n                  const SizedBox(height: 16),\n                  Text(\n                    '${widget.role.toUpperCase()} Login',\n                    style: const TextStyle(\n                      fontSize: 28,\n                      fontWeight: FontWeight.bold,\n                      color: Colors.blueAccent,\n                    ),\n                  ),\n                  const SizedBox(height: 32),\n                  TextField(\n                    controller: emailController,\n                    keyboardType: TextInputType.emailAddress,\n                    decoration: InputDecoration(\n                      labelText: 'Email',\n                      border: OutlineInputBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                      filled: true,\n                      fillColor: Colors.white,\n                      prefixIcon: const Icon(Icons.email, color: Colors.blueAccent),\n                    ),\n                  ),\n                  const SizedBox(height: 16),\n                  TextField(\n                    controller: passwordController,\n                    obscureText: _obscurePassword,\n                    decoration: InputDecoration(\n                      labelText: 'Password',\n                      border: OutlineInputBorder(\n                        borderRadius: BorderRadius.circular(12),\n                      ),\n                      filled: true,\n                      fillColor: Colors.white,\n                      prefixIcon: const Icon(Icons.lock, color: Colors.blueAccent),\n                      suffixIcon: IconButton(\n                        icon: Icon(\n                          _obscurePassword ? Icons.visibility_off : Icons.visibility,\n                          color: Colors.blueAccent,\n                        ),\n                        onPressed: () {\n                          setState(() => _obscurePassword = !_obscurePassword);\n                        },\n                      ),\n                    ),\n                  ),\n                  const SizedBox(height: 8),\n                  Align(\n                    alignment: Alignment.centerRight,\n                    child: TextButton(\n                      onPressed: _forgotPassword,\n                      child: const Text(\n                        'Forgot Password?',\n                        style: TextStyle(color: Colors.blueAccent),\n                      ),\n                    ),\n                  ),\n                  const SizedBox(height: 24),\n                  _loading\n                      ? const CircularProgressIndicator(color: Colors.blueAccent)\n                      : ElevatedButton(\n                          onPressed: _login,\n                          style: ElevatedButton.styleFrom(\n                            backgroundColor: Colors.blueAccent,\n                            padding: const EdgeInsets.symmetric(vertical: 16),\n                            shape: RoundedRectangleBorder(\n                              borderRadius: BorderRadius.circular(12),\n                            ),\n                            minimumSize: const Size(double.infinity, 50),\n                          ),\n                          child: Text(\n                            'Login as ${widget.role}',\n                            style: const TextStyle(fontSize: 18, color: Colors.white),\n                          ),\n                        ),\n                  const SizedBox(height: 16),\n                  if (!isAdmin)\n                    TextButton(\n                      onPressed: _goToRegister,\n                      child: const Text(\n                        \"Don't have an account? Sign up here\",\n                        style: TextStyle(color: Colors.blueAccent),\n                      ),\n                    ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
      "_encoding": "utf-8"
    },
    "main.dart": {
      "_text": "// lib/main.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nimport 'package:flutter_gemini/flutter_gemini.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\nimport 'firebase_options.dart';\nimport 'welcome_page.dart';\nimport 'user/user_bottom_nav.dart';\nimport 'careTaker/caretaker_bottom_nav.dart';\nimport 'admin/admin_bottom_nav.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  \n  // 1. Load the .env file once at the beginning\n  await dotenv.load(fileName: \".env\");\n  \n  // 2. Initialize Firebase\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n  \n  // 3. Initialize OneSignal (using dotenv)\n  final oneSignalAppId = dotenv.env['ONESIGNAL_APP_ID']; \n  if (oneSignalAppId != null) {\n     OneSignal.initialize(oneSignalAppId);\n     OneSignal.Notifications.requestPermission(true);\n  } else {\n     debugPrint(\"Error: ONESIGNAL_APP_ID missing in .env\");\n  }\n\n  // 4. Initialize Gemini (using dotenv)\n  \n  final geminiApiKey = dotenv.env['GEMINI_API_KEY'];\n  if (geminiApiKey != null) {\n    Gemini.init(apiKey: geminiApiKey);\n  } else {\n    debugPrint(\"Error: GEMINI_API_KEY missing in .env\");\n  }\n\n  \n  final prefs = await SharedPreferences.getInstance();\n  final user = FirebaseAuth.instance.currentUser;\n  Widget initialScreen = const WelcomePage();\n\n  if (user != null) {\n    final role = prefs.getString('lastRole') ?? 'user';\n    if (role == 'user') {\n      initialScreen = const UserBottomNav();\n    } else if (role == 'caretaker') {\n      initialScreen = const CareTaker();\n    } else if (role == 'admin') {\n      initialScreen = const AdminBottomNav();\n    }\n  }\n\n  runApp(MyApp(initialScreen: initialScreen));\n}\n\nclass MyApp extends StatelessWidget {\n  final Widget initialScreen;\n\n  const MyApp({super.key, required this.initialScreen});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'DVMA',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blueAccent), // Changed seed color for consistency\n      ),\n      home: initialScreen,\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "register_page.dart": {
      "_text": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:onesignal_flutter/onesignal_flutter.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\n\n\nenum CaregiverType { relative, nurse }\nenum UserGender { male, female, other }\nenum FormSection { personal, address, caretaker, review }\n\nclass RegisterPage extends StatefulWidget {\n  final String role;\n  const RegisterPage({super.key, required this.role});\n\n  @override\n  State<RegisterPage> createState() => _RegisterPageState();\n}\n\nclass _RegisterPageState extends State<RegisterPage> {\n  final TextEditingController nameController = TextEditingController();\n  final TextEditingController usernameController = TextEditingController();\n  final TextEditingController emailController = TextEditingController();\n  final TextEditingController passwordController = TextEditingController();\n  final TextEditingController phoneController = TextEditingController();\n  final TextEditingController bioController = TextEditingController();\n  final TextEditingController localityController = TextEditingController();\n  final TextEditingController cityController = TextEditingController();\n  final TextEditingController stateController = TextEditingController();\n  final TextEditingController experienceYearsController = TextEditingController();\n  final TextEditingController relationController = TextEditingController();\n  final TextEditingController expBioController = TextEditingController();\n  final TextEditingController gradNursingController = TextEditingController();\n\n  final _auth = FirebaseAuth.instance;\n  final _firestore = FirebaseFirestore.instance;\n  bool _loading = false;\n\n  CaregiverType _caregiverType = CaregiverType.relative;\n  UserGender _selectedGender = UserGender.male;\n  DateTime? _selectedDOB;\n  String? _selectedProfileImagePath;\n  String? _selectedCertificatePath;\n\n  FormSection _currentSection = FormSection.personal;\n\n  final ImagePicker _picker = ImagePicker();\n\n  @override\n  void dispose() {\n    nameController.dispose();\n    usernameController.dispose();\n    emailController.dispose();\n    passwordController.dispose();\n    phoneController.dispose();\n    experienceYearsController.dispose();\n    relationController.dispose();\n    bioController.dispose();\n    localityController.dispose();\n    cityController.dispose();\n    stateController.dispose();\n    expBioController.dispose();\n    gradNursingController.dispose();\n    super.dispose();\n  }\n\n  void _nextSection() {\n    if (!_validateCurrentSection()) return;\n\n    setState(() {\n      switch (_currentSection) {\n        case FormSection.personal:\n          _currentSection = FormSection.address;\n          break;\n        case FormSection.address:\n          if (widget.role == 'caretaker') {\n            _currentSection = FormSection.caretaker;\n          } else {\n            _currentSection = FormSection.review;\n          }\n          break;\n        case FormSection.caretaker:\n          _currentSection = FormSection.review;\n          break;\n        case FormSection.review:\n          _register();\n          break;\n      }\n    });\n  }\n\n  void _previousSection() {\n    setState(() {\n      switch (_currentSection) {\n        case FormSection.address:\n          _currentSection = FormSection.personal;\n          break;\n        case FormSection.caretaker:\n          _currentSection = FormSection.address;\n          break;\n        case FormSection.review:\n          if (widget.role == 'caretaker') {\n            _currentSection = FormSection.caretaker;\n          } else {\n            _currentSection = FormSection.address;\n          }\n          break;\n        case FormSection.personal:\n          break;\n      }\n    });\n  }\n\n  bool _validateCurrentSection() {\n    switch (_currentSection) {\n      case FormSection.personal:\n        if (nameController.text.trim().isEmpty ||\n            usernameController.text.trim().isEmpty ||\n            emailController.text.trim().isEmpty ||\n            passwordController.text.trim().isEmpty ||\n            phoneController.text.trim().isEmpty ||\n            _selectedDOB == null) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Please fill in all personal information fields.'),\n            ),\n          );\n          return false;\n        }\n        return true;\n      case FormSection.address:\n        if (bioController.text.trim().isEmpty ||\n            localityController.text.trim().isEmpty ||\n            cityController.text.trim().isEmpty ||\n            stateController.text.trim().isEmpty) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Please fill in all address fields.'),\n            ),\n          );\n          return false;\n        }\n        return true;\n      case FormSection.caretaker:\n        if (_caregiverType == CaregiverType.relative &&\n            relationController.text.trim().isEmpty) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(\n              content: Text('Please enter your relation to the patient.'),\n            ),\n          );\n          return false;\n        }\n        if (_caregiverType == CaregiverType.nurse) {\n          if (experienceYearsController.text.trim().isEmpty ||\n              expBioController.text.trim().isEmpty ||\n              gradNursingController.text.trim().isEmpty) {\n            ScaffoldMessenger.of(context).showSnackBar(\n              const SnackBar(\n                content: Text(\n                  'Please complete all nurse-specific experience fields.',\n                ),\n              ),\n            );\n            return false;\n          }\n        }\n        return true;\n      case FormSection.review:\n        return true;\n    }\n  }\n\n  Future<void> _selectDate(BuildContext context) async {\n    final DateTime? picked = await showDatePicker(\n      context: context,\n      initialDate: _selectedDOB ?? DateTime(2000),\n      firstDate: DateTime(1900),\n      lastDate: DateTime.now(),\n      builder: (context, child) {\n        return Theme(\n          data: ThemeData.light().copyWith(\n            colorScheme: const ColorScheme.light(\n              primary: Colors.blueAccent,\n              onPrimary: Colors.white,\n              onSurface: Colors.black,\n            ),\n          ),\n          child: child!,\n        );\n      },\n    );\n    if (picked != null && picked != _selectedDOB) {\n      setState(() {\n        _selectedDOB = picked;\n      });\n    }\n  }\n\n  void _pickProfileImage() async {\n    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);\n    if (image != null) {\n      setState(() {\n        _selectedProfileImagePath = image.path;\n      });\n    }\n  }\n\n  void _pickCertificate() async {\n    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);\n    if (image != null) {\n      setState(() {\n        _selectedCertificatePath = image.path;\n      });\n    }\n  }\n\n  // Cloudinary upload logic\n  Future<String?> _uploadFile(String? filePath, String preset) async {\n    if (filePath == null) return null;\n\n    final cloudName = dotenv.env['CLOUDINARY_CLOUD_NAME'];\n\n    if (cloudName == null || cloudName.isEmpty) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text(\n              'Error: CLOUDINARY_CLOUD_NAME missing or empty in .env',\n            ),\n          ),\n        );\n      }\n      return null;\n    }\n\n    try {\n      final uri = Uri.parse(\n        'https://api.cloudinary.com/v1_1/$cloudName/image/upload',\n      );\n\n      var request = http.MultipartRequest('POST', uri)\n        ..fields['upload_preset'] = preset\n        ..fields['cloud_name'] = cloudName;\n\n      final file = await http.MultipartFile.fromPath('file', filePath);\n      request.files.add(file);\n\n      final streamedResponse = await request.send();\n      final response = await http.Response.fromStream(streamedResponse);\n\n      if (response.statusCode == 200) {\n        final responseData = json.decode(response.body);\n        final secureUrl = responseData['secure_url'];\n\n        if (secureUrl is String && secureUrl.isNotEmpty) return secureUrl;\n        return null;\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  Future<void> _register() async {\n    setState(() => _loading = true);\n    String? profileUrl;\n    String? certificateUrl;\n\n    try {\n      final username = usernameController.text.trim();\n      final phone = phoneController.text.trim();\n\n      // Check for existing username\n      final snapUsername = await _firestore\n          .collection(widget.role)\n          .where('username', isEqualTo: username)\n          .get();\n      if (snapUsername.docs.isNotEmpty) throw 'Username already exists';\n\n      final snapPhone = await _firestore\n          .collection(widget.role)\n          .where('phoneNo', isEqualTo: phone)\n          .get();\n      if (snapPhone.docs.isNotEmpty) throw 'Phone number already exists';\n\n      // Upload files\n      profileUrl = await _uploadFile(\n        _selectedProfileImagePath,\n        'care_taker_image',\n      );\n\n      if (widget.role == 'caretaker' && _caregiverType == CaregiverType.nurse) {\n        certificateUrl = await _uploadFile(\n          _selectedCertificatePath,\n          'graduation',\n        );\n      }\n\n      final credential = await _auth.createUserWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      final uid = credential.user?.uid;\n\n      if (uid != null) {\n        Map<String, dynamic> data = {\n          'uid': uid,\n          'fullName': nameController.text.trim(),\n          'username': username,\n          'email': emailController.text.trim(),\n          'phoneNo': phone,\n          'createdAt': Timestamp.now(),\n          'gender': _selectedGender.name,\n          'dateOfBirth': Timestamp.fromDate(_selectedDOB!),\n          'bio': bioController.text.trim(),\n          'locality': localityController.text.trim(),\n          'city': cityController.text.trim(),\n          'state': stateController.text.trim(),\n          'profileImageUrl': profileUrl ?? '',\n          'isConnected': false,\n          'currentConnectionId': null,\n          'emergencyContacts': [],\n          'members': [],\n          'reports_sent': [],\n          'playerIds': [],\n          'isBanned': false,\n        };\n\n        if (widget.role == 'caretaker') {\n          data['caregiverType'] = _caregiverType.name;\n\n          if (_caregiverType == CaregiverType.relative) {\n            data['relation'] = relationController.text.trim();\n            data['experienceYears'] = 0;\n            data['experienceBio'] = '';\n            data['graduationOnNursing'] = '';\n            data['graduationCertificateUrl'] = '';\n          } else {\n            data['experienceYears'] =\n                int.tryParse(experienceYearsController.text.trim()) ?? 0;\n            data['relation'] = '';\n            data['experienceBio'] = expBioController.text.trim();\n            data['graduationOnNursing'] = gradNursingController.text.trim();\n            data['graduationCertificateUrl'] = certificateUrl ?? '';\n          }\n\n          data.addAll({'isApprove': false, 'roadmap': []});\n        }\n\n        await _firestore.collection(widget.role).doc(uid).set(data);\n\n        // Add player ID\n        final playerId = OneSignal.User.pushSubscription.id;\n        if (playerId != null) {\n          await _firestore.collection(widget.role).doc(uid).update({\n            'playerIds': FieldValue.arrayUnion([playerId]),\n          });\n        }\n\n        if (mounted) {\n          ScaffoldMessenger.of(context).showSnackBar(\n            const SnackBar(content: Text('Registration successful')),\n          );\n        }\n        Navigator.pop(context);\n      }\n    } catch (e) {\n      if (mounted) {\n        String message = e.toString().contains('firebase_auth')\n            ? (e as FirebaseAuthException).message ?? e.toString()\n            : e.toString();\n\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Registration failed: $message')),\n        );\n      }\n    } finally {\n      setState(() => _loading = false);\n    }\n  }\n\n  Widget _buildFilePicker({\n    required String label,\n    required VoidCallback onTap,\n    required bool isSelected,\n    required IconData icon,\n  }) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: InkWell(\n        onTap: onTap,\n        child: InputDecorator(\n          decoration: _inputDecoration(label, icon).copyWith(\n            contentPadding: const EdgeInsets.symmetric(\n              horizontal: 16,\n              vertical: 18,\n            ),\n            fillColor: isSelected ? Colors.green.withOpacity(0.1) : Colors.white,\n          ),\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n            children: [\n              Flexible(\n                child: Text(\n                  isSelected ? '$label Uploaded' : 'Click to Upload $label',\n                  overflow: TextOverflow.ellipsis,\n                  style: TextStyle(\n                    fontSize: 16,\n                    color: isSelected ? Colors.green : Colors.black54,\n                  ),\n                ),\n              ),\n              const SizedBox(width: 8),\n              Icon(\n                isSelected ? Icons.check_circle : Icons.upload_file,\n                color: isSelected ? Colors.green : Colors.blueAccent,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRadio(CaregiverType value, String title) {\n    return Expanded(\n      child: ListTile(\n        title: Text(title, style: const TextStyle(fontSize: 14)),\n        leading: Radio<CaregiverType>(\n          value: value,\n          groupValue: _caregiverType,\n          onChanged: (CaregiverType? selectedValue) {\n            setState(() {\n              _caregiverType = selectedValue!;\n            });\n          },\n          activeColor: Colors.blueAccent,\n        ),\n        contentPadding: EdgeInsets.zero,\n      ),\n    );\n  }\n\n  Widget _buildGenderRadio(UserGender value, String title) {\n    return Expanded(\n      child: ListTile(\n        title: Text(title, style: const TextStyle(fontSize: 14)),\n        leading: Radio<UserGender>(\n          value: value,\n          groupValue: _selectedGender,\n          onChanged: (UserGender? selectedValue) {\n            setState(() {\n              _selectedGender = selectedValue!;\n            });\n          },\n          activeColor: Colors.blueAccent,\n        ),\n        contentPadding: EdgeInsets.zero,\n      ),\n    );\n  }\n\n  // Progress indicator\n  Widget _buildProgressIndicator() {\n    final sections = widget.role == 'caretaker'\n        ? ['Personal', 'Address', 'Caretaker', 'Review']\n        : ['Personal', 'Address', 'Review'];\n    \n    final currentIndex = _currentSection.index;\n    final totalSections = sections.length;\n\n    return Column(\n      children: [\n        // Progress bar\n        LinearProgressIndicator(\n          value: (currentIndex + 1) / totalSections,\n          backgroundColor: Colors.grey[300],\n          color: Colors.blueAccent,\n        ),\n        const SizedBox(height: 16),\n        // Section labels\n        Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: sections.asMap().entries.map((entry) {\n            final index = entry.key;\n            final section = entry.value;\n            return Column(\n              children: [\n                Container(\n                  width: 30,\n                  height: 30,\n                  decoration: BoxDecoration(\n                    color: index <= currentIndex ? Colors.blueAccent : Colors.grey[300],\n                    shape: BoxShape.circle,\n                  ),\n                  child: Center(\n                    child: Text(\n                      '${index + 1}',\n                      style: TextStyle(\n                        color: index <= currentIndex ? Colors.white : Colors.grey[600],\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ),\n                ),\n                const SizedBox(height: 4),\n                Text(\n                  section,\n                  style: TextStyle(\n                    fontSize: 12,\n                    fontWeight: index == currentIndex ? FontWeight.bold : FontWeight.normal,\n                    color: index == currentIndex ? Colors.blueAccent : Colors.grey[600],\n                  ),\n                ),\n              ],\n            );\n          }).toList(),\n        ),\n        const SizedBox(height: 24),\n      ],\n    );\n  }\n\n  // Personal Information Section\n  Widget _buildPersonalSection() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const Text(\n          'Personal Information',\n          style: TextStyle(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.blueAccent,\n          ),\n        ),\n        const SizedBox(height: 16),\n        _buildTextField(nameController, 'Full Name', Icons.person),\n        _buildTextField(usernameController, 'Username', Icons.alternate_email),\n        _buildTextField(emailController, 'Email', Icons.email),\n        _buildTextField(\n          passwordController,\n          'Password',\n          Icons.lock,\n          obscureText: true,\n        ),\n        _buildTextField(\n          phoneController,\n          'Phone Number',\n          Icons.phone,\n          keyboardType: TextInputType.phone,\n        ),\n\n        // Profile Image Upload\n        _buildFilePicker(\n          label: 'Profile Image (Optional)',\n          onTap: _pickProfileImage,\n          isSelected: _selectedProfileImagePath != null,\n          icon: Icons.person_pin,\n        ),\n\n        // Gender Selection\n        const SizedBox(height: 8),\n        const Text(\n          'Gender:',\n          style: TextStyle(fontSize: 16, color: Colors.black87),\n        ),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            _buildGenderRadio(UserGender.male, 'Male'),\n            _buildGenderRadio(UserGender.female, 'Female'),\n            _buildGenderRadio(UserGender.other, 'Other'),\n          ],\n        ),\n\n        // Date of Birth Picker\n        Padding(\n          padding: const EdgeInsets.only(bottom: 16, top: 8),\n          child: InkWell(\n            onTap: () => _selectDate(context),\n            child: InputDecorator(\n              decoration: _inputDecoration('Date of Birth', Icons.calendar_today),\n              child: Text(\n                _selectedDOB == null\n                    ? 'Select Date of Birth'\n                    : '${_selectedDOB!.day}/${_selectedDOB!.month}/${_selectedDOB!.year}',\n                style: const TextStyle(fontSize: 16),\n              ),\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  // Address Section\n  Widget _buildAddressSection() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const Text(\n          'Address Information',\n          style: TextStyle(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.blueAccent,\n          ),\n        ),\n        const SizedBox(height: 16),\n        _buildTextField(\n          bioController,\n          'Bio (Tell us about yourself)',\n          Icons.info_outline,\n          maxLines: 3,\n        ),\n        _buildTextField(localityController, 'Locality', Icons.location_on),\n        _buildTextField(cityController, 'City', Icons.location_city),\n        _buildTextField(stateController, 'State', Icons.public),\n      ],\n    );\n  }\n\n  // Caretaker Section\n  Widget _buildCaretakerSection() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const Text(\n          'Caretaker Details',\n          style: TextStyle(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.blueAccent,\n          ),\n        ),\n        const SizedBox(height: 16),\n\n        // Caregiver Type Radio Button Selection\n        const Text(\n          'I am registering as a:',\n          style: TextStyle(fontSize: 16, color: Colors.black87),\n        ),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            _buildRadio(CaregiverType.relative, 'Relative'),\n            _buildRadio(CaregiverType.nurse, 'Nurse'),\n          ],\n        ),\n        const SizedBox(height: 16),\n\n        // Conditional Input Field\n        if (_caregiverType == CaregiverType.relative) ...[\n          _buildTextField(\n            relationController,\n            'Relation to Patient',\n            Icons.family_restroom,\n          ),\n        ] else ...[\n          _buildTextField(\n            experienceYearsController,\n            'Experience Years (in years)',\n            Icons.work_history,\n            keyboardType: TextInputType.number,\n          ),\n          _buildTextField(\n            expBioController,\n            'Experience Bio',\n            Icons.description,\n            maxLines: 3,\n          ),\n          _buildTextField(\n            gradNursingController,\n            'Nursing Qualification/Graduation',\n            Icons.school,\n          ),\n          _buildFilePicker(\n            label: 'Graduation Certificate (Image) (Optional)',\n            onTap: _pickCertificate,\n            isSelected: _selectedCertificatePath != null,\n            icon: Icons.note_alt,\n          ),\n        ],\n      ],\n    );\n  }\n\n  // Review Section\n  Widget _buildReviewSection() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const Text(\n          'Review Information',\n          style: TextStyle(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.blueAccent,\n          ),\n        ),\n        const SizedBox(height: 16),\n        \n        // Personal Info Review\n        _buildReviewItem('Full Name', nameController.text),\n        _buildReviewItem('Username', usernameController.text),\n        _buildReviewItem('Email', emailController.text),\n        _buildReviewItem('Phone', phoneController.text),\n        _buildReviewItem('Gender', _selectedGender.name),\n        _buildReviewItem('Date of Birth', \n          _selectedDOB != null \n            ? '${_selectedDOB!.day}/${_selectedDOB!.month}/${_selectedDOB!.year}'\n            : 'Not selected'\n        ),\n        \n        // Address Info Review\n        _buildReviewItem('Bio', bioController.text),\n        _buildReviewItem('Locality', localityController.text),\n        _buildReviewItem('City', cityController.text),\n        _buildReviewItem('State', stateController.text),\n        \n        // Caretaker Specific Review\n        if (widget.role == 'caretaker') ...[\n          _buildReviewItem('Caregiver Type', _caregiverType.name),\n          if (_caregiverType == CaregiverType.relative)\n            _buildReviewItem('Relation', relationController.text),\n          if (_caregiverType == CaregiverType.nurse) ...[\n            _buildReviewItem('Experience Years', experienceYearsController.text),\n            _buildReviewItem('Experience Bio', expBioController.text),\n            _buildReviewItem('Nursing Qualification', gradNursingController.text),\n          ]\n        ],\n        \n        const SizedBox(height: 16),\n        Text(\n          'Please review your information before submitting.',\n          style: TextStyle(\n            fontSize: 14,\n            color: Colors.grey[600],\n            fontStyle: FontStyle.italic,\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildReviewItem(String label, String value) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 12),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Expanded(\n            flex: 2,\n            child: Text(\n              '$label:',\n              style: const TextStyle(\n                fontWeight: FontWeight.bold,\n                color: Colors.black87,\n              ),\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: Text(\n              value.isEmpty ? 'Not provided' : value,\n              style: TextStyle(\n                color: value.isEmpty ? Colors.grey : Colors.black54,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      resizeToAvoidBottomInset: true,\n      appBar: AppBar(\n        title: Text('Register as ${widget.role.toUpperCase()}'),\n        backgroundColor: Colors.blueAccent,\n        elevation: 0,\n      ),\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [Colors.blueAccent.withOpacity(0.1), Colors.white],\n          ),\n        ),\n        child: Column(\n          children: [\n            // Progress Indicator\n            Padding(\n              padding: const EdgeInsets.all(24.0),\n              child: _buildProgressIndicator(),\n            ),\n\n            // Form Content\n            Expanded(\n              child: SingleChildScrollView(\n                padding: const EdgeInsets.symmetric(horizontal: 24.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    if (_currentSection == FormSection.personal)\n                      _buildPersonalSection(),\n                    if (_currentSection == FormSection.address)\n                      _buildAddressSection(),\n                    if (_currentSection == FormSection.caretaker)\n                      _buildCaretakerSection(),\n                    if (_currentSection == FormSection.review)\n                      _buildReviewSection(),\n\n                    const SizedBox(height: 32),\n                  ],\n                ),\n              ),\n            ),\n\n            // Navigation Buttons\n            Container(\n              padding: const EdgeInsets.all(24.0),\n              child: Row(\n                children: [\n                  // Back Button\n                  if (_currentSection != FormSection.personal)\n                    Expanded(\n                      child: OutlinedButton(\n                        onPressed: _previousSection,\n                        style: OutlinedButton.styleFrom(\n                          padding: const EdgeInsets.symmetric(vertical: 16),\n                          shape: RoundedRectangleBorder(\n                            borderRadius: BorderRadius.circular(12),\n                          ),\n                        ),\n                        child: const Text(\n                          'Back',\n                          style: TextStyle(fontSize: 16),\n                        ),\n                      ),\n                    ),\n                  if (_currentSection != FormSection.personal)\n                    const SizedBox(width: 16),\n\n                  // Next/Submit Button\n                  Expanded(\n                    child: _loading\n                        ? const Center(\n                            child: CircularProgressIndicator(\n                              color: Colors.blueAccent,\n                            ),\n                          )\n                        : ElevatedButton(\n                            onPressed: _nextSection,\n                            style: ElevatedButton.styleFrom(\n                              backgroundColor: Colors.blueAccent,\n                              padding: const EdgeInsets.symmetric(vertical: 16),\n                              shape: RoundedRectangleBorder(\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                            ),\n                            child: Text(\n                              _currentSection == FormSection.review\n                                  ? 'Submit'\n                                  : 'Next',\n                              style: const TextStyle(\n                                fontSize: 16,\n                                color: Colors.white,\n                              ),\n                            ),\n                          ),\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTextField(\n    TextEditingController controller,\n    String label,\n    IconData icon, {\n    bool obscureText = false,\n    TextInputType? keyboardType,\n    int maxLines = 1,\n  }) {\n    return Padding(\n      padding: const EdgeInsets.only(bottom: 16),\n      child: TextField(\n        controller: controller,\n        maxLines: maxLines,\n        decoration: _inputDecoration(label, icon),\n        obscureText: obscureText,\n        keyboardType: keyboardType,\n      ),\n    );\n  }\n\n  InputDecoration _inputDecoration(String label, IconData icon) {\n    return InputDecoration(\n      labelText: label,\n      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),\n      filled: true,\n      fillColor: Colors.white,\n      prefixIcon: Icon(icon, color: Colors.blueAccent),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "report_page.dart": {
      "_text": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass ReportPage extends StatefulWidget {\n  final String reporterRole; // 'user' or 'caretaker'\n  const ReportPage({super.key, required this.reporterRole});\n\n  @override\n  State<ReportPage> createState() => _ReportPageState();\n}\n\nclass _ReportPageState extends State<ReportPage> {\n  final TextEditingController _usernameController = TextEditingController();\n  final TextEditingController _titleController = TextEditingController();\n  final TextEditingController _descriptionController = TextEditingController();\n  bool _userFound = false;\n\n  Future<void> _searchUser() async {\n    final coll = widget.reporterRole == 'user' ? 'caretaker' : 'user';\n    final snap = await FirebaseFirestore.instance\n        .collection(coll)\n        .where('username', isEqualTo: _usernameController.text.trim())\n        .get();\n    setState(() => _userFound = snap.docs.isNotEmpty);\n  }\n\n  Future<void> _submitReport() async {\n    final uid = FirebaseAuth.instance.currentUser?.uid;\n    if (uid == null) return;\n\n    final coll = widget.reporterRole == 'user' ? 'caretaker' : 'user';\n    final snap = await FirebaseFirestore.instance\n        .collection(coll)\n        .where('username', isEqualTo: _usernameController.text.trim())\n        .get();\n\n    if (snap.docs.isEmpty) return;\n\n    final reportedUid = snap.docs.first.id;\n\n    await FirebaseFirestore.instance.collection('reports').add({\n      'sender_uid': uid,\n      'sender_role': widget.reporterRole,\n      'reported_uid': reportedUid,\n      'reported_role': coll,\n      'title': _titleController.text,\n      'description': _descriptionController.text,\n      'created_at': Timestamp.now(),\n      'seen': false,\n    });\n    if (mounted) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(content: Text('Report submitted')),\n      );\n      Navigator.pop(context);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final targetRole = widget.reporterRole == 'user' ? 'Caretaker' : 'User';\n    return Scaffold(\n      appBar: AppBar(title: const Text('Report')),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            TextField(\n              controller: _usernameController,\n              decoration: InputDecoration(labelText: 'Search $targetRole Username'),\n            ),\n            ElevatedButton(onPressed: _searchUser, child: const Text('Search')),\n            if (_userFound) ...[\n              TextField(\n                controller: _titleController,\n                decoration: const InputDecoration(labelText: 'Title'),\n              ),\n              TextField(\n                controller: _descriptionController,\n                decoration: const InputDecoration(labelText: 'Description'),\n              ),\n              ElevatedButton(onPressed: _submitReport, child: const Text('Submit')),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n}",
      "_encoding": "utf-8"
    },
    "welcome_page.dart": {
      "_text": "// lib/welcome_page.dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_animate/flutter_animate.dart';\nimport 'login_page.dart';\n\nclass WelcomePage extends StatelessWidget {\n  const WelcomePage({Key? key}) : super(key: key);\n\n  void _navigateTo(BuildContext context, String role) {\n    Navigator.push(\n      context,\n      MaterialPageRoute(\n        builder: (context) => LoginPage(role: role),\n      ),\n    );\n  }\n\n  void _showAdminDialog(BuildContext context) {\n  showDialog(\n    context: context,\n    builder: (context) => AlertDialog(\n      title: const Text('Admin Login'),\n      content: const Text('Proceed to admin login?'),\n      actions: [\n        TextButton(onPressed: () => Navigator.pop(context), child: const Text('Cancel')),\n        TextButton(onPressed: () {\n          Navigator.pop(context);\n          _navigateTo(context, 'admin');\n        }, child: const Text('Yes')),\n      ],\n    ),\n  );\n}\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: const BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.blueAccent, Colors.lightBlue],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n        ),\n        child: SafeArea(\n          child: Center(\n            child: Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                  GestureDetector(\n                      onLongPress: () => _showAdminDialog(context),\n                      child: const Text(\n                        'Welcome to DVMA',\n                      style: TextStyle(\n                        fontSize: 32,\n                        fontWeight: FontWeight.bold,\n                        color: Colors.white,\n                        letterSpacing: 1.2,\n                        shadows: [\n                          Shadow(\n                            blurRadius: 10.0,\n                            color: Colors.black26,\n                            offset: Offset(2.0, 2.0),\n                          ),\n                        ],\n                      ),\n                      textAlign: TextAlign.center,\n                    ),\n                  ).animate().fadeIn(duration: 800.ms).slideY(begin: -0.2),\n                  const SizedBox(height: 16),\n                  const Text(\n                    'Select your role to continue',\n                    style: TextStyle(\n                      fontSize: 18,\n                      color: Colors.white70,\n                      fontStyle: FontStyle.italic,\n                    ),\n                  ).animate().fadeIn(duration: 1000.ms).slideY(begin: 0.2),\n                  const SizedBox(height: 48),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.person,\n                    label: 'I am a User',\n                    role: 'user',\n                    gradient: const LinearGradient(\n                      colors: [Colors.blue, Colors.blueAccent],\n                    ),\n                  ),\n                  const SizedBox(height: 20),\n                  _buildRoleButton(\n                    context: context,\n                    icon: Icons.volunteer_activism,\n                    label: 'I am a Caretaker',\n                    role: 'caretaker',\n                    gradient: const LinearGradient(\n                      colors: [Colors.green, Colors.greenAccent],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildRoleButton({\n    required BuildContext context,\n    required IconData icon,\n    required String label,\n    required String role,\n    required LinearGradient gradient,\n  }) {\n    return Card(\n      elevation: 8,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: InkWell(\n        onTap: () => _navigateTo(context, role),\n        borderRadius: BorderRadius.circular(12),\n        child: Container(\n          decoration: BoxDecoration(\n            gradient: gradient,\n            borderRadius: BorderRadius.circular(12),\n          ),\n          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),\n          child: Row(\n            children: [\n              Icon(icon, size: 30, color: Colors.white),\n              const SizedBox(width: 16),\n              Expanded(\n                child: Text(\n                  label,\n                  style: const TextStyle(\n                    fontSize: 18,\n                    fontWeight: FontWeight.w600,\n                    color: Colors.white,\n                  ),\n                ),\n              ),\n              const Icon(Icons.arrow_forward, color: Colors.white),\n            ],\n          ),\n        ),\n      ),\n    ).animate().scale(duration: 600.ms, delay: 200.ms, curve: Curves.easeOut);\n  }\n}",
      "_encoding": "utf-8"
    }
  }
}